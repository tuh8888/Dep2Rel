<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutomaticModuleUnloader">
    <loaded-modules>
      <module name="relation-extraction" />
    </loaded-modules>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="71a49c10-4db0-4a57-95f1-058f03502d6e" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/util.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/util.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="183">
              <caret line="25" column="23" selection-start-line="25" selection-start-column="23" selection-end-line="25" selection-end-column="23" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="235">
              <caret line="52" column="7" lean-forward="true" selection-start-line="52" selection-start-column="7" selection-end-line="52" selection-end-column="7" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="282">
              <caret line="25" column="11" lean-forward="true" selection-start-line="25" selection-start-column="11" selection-end-line="25" selection-end-column="11" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="297">
              <caret line="53" column="42" selection-start-line="53" selection-start-column="42" selection-end-line="53" selection-end-column="42" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="35">
              <caret line="39" column="22" lean-forward="true" selection-start-line="39" selection-start-column="22" selection-end-line="39" selection-end-column="22" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="158">
              <caret line="38" column="18" lean-forward="true" selection-start-line="38" selection-start-column="18" selection-end-line="38" selection-end-column="18" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Python Script" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindBugs-IDEA-Workspace">
    <toolWindowEditorPreview>false</toolWindowEditorPreview>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>assoc</find>
      <find>rest</find>
      <find>keep</find>
      <find>:vec</find>
      <find>:relations</find>
      <find>:seed</find>
      <find>print</find>
      <find>cluster</find>
      <find>dv</find>
      <find>xpy</find>
      <find>axpy</find>
      <find>scal</find>
      <find>open-database</find>
      <find>(:dependency sources)</find>
      <find>sources</find>
      <find>conj</find>
      <find>join</find>
      <find>empty</find>
      <find>concepts</find>
      <find>word</find>
      <find>count</find>
      <find>mapcat</find>
      <find>k</find>
      <find>Sentence</find>
      <find>Se</find>
      <find>dep-</find>
      <find>extract-relations</find>
      <find>getowlclassdes</find>
      <find>info</find>
      <find>getSub</find>
    </findStrings>
    <replaceStrings>
      <replace>concept</replace>
      <replace>load</replace>
      <replace>dependency</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/breds.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/nlp/relation_extraction/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/biostacks.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/bio/biostacks.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/biostacks/GoogleCloudHelper.java" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/biostacks/biostacks.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/query/biostacks.clj" />
        <option value="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.txt" />
        <option value="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.py" />
        <option value="$PROJECT_DIR$/test/edu/ucdenver/nlp/relation_extraction/core_test.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/nlp/relation_extraction/breds.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/nlp/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/knowtator.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/conll.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/nlp/word2vec.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/nlp/relation_extraction/core.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/breds.clj" />
        <option value="$USER_HOME$/.lein/profiles.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator.clj" />
        <option value="$PROJECT_DIR$/src/scripts/try_knowtator.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/../nrepl-rebl/src/nrepl_rebl/core.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/core.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-8" />
    <option name="y" value="-8" />
    <option name="width" value="1616" />
    <option name="height" value="916" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="relation-extraction" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="ACTIVE_CLOUD_PROJECT_ACCOUNT" value="hunter.laboratory@gmail.com" />
    <property name="ACTIVE_CLOUD_PROJECT_ID" value="boreal-totality-216717" />
    <property name="ACTIVE_CLOUD_PROJECT_NAME" value="BioStacks" />
    <property name="ACTIVE_CLOUD_PROJECT_NUMBER" value="292862873898" />
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="$PROJECT_DIR$/src/scripts/try_knowtator.clj&#10;C:/Users/pielkelh/Drive/projects/relation-extraction/src/scripts/relation_extraction_script.clj&#10;C:/Users/pielkelh/Drive/projects/relation-extraction/.gitignore" />
    <property name="com.intellij.ide.scratch.LRUPopupBuilder$1/New Scratch File" value="TEXT&#10;GenericSQL" />
    <property name="cursive.last.file.extension.C\:/Users/pielkelh/Drive/projects/relation-extraction/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../nrepl-rebl" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.tabs" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\ccp\nlp" />
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\ccp" />
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\bio" />
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\nlp" />
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\nlp\relation_extraction" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="edu.ucdenver" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction\src\edu\ucdenver\ccp" />
      <recent name="C:\Users\pielkelh\Drive\projects\relation-extraction" />
    </key>
  </component>
  <component name="ReplState" timestamp="1553033268907">{:repl-history {:ide [], :local [{:command &quot;(ns scripts.try-knowtator\n  (:require [clojure.java.io :as io])\n  (:import (edu.ucdenver.ccp.knowtator KnowtatorStandalone)\n           (edu.ucdenver.ccp.knowtator.view KnowtatorView)))&quot;, :offset 184, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def dialog (KnowtatorStandalone. false))&quot;, :offset 41, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def view (KnowtatorView.))&quot;, :offset 27, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(ns scripts.try-knowtator\n  (:require [clojure.java.io :as io])\n  (:import (edu.ucdenver.ccp.knowtator KnowtatorStandalone)\n           (edu.ucdenver.ccp.knowtator.view KnowtatorView)\n           (javax.swing JFrame)))&quot;, :offset 216, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def dialog (JFrame.))&quot;, :offset 22, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(-&gt; dialog\n    (.setContentPane view)\n    (.pack)\n    (.setVisible true))&quot;, :offset 73, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(doto (JFrame.)\n  (.setContentPane view)\n  (.pack)\n  (.setVisible true))&quot;, :offset 72, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(.loadProject view f nil)&quot;, :offset 25, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def model (.model view))&quot;, :offset 25, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(KnowtatorStandalone. false)&quot;, :offset 0} {:command &quot;view&quot;, :offset 4, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(bean view)&quot;, :offset 10, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def model (.getModel view))&quot;, :offset 28, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def model (.get (.getModel view)))&quot;, :offset 35, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def model (keys (bean (.get (.getModel view)))))&quot;, :offset 49, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(keys (bean (.get (.getModel view))))&quot;, :offset 37, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def model (bean (.get (.getModel view))))&quot;, :offset 42, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(:selectedConceptAnnotation model)&quot;, :offset 34, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(.get (:selectedConceptAnnotation model))&quot;, :offset 41, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(bean (.get (:selectedConceptAnnotation model)))&quot;, :offset 48, :ns &quot;scripts.try-knowtator&quot;} {:command &quot;(def craft-dir (io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;CRAFT\&quot; \&quot;branches\&quot; \&quot;RC-4.0\&quot; \&quot;concepts+assertions\&quot;))&quot;, :offset 87, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def f (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))&quot;, :offset 59, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def v (view f))&quot;, :offset 16, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [view]\n  (-&gt;&gt; (:textSources (model view))\n       (map #(-&gt;&gt; (:conceptAnnotations (bean %))\n                  (map bean)\n                  (vec)))\n       (vec)))&quot;, :offset 181, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(simple-model view)&quot;, :offset 19, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(display v)&quot;, :offset 11, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn selected-annotation\n  [view]\n  (bean (.get (:selectedConceptAnnotation (model view)))))&quot;, :offset 93, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(selected-annotation v)&quot;, :offset 23, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;l&quot;, :offset 1, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(simple-model v)&quot;, :offset 16, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(first (k/simple-model annotations))&quot;, :offset 36, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;{:a \&quot;hi\&quot;}&quot;, :offset 9, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defrecord ReblTransport [transport handler-msg]\n  Transport\n  (recv [this timeout]\n    (transport/recv transport timeout))\n  (send [this {:keys [value] :as msg}]\n    (transport/send transport msg)\n    (when-let [code-form (read-string* (:code handler-msg))]\n      (when (and (some? value)\n                 (not (form-from-cursive? code-form)))\n        (rebl/submit code-form (read-string value))))\n    transport))&quot;, :offset 414, :ns &quot;nrepl-rebl.core&quot;} {:command &quot;(defn simple-model\n  [v]\n  (-&gt;&gt; (:textSources (model v))\n       (map (fn [t]\n              (let [t (-&gt; (bean t)\n                          (update :conceptAnnotations #(vec (map (fn [a]\n                                                                   (assoc (bean a) :spans (vec (map bean a))))\n                                                                 %)))\n                          (update :graphSpaces #(vec (map (fn [g]\n                                                            (let [g (bean g)]\n                                                              (-&gt; g\n                                                                  (assoc :triples (vec (map bean (:relationAnnotations g))))\n                                                                  (assoc :vertices (vec (map bean (:annotationNodes g)))))))\n                                                          %))))]\n                [(:id t) t])))\n       (into {})))&quot;, :offset 942, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def sentences (read-sentences annotations dependency))&quot;, :offset 55, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (read-sentences (filter #((set articles) (first %)) annotations) dependency))&quot;, :offset 92, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(second (first (k/simple-model annotations)))&quot;, :offset 0} {:command &quot;sentences&quot;, :offset 9, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first sentences)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn read-sentences\n  [annotations dependency articles]\n  (doall (vec (sentence/make-sentences (k/simple-model annotations) dependency articles))))&quot;, :offset 148, :ns &quot;edu.ucdenver.ccp.nlp.core&quot;} {:command &quot;(def sentences (read-sentences annotations dependency articles))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn get-sentences-with-ann\n  [sentences id]\n  (filter (fn [s]\n            (some (fn [e]\n                    (= id (get-in e [:ann :id])))\n                 (get s :entities))) sentences))&quot;, :offset 188, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (get-sentences-with-ann sentences (:id (k/selected-annotation annotations))))&quot;, :offset 84, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getOwlCLassDescendants (k/model annotations) (:owlClass (k/selected-annotation)))&quot;, :offset 83, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getOwlCLassDescendants (k/model annotations) (:owlClass (k/selected-annotation annotations)))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :refer [set-level! info]]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.core :refer :all]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :refer :all]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))&quot;, :offset 589, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getOwlCLassDescendants ^KnowtatorModel (k/model annotations) (:owlClass (k/selected-annotation annotations)))&quot;, :offset 111, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(bean (k/model annotations))&quot;, :offset 28, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(:owlOntologyManager (bean (k/model annotations)))&quot;, :offset 50, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :refer [set-level! info]]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.core :refer :all]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :refer :all]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.HermiT ReasonerFactory)))&quot;, :offset 641, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns edu.ucdenver.ccp.knowtator-clj\n  (:import (edu.ucdenver.ccp.knowtator.view KnowtatorView)\n           (javax.swing JFrame)\n           (org.semanticweb.HermiT ReasonerFactory)))&quot;, :offset 179, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(k/selected-annotation annotations)&quot;, :offset 35, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(reasoner annotations)&quot;, :offset 22, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getSubclasses ^OWLReasoner (reasoner annotations) (:owlClass (k/selected-annotation)))&quot;, :offset 88, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getSubclasses (reasoner annotations) (:owlClass (k/selected-annotation)) false)&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getSubclasses (reasoner annotations) (:owlClass (k/selected-annotation annotations)) false)&quot;, :offset 93, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getSubClasses (reasoner annotations) (:owlClass (k/selected-annotation annotations)) false)&quot;, :offset 93, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getFlattened (.getSubClasses (reasoner annotations) (:owlClass (k/selected-annotation annotations)) false))&quot;, :offset 109, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defrecord ReblTransport [transport handler-msg]\n  Transport\n  (recv [this timeout]\n    (transport/recv transport timeout))\n  (send [this {:keys [value] :as msg}]\n    (transport/send transport msg)\n    (when-let [code-form (read-string* (:code handler-msg))]\n      (when (and (some? value)\n                 (not (form-from-cursive? code-form)))\n        (rebl/submit code-form value)))\n    transport))&quot;, :offset 400, :ns &quot;nrepl-rebl.core&quot;} {:command &quot;(defrecord ReblTransport [transport handler-msg]\n  Transport\n  (recv [this timeout]\n    (transport/recv transport timeout))\n  (send [this {:keys [value] :as msg}]\n    (transport/send transport msg)\n    (when-let [code-form (read-string* (:code handler-msg))]\n      (when (and (some? value)\n                 (not (form-from-cursive? code-form)))\n        (rebl/submit code-form (read-string* value))))\n    transport))&quot;, :offset 415, :ns &quot;nrepl-rebl.core&quot;} {:command &quot;(get sentences 74)&quot;, :offset 18, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(k/display annotations)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-sentences-with-ann sentences (:id (k/selected-annotation annotations)))&quot;, :offset 76, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(:id (k/selected-annotation annotations))&quot;, :offset 41, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def ann1-id \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;)&quot;, :offset 55, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def ann2-id \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)&quot;, :offset 55, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-sentences-with-ann sentences ann1-id)&quot;, :offset 42, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(set/intersection (set (get-sentences-with-ann sentences ann1-id)) (set get-sentences-with-ann sentences ann2-id))&quot;, :offset 114, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(set1/intersection (set (get-sentences-with-ann sentences ann1-id)) (set get-sentences-with-ann sentences ann2-id))&quot;, :offset 115, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(set1/intersection (set (get-sentences-with-ann sentences ann1-id)) (set (get-sentences-with-ann sentences ann2-id)))&quot;, :offset 117, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (set1/intersection (set (get-sentences-with-ann sentences ann1-id)) (set (get-sentences-with-ann sentences ann2-id))))&quot;, :offset 125, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds #{(first\n                               (set1/intersection\n                                 (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                 (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))}\n                     seed-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                     matches (-&gt;&gt; (naive-extract-relations sentences\n                                                           context-vector-cosine-sim\n                                                           seed-thresh\n                                                           seeds) #_(naive-extract-relations (list seed)\n                                                                                             (:sentences sources)\n                                                                                             :cluster-thresh cluster-thresh\n                                                                                             :seed-thresh seed-thresh\n                                                                                             :min-support min-support)\n                                  (map #(assoc % :seed seed\n                                                 :cluster-thresh cluster-thresh\n                                                 :seed-thresh seed-thresh\n                                                 :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1717, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                          (set1/intersection\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                   seeds #{seed}\n                   seed-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                   matches (-&gt;&gt; (naive-extract-relations sentences\n                                                         context-vector-cosine-sim\n                                                         seed-thresh\n                                                         seeds) #_(naive-extract-relations (list seed)\n                                                                                           (:sentences sources)\n                                                                                           :cluster-thresh cluster-thresh\n                                                                                           :seed-thresh seed-thresh\n                                                                                           :min-support min-support)\n                                (map #(assoc % :seed seed\n                                               :cluster-thresh cluster-thresh\n                                               :seed-thresh seed-thresh\n                                               :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n               (info (count matches))\n               matches))&quot;, :offset 1697, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     seeds #{seed}\n                     seed-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                     matches (-&gt;&gt; (naive-extract-relations sentences\n                                                           context-vector-cosine-sim\n                                                           seed-thresh\n                                                           seeds) #_(naive-extract-relations (list seed)\n                                                                                             (:sentences sources)\n                                                                                             :cluster-thresh cluster-thresh\n                                                                                             :seed-thresh seed-thresh\n                                                                                             :min-support min-support)\n                                  (map #(assoc % :seed seed\n                                                 :cluster-thresh cluster-thresh\n                                                 :seed-thresh seed-thresh\n                                                 :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1739, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-owl-descendants annotations (:owlClass (k/selected-annotation annotations)))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(k/get-owl-descendants annotations (:owlClass (k/selected-annotation annotations)))&quot;, :offset 83, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                          (set1/intersection\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                   seeds #{seed}\n                   seed-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                   seed-match-fn #(and (concepts-match? annotations %1 %2)\n                                       (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                   context-match-fn #(&lt; seed-thresh (context-vector-cosine-sim %1 %2))\n                   cluster-merge-fn add-to-pattern\n                   cluster-match-fn #(&lt; cluster-thresh (context-vector-cosine-sim %1 %2))\n                   matches (-&gt;&gt; (naive-extract-relations seeds\n                                                         sentences\n                                                         :seed-match-fn seed-match-fn\n                                                         :context-match-fn context-match-fn)\n                                (map #(assoc % :seed seed\n                                               :cluster-thresh cluster-thresh\n                                               :seed-thresh seed-thresh\n                                               :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n               (info (count matches))\n               matches))&quot;, :offset 1610, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concepts-match?\n  [annotations s1 s2]\n  (let [c1 (:concepts s1)\n        dec-c1 (map #(-&gt; (k/get-owl-descendants annotations %)\n                         (set)\n                         (conj %))\n                    c1)]\n    (every? identity (map #(%1 %2) dec-c1 (:concepts s2)))))&quot;, :offset 284, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     seeds #{seed}\n                     seed-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                     seed-match-fn #(and (concepts-match? annotations %1 %2)\n                                         (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                     context-match-fn #(&lt; seed-thresh (context-vector-cosine-sim %1 %2))\n                     cluster-merge-fn add-to-pattern\n                     cluster-match-fn #(&lt; cluster-thresh (context-vector-cosine-sim %1 %2))\n                     matches (-&gt;&gt; (naive-extract-relations seeds\n                                                           sentences\n                                                           :seed-match-fn seed-match-fn\n                                                           :context-match-fn context-match-fn)\n                                  (map #(assoc % :seed seed\n                                                 :cluster-thresh cluster-thresh\n                                                 :seed-thresh seed-thresh\n                                                 :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1654, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn seed-match-fn\n  [seed-thresh s1 s2]\n  (and (concepts-match? annotations s1 s2)\n       (&lt; seed-thresh (context-vector-cosine-sim s1 s2))))&quot;, :offset 143, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     seeds #{seed}\n                     seed-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10 #_(int (* 0.00001 (count (:sentences sources))))\n                     seed-match-fn (partial seed-match-fn seed-thresh)\n                     context-match-fn #(&lt; seed-thresh (context-vector-cosine-sim %1 %2))\n                     cluster-merge-fn add-to-pattern\n                     cluster-match-fn #(&lt; cluster-thresh (context-vector-cosine-sim %1 %2))\n                     matches (-&gt;&gt; (naive-extract-relations seeds\n                                                           sentences\n                                                           :seed-match-fn seed-match-fn\n                                                           :context-match-fn context-match-fn)\n                                  (map #(assoc % :seed seed\n                                                 :cluster-thresh cluster-thresh\n                                                 :seed-thresh seed-thresh\n                                                 :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1556, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     seeds #{seed}\n                     params {:seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh 0.9\n                             :min-support 10}\n                     matches (-&gt;&gt; (naive-extract-relations seeds\n                                                           sentences\n                                                           params)\n                                  (map #(assoc % :seed seed\n                                                 :cluster-thresh cluster-thresh\n                                                 :seed-thresh seed-thresh\n                                                 :min-support min-support))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1478, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     \n                     params {:seed seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh 0.9\n                             :min-support 10}\n                     matches (-&gt;&gt; (naive-extract-relations #{{:seed params}}\n                                                           sentences\n                                                           params)\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1285, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     params {:seed             seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   0.9\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations #{(:seed params)}\n                                                           sentences\n                                                           {:keys params})\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1290, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     params {:seed             seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   0.9\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations #{(:seed params)}\n                                                           sentences\n                                                           [params])\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1284, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     params {:seed             seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   0.9\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations #{(:seed params)}\n                                                           sentences\n                                                           params)\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1282, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     params {:seed             seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   0.9\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations #{seed}\n                                                           sentences\n                                                           params)\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1272, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn naive-extract-relations\n  \&quot;Finds sentences with the same concepts as the seeds.\n  These are then used to find other sentences with similar contexts but potentially\n  different concepts.\&quot;\n  [seeds sentences &amp; [{:keys [seed-match-fn context-match-fn]}]]\n  (let [seed-matches (find-matches seeds sentences #(seed-match-fn %1 %2))]\n    (find-matches seed-matches sentences #(context-match-fn %1 %2))))&quot;, :offset 403, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def matches (let [seed (first\n                            (set1/intersection\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                              (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))\n                     params {\n                             ;;:seed             seed\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; 0.9 (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; 0.7 (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   0.9\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations #{seed}\n                                                           sentences\n                                                           params)\n                                  (map #(merge % params))) #_(extract-all-relations seed-thresh cluster-thresh min-support sources)]\n                 (info (count matches))\n                 matches))&quot;, :offset 1304, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (set1/intersection\n         (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n         (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;))))&quot;, :offset 210, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-descendants-match?\n  [annotations s1 s2]\n  (let [dec-c1 (map #(-&gt; (k/get-owl-descendants annotations %)\n                         (set)\n                         (conj %))\n                    (:concepts s1))]\n    (every? identity (map (fn [c2] \n                            (some #(% c2) dec-c1))\n                          (:concepts s2)))))&quot;, :offset 352, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concepts-match?\n  [s1 s2]\n  (= (set (:concepts s1)) (set (:concepts s2))))&quot;, :offset 80, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def matches (let [seeds (set1/intersection\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.7\n                     cluster-thresh 0.9\n                     params {:seeds             seeds\n                             :seed-thresh seed-thresh\n                             :context-thresh context-thresh\n                             :seed-match-fn    #(and (concepts-match? annotations %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   cluster-thresh\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (info (count matches))\n                 matches))&quot;, :offset 1303, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (set1/intersection\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                            (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.7\n                     cluster-thresh 0.9\n                     params {:seeds             seeds\n                             :seed-thresh seed-thresh\n                             :context-thresh context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   cluster-thresh\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (info (count matches))\n                 matches))&quot;, :offset 1291, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (set1/intersection\n                             (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.7\n                     cluster-thresh 0.9\n                     params {:seeds            seeds\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concept-descendants-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   cluster-thresh\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (info (count matches))\n                 matches))&quot;, :offset 1310, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :refer [set-level! info]]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.core :refer :all]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :refer :all]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]))&quot;, :offset 562, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (set1/intersection\n                             (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.7\n                     cluster-thresh 0.9\n                     params {:seeds            seeds\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concept-descendants-match? annotations %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-sim-fn   context-vector-cosine-sim\n                             :cluster-thresh   cluster-thresh\n                             :min-support      10}\n                     matches (-&gt;&gt; (naive-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (info (count matches))\n                 matches))&quot;, :offset 1322, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.gc (Runtime/getRuntime))&quot;, :offset 26, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count sentences)&quot;, :offset 17, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn make-sentences\n  [annotations dependency articles]\n  (mapcat (fn [doc-id]\n            (-&gt;&gt;\n              (annotations-&gt;entities (get-in annotations [doc-id :conceptAnnotations])\n                                     (get dependency doc-id))\n              (group-by :sent)\n              (mapcat\n                (fn [[sent sent-entities]]\n                  (map\n                    (fn [[e1 e2]]\n                      (let [entities #{e1 e2}\n                            concepts (-&gt;&gt; [e1 e2] \n                                          (map :concept)\n                                          (map #(k/get-owl-descendants annotations %))\n                                          (map set)\n                                          (set))\n                            deps (map (comp set :dep) [e1 e2])\n                            context-vector (when-let [vectors (-&gt;&gt; (difference (apply union deps)\n                                                                               (apply intersection deps))\n                                                                   (keep :VEC)\n                                                                   (seq))]\n                                             (apply unit-vec-sum vectors))]\n                        (-&gt;Sentence concepts entities doc-id sent context-vector)))\n                    (combo/combinations sent-entities 2))))))\n          articles))&quot;, :offset 1404, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;}], :remote [{:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n        annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n        dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n        word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n        article \&quot;11532192\&quot;\n        annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n        dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n        thresh 0.5]\n    #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n    (knowtator/span annotations 0 0 0))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn span-end\n  [k doc-id ann-id span-id]\n  (:start (xml/attrs (span k doc-id ann-id span-id))))&quot;, :offset 97, :ns &quot;edu.ucdenver.ccp.knowtator&quot;} {:command &quot;(defn span-start\n  [k doc-id ann-id span-id]\n  (:start (xml/attrs (span k doc-id ann-id span-id))))&quot;, :offset 99, :ns &quot;edu.ucdenver.ccp.knowtator&quot;} {:command &quot;(defn span-start\n  [k doc-id ann-id span-id]\n  (-&gt; (span k doc-id ann-id span-id) \n      (xml/attrs) \n      (:start) \n      (Integer/parseInt)))&quot;, :offset 144, :ns &quot;edu.ucdenver.ccp.knowtator&quot;} {:command &quot;(defn span-end\n  [k doc-id ann-id span-id]\n  (-&gt; (span k doc-id ann-id span-id) \n      (xml/attrs) \n      (:end) \n      (Integer/parseInt)))&quot;, :offset 140, :ns &quot;edu.ucdenver.ccp.knowtator&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (knowtator/span-start annotations 0 0 0))&quot;, :offset 807, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (knowtator/span-end annotations 0 0 0))&quot;, :offset 805, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn get-tok-end\n  ([c sent-idx tok-idx]\n   (+ tok-idx\n      (reduce #(+ %1 (count (get %2 :FORM))) 0\n              (first (split-at (inc tok-idx) (get c sent-idx))))))\n  ([c tok-idx]\n   (let [num-sents (count c)]\n     (+ num-sents\n        tok-idx\n        (reduce #(+ %1 (count (get %2 :FORM)))\n                0 (split-at (inc tok-idx) (mapcat identity c)))))))&quot;, :offset 363, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn get-tok-start\n  ([c sent-idx tok-idx]\n   (+ tok-idx (reduce #(+ %1 (count (get %2 :FORM))) 0\n                      (first (split-at tok-idx (get c sent-idx))))))\n  ([c tok-idx]\n   (let [num-sents (count c)]\n     (+ num-sents\n        tok-idx\n        (reduce #(+ %1 (count (get %2 :FORM)))\n                0 (split-at tok-idx (mapcat identity c)))))))&quot;, :offset 355, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn get-sent\n  [c start end]\n  (some #(and (&lt; start (+ % (get-tok-start c %)))\n              (&gt; end (get-tok-end c % (dec (count %)))))\n        (range (count c))))&quot;, :offset 165, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (conll/get-sent c start end)))&quot;, :offset 989, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn get-sent\n  [c start end]\n  (some #(and (&lt; start (+ % (get-tok-start c %)))\n              (&gt; end (get-tok-end c % (dec (count (get c %))))))\n        (range (count c))))&quot;, :offset 173, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn get-sent\n  [c start end]\n  (some #(and (&lt; start (+ % (get-tok-start c %)))\n              (&gt; end (get-tok-end c % (dec (count (get c %)))))\n              %)\n        (range (count c))))&quot;, :offset 189, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (conll/get-sent dependency start end)))&quot;, :offset 998, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;d&quot;, :offset 1, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn tok-end\n  [c sent-idx tok-idx]\n  (+ tok-idx\n     (reduce #(+ %1 (count (get %2 :FORM))) 0\n             (first (split-at (inc tok-idx) (get c sent-idx))))))&quot;, :offset 161, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn tok-start\n  [c sent-idx tok-idx]\n  (+ tok-idx (reduce #(+ %1 (count (get %2 :FORM))) 0\n                     (first (split-at tok-idx (get c sent-idx))))))&quot;, :offset 160, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn concept-tok\n  [c start end]\n  (loop [curr-sent 0\n         curr-tok 0]\n    (if (and (&lt; start (conll/tok-start c curr-sent curr-tok))\n             (&gt; end (conll/tok-end c curr-sent curr-tok)))\n      [curr-sent curr-tok]\n      (recur (inc curr-sent) (inc curr-tok)))))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (get-in dependency (concept-tok dependency start end))))&quot;, :offset 1015, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)\n    (dependency 1)))&quot;, :offset 1014, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)\n    (get-in dependency [1 1])))&quot;, :offset 1025, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)\n    (get-in dependency [1])))&quot;, :offset 1023, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)\n    (get-in dependency [1 0])))&quot;, :offset 1025, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concept-tok\n  [c start end]\n  (loop [curr-sent 0\n         curr-tok 0]\n    (if (&lt; (conll/tok-start c curr-sent curr-tok) start\n           end (conll/tok-end c curr-sent curr-tok))\n      [curr-sent curr-tok]\n      (recur (inc curr-sent) (inc curr-tok)))))&quot;, :offset 259, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (first (split-at 0 (get dependency 0)))\n    #_(concept-tok dependency start end)))&quot;, :offset 1041, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (first (split-at 1 (get dependency 0)))\n    #_(concept-tok dependency start end)))&quot;, :offset 1041, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concept-tok\n  [c start end]\n  (loop [curr-sent 0\n         curr-tok 0]\n    (if (&lt;= (conll/tok-start c curr-sent curr-tok) start\n           end (conll/tok-end c curr-sent curr-tok))\n      [curr-sent curr-tok]\n      (recur (inc curr-sent) (inc curr-tok)))))&quot;, :offset 260, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 0\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)))&quot;, :offset 995, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n      annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n      dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n      word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;) #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n      article \&quot;11532192\&quot;\n      annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n      dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n      thresh 0.5]\n  #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n      #_(first dependency)\n      #_(word2vec/get-word-vector \&quot;the\&quot;))\n  (let [doc-id 0\n        ann-id 1\n        span-id 0\n        start (knowtator/span-start annotations doc-id ann-id span-id)\n        end (knowtator/span-end annotations doc-id ann-id span-id)]\n    (concept-tok dependency start end)))&quot;, :offset 995, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;)\n        annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n        dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n        word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;)\n        article \&quot;11532192\&quot;\n        annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n        dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n        thresh 0.5]\n    #_(word2vec/with-word2vec (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n        #_(first dependency)\n        #_(word2vec/get-word-vector \&quot;the\&quot;))\n    (let [doc-id 0\n          ann-id 1\n          span-id 0\n          start (knowtator/span-start annotations doc-id ann-id span-id)\n          end (knowtator/span-end annotations doc-id ann-id span-id)]\n      (concept-tok dependency start end)))&quot;, :offset 953, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;)\n        annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;)\n        dependency-dir (io/file craft-dir \&quot;dependency\&quot;)\n        word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;)\n        article \&quot;11532192\&quot;\n        annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;)))\n        dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;)))\n        thresh 0.5]\n    (let [doc-id 0\n          ann-id 0\n          span-id 0\n          start (knowtator/span-start annotations doc-id ann-id span-id)\n          end (knowtator/span-end annotations doc-id ann-id span-id)]\n      (count (knowtator/annotations annotations 0))))&quot;, :offset 789, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concept-tok\n  [k c doc-id ann-id]\n  (let [start (knowtator/span-start k doc-id ann-id 0)\n        end (knowtator/span-end k doc-id ann-id 0)]\n    (loop [curr-sent 0\n           curr-tok 0]\n      (cond (&lt;= (conll/tok-start c curr-sent curr-tok) start end (conll/tok-end c curr-sent curr-tok)) [curr-sent curr-tok]\n            (&lt; (count c) curr-sent) []\n            :else (let [next-tok (inc curr-tok)]\n                    (if (&lt; (count (get c curr-sent))\n                           next-tok)\n                      (recur (inc curr-sent) 0)\n                      (recur curr-sent next-tok)))))))&quot;, :offset 597, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [edu.ucdenver.ccp.conll :as conll]\n            [edu.ucdenver.ccp.knowtator :as knowtator]))&quot;, :offset 209, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [edu.ucdenver.ccp.conll :as conll]\n            [edu.ucdenver.ccp.knowtator :as knowtator]\n            [clojure.java.io :as io]))&quot;, :offset 246, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def craft-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;))&quot;, :offset 56, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word-vector-dir (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;))&quot;, :offset 65, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def article \&quot;11532192\&quot;)&quot;, :offset 24, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;))))&quot;, :offset 105, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def dependency (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;))))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def thresh 0.5)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map (partial concept-tok)\n     (range (count (knowtator/annotations annotations doc-id))))&quot;, :offset 91, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def doc-id 0)&quot;, :offset 14, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map #(concept-tok annotations dependency doc-id %)\n     (range (count (knowtator/annotations annotations doc-id))))&quot;, :offset 116, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(concept-tok annotations dependency doc-id 10)&quot;, :offset 46, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(knowtator/annotations annotations doc-id 10)&quot;, :offset 45, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(knowtator/annotation annotations doc-id 10)&quot;, :offset 44, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def k (knowtator/read-knowtator (io/file annotations-dir (str article \&quot;.txt.knowtator.xml\&quot;))))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def c (conll/read-conll (io/file dependency-dir (str article \&quot;.dep\&quot;))))&quot;, :offset 72, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def doc 0)&quot;, :offset 11, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(let [sent (dec (count c))\n      tok (dec (count (get c sent)))]\n  [sent tok])&quot;, :offset 78, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(let [sent (dec (count c))\n      tok (dec (count (get c sent)))]\n  (conll/tok-start sent tok))&quot;, :offset 94, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-tok\n  [k c doc-id ann-id]\n  (loop [curr-sent 0\n         curr-tok 0\n         start (knowtator/span-start k doc-id ann-id 0)\n         end (knowtator/span-end k doc-id ann-id 0)]\n    (cond (&lt;= (conll/tok-start c curr-sent curr-tok) start end (conll/tok-end c curr-sent curr-tok)) [curr-sent curr-tok]\n          (&lt; (count c) curr-sent) []\n          :else (let [next-tok (inc curr-tok)]\n                  (if (&lt; (count (get c curr-sent))\n                         next-tok)\n                    (recur (inc curr-sent) \n                           0 \n                           (- start (conll/tok-start c curr-sent curr-tok))\n                           (- end (conll/tok-end c curr-sent curr-tok)))\n                    (recur curr-sent next-tok))))))&quot;, :offset 756, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concept-tok\n  [k c doc-id ann-id]\n  (loop [curr-sent 0\n         curr-tok 0\n         start (knowtator/span-start k doc-id ann-id 0)\n         end (knowtator/span-end k doc-id ann-id 0)]\n    (cond (&lt;= (conll/tok-start c curr-sent curr-tok) start end (conll/tok-end c curr-sent curr-tok)) [curr-sent curr-tok]\n          (&lt; (count c) curr-sent) []\n          :else (let [next-tok (inc curr-tok)]\n                  (if (&lt; (count (get c curr-sent))\n                         next-tok)\n                    (recur (inc curr-sent) \n                           0 \n                           (- start (conll/tok-start c curr-sent curr-tok))\n                           (- end (conll/tok-end c curr-sent curr-tok)))\n                    (recur curr-sent next-tok start end))))))&quot;, :offset 766, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [sent (dec (count c))\n      tok (dec (count (get c sent)))]\n  (conll/tok-start c sent tok))&quot;, :offset 96, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-tok\n  [k c doc-id ann-id]\n  (loop [curr-sent 0\n         curr-tok 0\n         start (knowtator/span-start k doc-id ann-id 0)\n         end (knowtator/span-end k doc-id ann-id 0)]\n    (let [tok-start (conll/tok-start c curr-sent curr-tok)\n          tok-end (conll/tok-end c curr-sent curr-tok)]\n      (cond (&lt;= tok-start start end tok-end) [curr-sent curr-tok]\n            (&lt; (count c) curr-sent) []\n            :else (let [next-tok (inc curr-tok)]\n                    (if (&lt; (count (get c curr-sent))\n                           next-tok)\n                      (recur (inc curr-sent)\n                             0\n                             (- start tok-start)\n                             (- end tok-end))\n                      (recur curr-sent next-tok start end)))))))&quot;, :offset 784, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(concept-tok k c doc 10)&quot;, :offset 24, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-tok\n  [k c doc-id ann-id]\n  (loop [curr-sent 0\n         curr-tok 0\n         start (knowtator/span-start k doc-id ann-id 0)\n         end (knowtator/span-end k doc-id ann-id 0)]\n    (let [tok-start (conll/tok-start c curr-sent curr-tok)\n          tok-end (conll/tok-end c curr-sent curr-tok)]\n      (cond (&lt;= tok-start start end tok-end) [curr-sent curr-tok]\n            (&lt; (count c) curr-sent) []\n            :else (let [next-tok (inc curr-tok)]\n                    (if (&lt; (count (get c curr-sent)) next-tok)\n                      (recur (inc curr-sent)\n                             0\n                             (- start tok-start)\n                             (- end tok-end))\n                      (recur curr-sent next-tok start end)))))))&quot;, :offset 757, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(concept-tok k c doc 0)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(concept-tok k c doc 1)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(concept-tok k c doc 2)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(concept-tok k c doc 6)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(concept-tok k c doc 7)&quot;, :offset 23, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-in c (concept-tok k c doc 6))&quot;, :offset 34, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn make-sentence\n  [c c1 sent1 tok1 c2 sent2 tok2]\n  (-&gt;Sentence sent1 c1 c2 (-&gt;&gt; (lazy-cat\n                                 (conll/walk-dep c sent1 tok1)\n                                 (conll/walk-dep c sent2 tok2))\n                               (distinct)\n                               #_(vector-context c sent1))))&quot;, :offset 324, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c context sent]\n  (-&gt;&gt; context\n       (map (fn [tok] (get-in c [sent tok :LEMMA])))\n       (map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 188, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c context sent]\n  (-&gt;&gt; context\n       (map (fn [tok] (get-in c [sent tok :LEMMA])))\n       #_(map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 190, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c context sent]\n  (-&gt;&gt; context\n       #_(map (fn [tok] (get-in c [sent tok :LEMMA])))\n       #_(map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 192, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c sent context]\n  (-&gt;&gt; context\n       #_(map (fn [tok] (get-in c [sent tok :LEMMA])))\n       #_(map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 192, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn make-sentence\n  [c c1 sent1 tok1 c2 sent2 tok2]\n  (-&gt;Sentence sent1 c1 c2 (-&gt;&gt; (lazy-cat\n                                 (conll/walk-dep c sent1 tok1)\n                                 (conll/walk-dep c sent2 tok2))\n                               (distinct)\n                               (vector-context c sent1))))&quot;, :offset 322, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c sent context]\n  (-&gt;&gt; context\n       (map (fn [tok] (get-in c [sent tok :LEMMA])))\n       #_(map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 190, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vector-context\n  [c sent context]\n  (-&gt;&gt; context\n       (map (fn [tok] (get-in c [sent tok :LEMMA])))\n       (map word2vec/get-word-vector)\n       #_(apply xpy)\n       #_(unit-vec)))&quot;, :offset 188, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(sort-by :idx (make-sentences k c 0))&quot;, :offset 37, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [edu.ucdenver.ccp.conll :as conll]\n            [edu.ucdenver.ccp.knowtator :as knowtator]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]))&quot;, :offset 303, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (sort-by :idx (make-sentences k c 0)))&quot;, :offset 76, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (word2vec/get-word-vector \&quot;the\&quot;)\n  #_(sort-by :idx (make-sentences k c 0)))&quot;, :offset 113, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [clojure.string :as s]\n            [taoensso.timbre :refer [set-level!]]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.core :refer [read-sources]]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :refer [count-seed-matches format-matches]]\n            [util :refer [cosine-sim]])\n  (:import (java.io File)))&quot;, :offset 574, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def word-vector-dir\n   #_ (io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n    (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;))&quot;, :offset 111, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn match-toks-to-reference\n  [reference c]\n  (first (reduce\n           (fn [[c start] [tok-idx tok]]\n             (let [form (form-to-string tok)\n                   end (+ start (count form))\n                   [start end] (find-span tok form start end reference)\n                   c (cond-&gt; c tok (update tok assoc :START start :END end))]\n               [c (inc end)]))\n           [c 0]\n           (map-indexed vector c))))&quot;, :offset 429, :ns &quot;edu.ucdenver.ccp.conll&quot;} {:command &quot;(defn read-sources\n  [articles annotations-dir articles-dir dependency-dir word2vec-db]\n  (let [annotations (-&gt;&gt; articles\n                         (map\n                           #(-&gt;&gt; (str % \&quot;.txt.knowtator.xml\&quot;)\n                                 (io/file annotations-dir)\n                                 (knowtator/read-knowtator)))\n                         (apply knowtator/merge-knowtator-projects))\n        references (-&gt;&gt; articles\n                        (map\n                          #(-&gt;&gt; (str % \&quot;.txt\&quot;)\n                                (io/file articles-dir)\n                                (slurp)))\n                        (into []))\n        dependency (word2vec/with-word2vec word2vec-db\n                     (-&gt;&gt; articles\n                          (map\n                            #(do\n                               (warn %2)\n                               (-&gt;&gt;\n                                 (str %2 \&quot;.dep\&quot;)\n                                 (io/file dependency-dir)\n                                 (conll/read-conll %1)\n                                 (map\n                                   (fn [toks]\n                                     (into [] (map\n                                                (fn [tok]\n                                                  (assoc tok :VEC (word2vec/get-word-vector (:LEMMA tok))))\n                                                toks))))\n                                 (into [])))\n                            references)\n                          (into [])))\n        sentences (doall (sentence/make-sentences annotations dependency))]\n    {:annotations annotations :references references :dependency dependency :sentences sentences}))&quot;, :offset 1694, :ns &quot;edu.ucdenver.ccp.nlp.core&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [clojure.string :as s]\n            [taoensso.timbre :refer [set-level!]]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.core :refer [read-sources extract-all-relations]]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :refer [count-seed-matches format-matches]]\n            [util :refer [cosine-sim]])\n  (:import (java.io File)))&quot;, :offset 596, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [c1 \&quot;SO_EXT:sequence_alteration_entity_or_process\&quot;\n                     c2 \&quot;SO_EXT:0000704\&quot;\n                     e1 (sentence/-&gt;Entity c1 nil nil nil nil)\n                     e2 (sentence/-&gt;Entity c2 nil nil nil nil)\n                     seed (sentence/-&gt;Sentence #{e1 e2} nil nil)\n                     seed-thresh 0.95\n                     cluster-thresh 0.75\n                     min-support (int (* 0.00001 (count (:sentences sources))))]\n                 #_(-&gt;&gt; (extract-relations (list seed)\n                                         (:sentences sources)\n                                         :cluster-thresh cluster-thresh\n                                         :seed-thresh seed-thresh\n                                         :min-support min-support)\n                      (map #(assoc % :seed seed)))\n                 (extract-all-relations seed-thresh cluster-thresh min-support)))&quot;, :offset 915, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [c1 \&quot;SO_EXT:sequence_alteration_entity_or_process\&quot;\n                     c2 \&quot;SO_EXT:0000704\&quot;\n                     e1 (sentence/-&gt;Entity c1 nil nil nil nil)\n                     e2 (sentence/-&gt;Entity c2 nil nil nil nil)\n                     seed (sentence/-&gt;Sentence #{e1 e2} nil nil)\n                     seed-thresh 0.95\n                     cluster-thresh 0.75\n                     min-support (int (* 0.00001 (count (:sentences sources))))]\n                 #_(-&gt;&gt; (extract-relations (list seed)\n                                         (:sentences sources)\n                                         :cluster-thresh cluster-thresh\n                                         :seed-thresh seed-thresh\n                                         :min-support min-support)\n                      (map #(assoc % :seed seed)))\n                 (extract-all-relations seed-thresh cluster-thresh min-support sources)))&quot;, :offset 923, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (:sentences sources))&quot;, :offset 28, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(* 0.00001 (count (:sentences sources)))&quot;, :offset 40, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn extract-all-relations\n  [seed-thresh cluster-thresh min-support sources]\n  (let [all-concepts (map\n                       #(sentence/-&gt;Entity % nil nil nil nil)\n                       (knowtator/all-concepts (:annotations sources)))]\n    (info \&quot;All concepts\&quot; (count all-concepts))\n    (-&gt;&gt; (combo/combinations all-concepts 2)\n         (map set)\n         (map #(sentence/-&gt;Sentence % nil nil))\n         (pmap\n           #(map\n              (fn [r]\n                (assoc r :seed %))\n              (extract-relations (list %) (:sentences sources)\n                                 :seed-thresh seed-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :max-iter 100)))\n         (apply lazy-cat))))&quot;, :offset 809, :ns &quot;edu.ucdenver.ccp.nlp.core&quot;} {:command &quot;(defn extract-all-relations\n  [seed-thresh cluster-thresh min-support sources]\n  (let [all-concepts (map\n                       #(sentence/-&gt;Entity % nil nil nil nil)\n                       (knowtator/all-concepts (:annotations sources)))]\n    (info \&quot;All concepts\&quot; (count all-concepts))\n    (-&gt;&gt; (combo/combinations all-concepts 2)\n         (map set)\n         (map #(sentence/-&gt;Sentence % nil nil))\n         (pmap\n           #(map\n              (fn [r]\n                (assoc r :seed %))\n              (extract-relations (list %) (:sentences sources)\n                                 :seed-thresh seed-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :max-iter 100)))\n         (mapcat identity))))&quot;, :offset 810, :ns &quot;edu.ucdenver.ccp.nlp.core&quot;} {:command &quot;(defn extract-all-relations\n  [seed-thresh cluster-thresh min-support sources]\n  (let [all-concepts (map\n                       #(sentence/-&gt;Entity % nil nil nil nil)\n                       (knowtator/all-concepts (:annotations sources)))]\n    (info \&quot;All concepts\&quot; (count all-concepts))\n    (-&gt;&gt; (combo/combinations all-concepts 2)\n         (pmap set)\n         (pmap #(sentence/-&gt;Sentence % nil nil))\n         (pmap\n           #(map\n              (fn [r]\n                (assoc r :seed %))\n              (extract-relations (list %) (:sentences sources)\n                                 :seed-thresh seed-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :max-iter 100)))\n         (mapcat identity))))&quot;, :offset 812, :ns &quot;edu.ucdenver.ccp.nlp.core&quot;} {:command &quot;(def matches (let [c1 \&quot;SO_EXT:sequence_alteration_entity_or_process\&quot;\n                     c2 \&quot;SO_EXT:0000704\&quot;\n                     e1 (sentence/-&gt;Entity c1 nil nil nil nil)\n                     e2 (sentence/-&gt;Entity c2 nil nil nil nil)\n                     seed (sentence/-&gt;Sentence #{e1 e2} nil nil)\n                     seed-thresh 0.95\n                     cluster-thresh 0.75\n                     min-support 15 #_(int (* 0.00001 (count (:sentences sources))))]\n                 #_(-&gt;&gt; (extract-relations (list seed)\n                                         (:sentences sources)\n                                         :cluster-thresh cluster-thresh\n                                         :seed-thresh seed-thresh\n                                         :min-support min-support)\n                      (map #(assoc % :seed seed)))\n                 (extract-all-relations seed-thresh cluster-thresh min-support sources)))&quot;, :offset 928, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count matches)&quot;, :offset 15, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(taoensso.nippy/freeze-to-file (io/file word-vector-dir \&quot;matches.bin\&quot;) matches)&quot;, :offset 79, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(set-level! :info)&quot;, :offset 18, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def craft-dir\n    #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;craft-3.0\&quot;)\n    (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;craft-3.0\&quot;))&quot;, :offset 100, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word-vector-dir\n   #_(io/file \&quot;E:\&quot; \&quot;data\&quot; \&quot;WordVectors\&quot;)\n    (io/file \&quot;/home\&quot; \&quot;harrison\&quot; \&quot;word-vectors\&quot;))&quot;, :offset 110, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 89, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations-dir (io/file craft-dir \&quot;ontology-concepts\&quot; \&quot;all\&quot; \&quot;all+extensions\&quot; \&quot;knowtator-2\&quot; \&quot;Annotations\&quot;))&quot;, :offset 112, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def dependency-dir (io/file craft-dir \&quot;dependency\&quot;))&quot;, :offset 53, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def articles-dir (io/file craft-dir \&quot;articles\&quot; \&quot;txt\&quot;))&quot;, :offset 55, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def articles [\&quot;11532192\&quot;])&quot;, :offset 27, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def articles (-&gt;&gt; (file-seq articles-dir)\n                       (filter #(.isFile ^File %))\n                       (map #(.getName %))\n                       (filter #(s/ends-with? % \&quot;.txt\&quot;))\n                       (map #(s/replace % #\&quot;\\.txt\&quot; \&quot;\&quot;))))&quot;, :offset 251, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sources (read-sources articles annotations-dir articles-dir dependency-dir word2vec-db))&quot;, :offset 93, :ns &quot;scripts.relation-extraction-script&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for relation-extraction">
    <configuration name="REPL for relation-extraction" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="relation-extraction" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="relation-extraction" />
      <setting name="host" value="localhost" />
      <setting name="port" value="41427" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.REPL for relation-extraction" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for relation-extraction" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1616" height="916" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" type="SLIDING" weight="0.2596401" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32950193" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.49957448" weight="0.32950193" />
      <window_info anchor="bottom" id="Debug" order="3" visible="true" weight="0.45210728" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Docker" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Run with VisualVM" order="8" />
      <window_info anchor="bottom" id="Version Control" order="9" weight="0.32950193" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="10" />
      <window_info anchor="bottom" id="Database Changes" order="11" show_stripe_button="false" />
      <window_info anchor="bottom" id="Terminal" order="12" />
      <window_info anchor="bottom" id="Event Log" order="13" sideWeight="0.5004255" side_tool="true" weight="0.32950193" />
      <window_info anchor="bottom" id="CheckStyle" order="14" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="15" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info active="true" anchor="right" x="1600" y="437" width="1360" height="745" id="REPL" maximized="true" order="4" sideWeight="0.5095785" side_tool="true" type="WINDOWED" visible="true" weight="0.24485861" />
      <window_info anchor="right" id="Maven" order="5" />
      <window_info anchor="right" id="Leiningen" order="6" sideWeight="0.49042144" weight="0.24485861" />
      <window_info anchor="right" id="Palette&#9;" order="7" />
      <window_info anchor="right" id="Database" order="8" weight="0.32969153" />
      <window_info anchor="right" id="Google Cloud Storage" order="9" weight="0.32969153" />
      <window_info anchor="right" id="SciView" order="10" weight="0.21915168" />
      <window_info anchor="right" x="0" y="0" width="354" height="716" id="Documentation" order="11" side_tool="true" weight="0.33354756" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Added word2vec loading" />
    <MESSAGE value="Refactoring" />
    <MESSAGE value="Commented code" />
    <MESSAGE value="Added cluster profile" />
    <MESSAGE value="Conll determines absolute token start and ends" />
    <MESSAGE value="Combine concepts into sentences with dep path" />
    <MESSAGE value="Convert dep context to vector" />
    <MESSAGE value="Fixed how context vectors are made" />
    <MESSAGE value="Fixes to extracting relations" />
    <MESSAGE value="Using Entity object to store info about concept origin" />
    <MESSAGE value="Added ability to extract all relations for all pairs of concepts" />
    <MESSAGE value="Added clustering" />
    <MESSAGE value="Use patterns in clustering" />
    <MESSAGE value="Refactor sentences and evaluation fns out of relation-extraction" />
    <MESSAGE value="Using protocols for patterns and sentences" />
    <MESSAGE value="Entities keep track of their own context" />
    <MESSAGE value="Simplified matching annotations to tokens" />
    <MESSAGE value="Simplified reading of conll" />
    <MESSAGE value="Many fixes" />
    <MESSAGE value="Minor fixes" />
    <MESSAGE value="Added parameter walk function" />
    <MESSAGE value="Reformatting" />
    <MESSAGE value="Parallel maps" />
    <MESSAGE value="Output to csv" />
    <MESSAGE value="Modified sentence context vector to only use the vectors for tokens in the path between the dependencies of the entities" />
    <option name="LAST_COMMIT_MESSAGE" value="Modified sentence context vector to only use the vectors for tokens in the path between the dependencies of the entities" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <breakpoint type="java-exception">
          <properties class="java.lang.NullPointerException" package="java.lang" />
          <option name="timeStamp" value="17" />
        </breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>&quot;:id&quot; -&gt;&quot;CRAFT_aggregate_ontology_Instance_21811&quot;</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq dec-c1)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get-in ann [:spans 0 :start])</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq (:spans ann))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq new-matches)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(list seed)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>s</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(set vectors)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(clojure.set/difference (set dep2) (set dep1))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(clojure.set/difference (set dep1) (set dep2))
(set dep1)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(nil? vec)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? vectors)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= doc 66)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(&lt; 2 (count vecs))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= 569 ann)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(some nil? [concept-start concept-end tok-start tok-end])</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= sent 124)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= sent 12)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= curr-sent 8)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="watch">
      <expression>
        <expression-string>(seq seed-matches)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq (map :ID dep2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq (map :ID dep1))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(set patterns)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(set (map :concept (:entities sentence)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(set (map :concept (:entities pattern)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="25">
          <caret line="1" column="12" selection-start-line="1" selection-start-column="12" selection-end-line="1" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/11.0.1/javafx-graphics-11.0.1-win.jar!/com/sun/glass/ui/win/WinApplication.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="157">
          <caret line="95" column="24" selection-start-line="95" selection-start-column="24" selection-end-line="95" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.1/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java" />
    <entry file="jar://C:/Program Files/Java/jdk-11.0.1/lib/src.zip!/java.base/java/io/RandomAccessFile.java" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/mapdb/mapdb/3.0.7/mapdb-3.0.7.jar!/org/mapdb/HTreeMap.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="25">
          <caret line="833" selection-start-line="833" selection-end-line="833" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/openjfx/javafx-graphics/11.0.1/javafx-graphics-11.0.1-win.jar!/javafx/scene/PropertyHelper.class">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <folding>
            <element signature="e#0#466#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.lein/profiles.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="39">
          <caret line="3" column="63" selection-start-line="3" selection-start-column="63" selection-end-line="3" selection-end-column="63" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal-native/0.21.0/neanderthal-native-0.21.0.jar!/uncomplicate/neanderthal/internal/host/CBLAS.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="218">
          <caret line="76" column="30" selection-start-line="76" selection-start-column="30" selection-end-line="76" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.21.0/neanderthal-0.21.0.jar!/uncomplicate/neanderthal/native.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="191">
          <caret line="51" column="6" selection-start-line="51" selection-start-column="6" selection-end-line="51" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/breds.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="524">
          <caret line="87" column="9" selection-start-line="87" selection-start-column="9" selection-end-line="87" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/GoogleCloudHelper.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="175">
          <caret line="9" column="32" selection-start-line="9" selection-start-column="32" selection-end-line="9" selection-end-column="32" />
          <folding>
            <element signature="imports" expanded="true" />
            <element signature="e#1174#1231#1" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="483">
          <caret line="49" column="6" selection-start-line="49" selection-start-column="6" selection-end-line="49" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="25">
          <caret line="1" column="28" selection-start-line="1" selection-start-column="28" selection-end-line="1" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/ISeq.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="7" column="45" selection-start-line="7" selection-start-column="45" selection-end-line="7" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/Util.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="357">
          <caret line="116" column="47" lean-forward="true" selection-start-line="116" selection-start-column="47" selection-end-line="116" selection-end-column="47" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/PersistentList.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="147">
          <caret line="69" column="36" selection-start-line="69" selection-start-column="36" selection-end-line="69" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/IPersistentCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="7" column="17" selection-start-line="7" selection-start-column="17" selection-end-line="7" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/Seqable.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="7" column="17" selection-start-line="7" selection-start-column="17" selection-end-line="7" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.21.0/neanderthal-0.21.0.jar!/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="130">
          <caret line="890" selection-start-line="890" selection-end-line="890" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="120">
          <caret line="874" column="56" selection-start-line="874" selection-start-column="51" selection-end-line="874" selection-end-column="56" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="280">
          <caret line="49" column="4" selection-start-line="49" selection-start-column="4" selection-end-line="49" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.1/lib/src.zip!/java.desktop/sun/awt/windows/WToolkit.java" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/lang/RT.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="240">
          <caret line="500" selection-start-line="500" selection-end-line="500" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/matches.csv">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="429">
          <caret line="13" column="25" selection-start-line="13" selection-start-column="25" selection-end-line="13" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core_deftype.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="582" selection-start-line="582" selection-end-line="582" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="50" column="4" selection-start-line="50" selection-start-column="4" selection-end-line="50" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../knowtator/src/main/java/edu/ucdenver/ccp/knowtator/KnowtatorStandalone.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="56" column="30" selection-start-line="56" selection-start-column="30" selection-end-line="56" selection-end-column="30" />
          <folding>
            <element signature="imports" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/KnowtatorStandalone.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="23" column="6" selection-start-line="23" selection-start-column="6" selection-end-line="23" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jrt://C:/Program Files/Java/jdk-11.0.2!/java.base/jdk/internal/reflect/Reflection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="234">
          <caret line="231" selection-start-line="231" selection-end-line="231" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/try_knowtator.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/collection/ListenableCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-54">
          <caret line="42" column="23" selection-start-line="42" selection-start-column="23" selection-end-line="42" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="175">
          <caret line="233" column="33" lean-forward="true" selection-start-line="233" selection-start-column="33" selection-end-line="233" selection-end-column="33" />
          <folding>
            <element signature="e#10090#10091#0" expanded="true" />
            <element signature="e#10144#10145#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="23" column="37" selection-start-line="23" selection-start-column="37" selection-end-line="23" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="264">
          <caret line="55" column="27" lean-forward="true" selection-start-line="55" selection-start-column="27" selection-end-line="55" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/OWLOntologyManager.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-5778">
          <caret line="21" column="17" selection-start-line="21" selection-start-column="17" selection-end-line="21" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.4.3.517/org.semanticweb.hermit-1.4.3.517.jar!/org/semanticweb/HermiT/ReasonerFactory.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="130">
          <caret line="12" column="13" selection-start-line="12" selection-start-column="13" selection-end-line="12" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="434">
          <caret line="44" column="18" selection-start-line="44" selection-start-column="18" selection-end-line="44" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/reasoner/OWLReasoner.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="134">
          <caret line="73" column="40" lean-forward="true" selection-start-line="73" selection-start-column="40" selection-end-line="73" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../nrepl-rebl/src/nrepl_rebl/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="360">
          <caret line="36" column="3" selection-start-line="36" selection-start-column="3" selection-end-line="36" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://E:/data/BioCreative/BCVI-2017/PMtask_Relations_TrainingSet.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2880" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="231">
          <caret line="7" column="6" selection-start-line="7" selection-start-column="6" selection-end-line="7" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="183">
          <caret line="25" column="23" selection-start-line="25" selection-start-column="23" selection-end-line="25" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="14" column="47" selection-start-line="14" selection-start-column="47" selection-end-line="14" selection-end-column="47" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="282">
          <caret line="25" column="11" lean-forward="true" selection-start-line="25" selection-start-column="11" selection-end-line="25" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.3.8.413/org.semanticweb.hermit-1.3.8.413.jar!/org/semanticweb/HermiT/tableau/ClashManager.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="58">
          <caret line="111" selection-start-line="111" selection-end-line="111" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="33">
          <caret line="2293" column="23" selection-start-line="2293" selection-start-column="23" selection-end-line="2293" selection-end-column="23" />
          <folding>
            <element signature="e#89922#89923#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="235">
          <caret line="52" column="7" lean-forward="true" selection-start-line="52" selection-start-column="7" selection-end-line="52" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="35">
          <caret line="39" column="22" lean-forward="true" selection-start-line="39" selection-start-column="22" selection-end-line="39" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="158">
          <caret line="38" column="18" lean-forward="true" selection-start-line="38" selection-start-column="18" selection-end-line="38" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="297">
          <caret line="53" column="42" selection-start-line="53" selection-start-column="42" selection-end-line="53" selection-end-column="42" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>d3.v4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>11</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>relation-extraction</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>11</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.5</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>