<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="Different output format">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/PITCHME.md" beforeDir="false" afterPath="$PROJECT_DIR$/PITCHME.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/resources/algorithm.svgz" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/examples.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/examples.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4673970098000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="2282379144" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/PITCHME.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
            <state split_layout="SPLIT">
              <first_editor relative-caret-position="550">
                <caret line="31" column="9" lean-forward="true" selection-start-line="31" selection-start-column="9" selection-end-line="31" selection-end-column="9" />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="274">
              <caret line="26" column="28" selection-start-line="26" selection-start-column="28" selection-end-line="26" selection-end-column="28" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
      <find>loading</find>
      <find>log</find>
      <find>2340</find>
      <find>23402364-T37</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1679" />
    <option name="y" value="82" />
    <option name="width" value="1602" />
    <option name="height" value="894" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="Clojure.Resolution" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1559698187880">{:repl-history {:ide [], :local [{:command &quot;(def references-dir (io/file training-dir \&quot;Articles\&quot;))&quot;, :offset 54, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def articles\n  (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def references (rdr/read-references articles references-dir))&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def dependency-dir (io/file training-dir \&quot;chemprot_training_sentences\&quot;))&quot;, :offset 73, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def dependency (rdr/read-dependency word2vec-db articles references dependency-dir :ext \&quot;conll\&quot; :tok-key :FORM))&quot;, :offset 113, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 406, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (map\n           (fn [[sent-idx sent]]\n             (let [graph-space (GraphSpace. text-source (str \&quot;Sentence %d\&quot; sent-idx))]\n               (.add (.getStructureGraphSpaces text-source) graph-space)\n               (let [nodes (mapv\n                             (fn [tok]\n                               (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                     span (Span. ann nil (:START tok) (:END tok))\n                                     ann-node (AnnotationNode ann 20 20 graph-space)]\n                                 (.add ann span)\n                                 (.add (.getStructureAnnotations text-source) ann)\n                                 (.addCellToGraph graph-space ann-node)\n                                 [ann-node tok]))\n                             sent)]\n                 (map\n                   (fn [[source tok]]\n                     (let [target-idx (dec (:HEAD tok))]\n                       (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                     property nil]\n                                                 (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                             property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                             (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw \&quot;Excluding root\&quot;)\n                             :else nil)))\n                   nodes))))\n           (map-indexed vector doc))))\n     dependency))\n  nil)&quot;, :offset 1697, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (map\n           (fn [[sent-idx sent]]\n             (let [graph-space (GraphSpace. text-source (str \&quot;Sentence %d\&quot; sent-idx))]\n               (.add (.getStructureGraphSpaces text-source) graph-space)\n               (let [nodes (mapv\n                             (fn [tok]\n                               (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                     span (Span. ann nil (:START tok) (:END tok))\n                                     ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                 (.add ann span)\n                                 (.add (.getStructureAnnotations text-source) ann)\n                                 (.addCellToGraph graph-space ann-node)\n                                 [ann-node tok]))\n                             sent)]\n                 (map\n                   (fn [[source tok]]\n                     (let [target-idx (dec (:HEAD tok))]\n                       (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                     property nil]\n                                                 (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                             property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                             (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw \&quot;Excluding root\&quot;)\n                             :else nil)))\n                   nodes))))\n           (map-indexed vector doc))))\n     dependency))\n  nil)&quot;, :offset 1702, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence %d\&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (dec (:HEAD tok))]\n                         (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw \&quot;Excluding root\&quot;)\n                               :else nil)))\n                     nodes)))))\n            (map-indexed vector doc)))))\n     dependency))\n  nil)&quot;, :offset 1782, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (first dependency))&quot;, :offset 7, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (first dependency))&quot;, :offset 7, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (second (first dependency)))&quot;, :offset 7, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (dec (:HEAD tok))]\n                         (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw \&quot;Excluding root\&quot;)\n                               :else nil)))\n                     nodes)))))\n            (map-indexed vector doc)))))\n     dependency))\n  nil)&quot;, :offset 1780, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (dec (:HEAD tok))]\n                         (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw \&quot;Excluding root\&quot;)\n                               :else nil)))\n                     nodes)))))\n            (group-by :SENT doc)))))\n     dependency))\n  nil)&quot;, :offset 1776, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (dec (:HEAD tok))]\n                         (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw (Throwable. \&quot;Excluding root\&quot;))\n                               :else nil)))\n                     nodes)))))\n            (group-by :SENT doc)))))\n     dependency))\n  nil)&quot;, :offset 1789, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (:HEAD tok)]\n                         (cond (&lt;= 0 target-idx) (let [target (get sent target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw (Throwable. \&quot;Excluding root\&quot;))\n                               :else nil)))\n                     nodes)))))\n            (group-by :SENT doc)))))\n     dependency))\n  nil)&quot;, :offset 1783, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (:HEAD tok)]\n                         (cond (&lt;= 0 target-idx) (let [target (get nodes target-idx)\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw (Throwable. \&quot;Excluding root\&quot;))\n                               :else nil)))\n                     nodes)))))\n            (group-by :SENT doc)))))\n     dependency))\n  nil)&quot;, :offset 1784, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(do\n  (doall\n    (map\n     (fn [[doc-id doc]]\n       (let [text-source ^TextSource (.get (.get (.getTextSources model) doc-id))]\n         (doall\n           (map\n            (fn [[sent-idx sent]]\n              (let [graph-space (GraphSpace. text-source (str \&quot;Sentence \&quot; sent-idx))]\n                (.add (.getStructureGraphSpaces text-source) graph-space)\n                (let [nodes (mapv\n                              (fn [tok]\n                                (let [ann (ConceptAnnotation. text-source nil nil (.getDefaultProfile model) (:DEPREL tok) \&quot;\&quot;)\n                                      span (Span. ann nil (:START tok) (:END tok))\n                                      ann-node (AnnotationNode. nil ann 20 20 graph-space)]\n                                  (.add ann span)\n                                  (.add (.getStructureAnnotations text-source) ann)\n                                  (.addCellToGraph graph-space ann-node)\n                                  [ann-node tok]))\n                              sent)]\n                  (doall\n                    (map\n                     (fn [[source tok]]\n                       (let [target-idx (:HEAD tok)]\n                         (cond (&lt;= 0 target-idx) (let [target (first (get nodes target-idx))\n                                                       property nil]\n                                                   (.addTriple graph-space source target nil (.getDefaultProfile model)\n                                                               property Quantifier/some \&quot;\&quot;, false, \&quot;\&quot;))\n                               (not (= \&quot;ROOT\&quot; (:DEPREL tok))) (throw (Throwable. \&quot;Excluding root\&quot;))\n                               :else nil)))\n                     nodes)))))\n            (group-by :SENT doc)))))\n     dependency))\n  nil)&quot;, :offset 1792, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save model)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations model)&quot;, :offset 23, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 501, :ns &quot;user&quot;} {:command &quot;(def model (k/simple-model annotations))\n\n(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1408, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (group-by :doc (:concept-annotations model)))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :doc (:concept-annotations model))))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(type (:concept-annotations model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (:concept-annotations model))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (vals (:concept-annotations model)))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(set (map :doc (vals (:concept-annotations model))))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations model))&quot;, :offset 6, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/display annotations)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))}))&quot;, :offset 2316, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(count (:concept-annotations model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1366, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences (sentence/concept-annotations-&gt;sentences model))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first sentences)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.removeModelListener annotations text-source)\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property)\n             (.addModelListener annotations text-source))))))&quot;, :offset 1885, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(rdr/biocreative-read-relations (.get (.getModel annotations)) relations-file)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))\n\n(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n(rdr/biocreative-read-relations (k/model annotations) relations-file)&quot;, :offset 1084, :ns &quot;user&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (:concept-graphs model))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save (k/model annotations))&quot;, :offset 29, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 466, :ns &quot;user&quot;} {:command &quot;(def structures-annotations-with-embeddings (word2vec/with-word2vec word2vec-db\n                                              (sentence/structures-annotations-with-embeddings model)))&quot;, :offset 183, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model))\n\n(def model (assoc model\n             :concept-annotations concept-annotations-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n(def sentences (sentence/concept-annotations-&gt;sentences model))\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 359, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;}], :remote [{:command &quot;(def matches (let [property \&quot;INHIBITOR\&quot;\n\n                   sentences (filter #(&lt;= (count (:context %)) 2) sentences)\n                   actual-true (set (-&gt;&gt; property\n                                         (k/edges-for-property model)\n                                         (map evaluation/edge-&gt;triple)\n                                         (filter (fn [t] (some #(= t (:entities %)) sentences)))))\n                   all-triples (set (map evaluation/sent-&gt;triple sentences))\n\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first actual-true))\n                           (apply evaluation/make-seeds sentences (second actual-true)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            all-triples}))\n               matches))&quot;, :offset 2138, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities \n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    #_(map (comp :text first vals :spans :tok)))\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1441, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities \n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1434, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concepts)\n                         (map str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1434, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get-in match [:seed])\n                         (map :concepts)\n                         (map str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1424, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (map str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1413, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (mapcat str)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1416, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (lazy-cat)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1414, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (cat)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1409, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (apply cat)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1415, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (apply lazy-cat)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1420, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (mapcat identity)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1421, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/format-matches model matches)&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first actual-true))\n                           (apply evaluation/make-seeds sentences (second actual-true)))&quot;, :offset 194, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (assoc model :sentences sentences))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count (:sentences model)))&quot;, :offset 54, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def dep-filt 2)&quot;, :offset 16, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn context-filt\n  [dep-filt coll]\n  (filter #(&lt;= (count (:context %)) dep-filt) coll))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property dep-filt]\n  (set (-&gt;&gt; property\n            (k/edges-for-property model)\n            (map evaluation/edge-&gt;triple)\n            (filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 (context-filt dep-filt)\n                                 (map :entities)\n                                 (some #(= t %))))))))&quot;, :offset 393, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn all-triples\n  [model]\n  (-&gt;&gt; model \n       :sentences \n       (context-filt dep-filt) \n       (map evaluation/sent-&gt;triple) \n       (set)))&quot;, :offset 145, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property dep-filt)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds (:sentences model) (first actual-true))\n                           (apply evaluation/make-seeds (:sentences model) (second actual-true)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds (:sentences model) params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1756, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn edges-for-property\n  [graphs property]\n  (-&gt;&gt; graphs\n       (mapcat #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 148, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn actual-true\n  [model property dep-filt]\n  (set (-&gt;&gt; property\n            (k/edges-for-property (vals (:concept-graphs model)))\n            (map evaluation/edge-&gt;triple)\n            (filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 (context-filt dep-filt)\n                                 (map :entities)\n                                 (some #(= t %))))))))&quot;, :offset 418, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property dep-filt]\n  (set (-&gt;&gt; property\n            (k/edges-for-property (vals (:concept-graphs model)))\n            (map evaluation/edge-&gt;triple)\n            (filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 #_(context-filt dep-filt)\n                                 (map :entities)\n                                 (some #(= t %))))))))&quot;, :offset 420, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(actual-true model property dep-filt)&quot;, :offset 37, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;r&quot;, :offset 1, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property]\n  (set (-&gt;&gt; property\n            (k/edges-for-property (vals (:concept-graphs model)))\n            (map evaluation/edge-&gt;triple)\n            (filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 (map :entities)\n                                 (some #(= t %))))))))&quot;, :offset 352, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (k/edges-for-property (vals (:concept-graphs model)) property))&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/edge-&gt;triple (first (k/edges-for-property (vals (:concept-graphs model)) property)))&quot;, :offset 96, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property]\n  (set (-&gt;&gt; property\n            (k/edges-for-property (vals (:concept-graphs model)))\n            (map evaluation/edge-&gt;triple)\n            #_(filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 (map :entities)\n                                 (some #(= t %))))))))&quot;, :offset 354, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property]\n  (set (-&gt;&gt; property\n            (k/edges-for-property (vals (:concept-graphs model)))\n            (map evaluation/edge-&gt;triple)\n            (filter (fn [t] (-&gt;&gt; model\n                                 :sentences\n                                 (some #(= t (:entities %)))))))))&quot;, :offset 315, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (actual-true model property))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (k/edges-for-property (vals (:concept-graphs model)) property))&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(clojure.set/difference \n  (set (map evaluation/edge-&gt;triple (k/edges-for-property (vals (:concept-graphs model)) property)))\n  (actual-true model property))&quot;, :offset 157, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/edges-for-property (vals (:concept-graphs model)) property)&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(actual-true model property)&quot;, :offset 28, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :entities (:sentences model))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;23402364-T37\&quot;])&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;23402364-T1\&quot;])&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;23402364-T3\&quot;])&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;23402364-T2\&quot;])&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model1))&quot;, :offset 83, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get concept-annotations-with-toks \&quot;23402364-T2\&quot;)&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn actual-true\n  [model property]\n  (-&gt;&gt; property\n       (k/edges-for-property (vals (:concept-graphs model)))\n       (map evaluation/edge-&gt;triple)\n       #_(filter (fn [t] (-&gt;&gt; model\n                            :sentences\n                            (some #(= t (:entities %))))))\n       (set)))&quot;, :offset 299, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(clojure.set/difference\n  (set (map evaluation/edge-&gt;triple (k/edges-for-property (vals (:concept-graphs model)) property)))\n  (actual-true model property))&quot;, :offset 156, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn all-triples\n  [model]\n  (-&gt;&gt; model\n       :sentences\n       (map evaluation/sent-&gt;triple)\n       (set)))&quot;, :offset 110, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds (:sentences model) (first actual-true))\n                           (apply evaluation/make-seeds (:sentences model) (second actual-true)))\n                   sentences (context-filt dep-filt (:sentences model))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1810, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds (:sentences model) (first actual-true))\n                           (apply evaluation/make-seeds (:sentences model) (second actual-true)))\n                   sentences (context-filt dep-filt (:sentences model))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1809, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds (:sentences model) (first actual-true))\n                           (apply evaluation/make-seeds (:sentences model) (second actual-true)))\n                   sentences (context-filt dep-filt (:sentences model))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1809, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   \n                   sentences (context-filt dep-filt (:sentences model))\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first actual-true))\n                           (apply evaluation/make-seeds sentences (second actual-true)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1811, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   \n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (first (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true))\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1930, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   \n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1922, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   \n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.95\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1923, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn potential-seeds\n  [sentences actual-true]\n  (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.95\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1875, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.85\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1875, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.8\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1874, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [sentences potential-seeds n]\n  (let [seed-c (map #(apply evaluation/make-seeds sentences %) potential-seeds)]\n    (apply clojure.set/union (take n seed-c))))&quot;, :offset 181, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (make-all-seeds sentences potential-seeds 2) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.8\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1921, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (make-all-seeds sentences potential-seeds 3) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.8\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1921, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (make-all-seeds sentences potential-seeds 10) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.8\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1922, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (make-all-seeds sentences potential-seeds 10) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1922, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [actual-true (actual-true model property)\n                   sentences (context-filt dep-filt (:sentences model))\n                   potential-seeds (potential-seeds sentences actual-true)\n                   seeds (make-all-seeds sentences potential-seeds 500) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    actual-true\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1923, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds sentences potential-seeds 500))&quot;, :offset 54, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [model property sentences n]\n  (apply clojure.set/union (-&gt;&gt; (actual-true model property)\n                                (potential-seeds sentences) \n                                (map #(apply evaluation/make-seeds sentences %)) \n                                (take n))))&quot;, :offset 299, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (count (make-all-seeds model property sentences 500)) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1812, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 500) #_(clojure.set/union\n                           (apply evaluation/make-seeds sentences (first potential-seeds))\n                           (apply evaluation/make-seeds sentences (second potential-seeds)))\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1804, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(make-all-seeds model property (context-filt dep-filt (:sentences model)) 500)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [model property sentences n]\n  (-&gt;&gt; (actual-true model property)\n       (potential-seeds sentences)\n       (map #(apply evaluation/make-seeds sentences %))\n       (take n)\n       #_(apply clojure.set/union)))&quot;, :offset 231, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt dep-filt (:sentences model)) 500))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(make-all-seeds model property (context-filt dep-filt (:sentences model)) 100)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (context-filt dep-filt (:sentences model)))&quot;, :offset 50, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [model property sentences n]\n  (-&gt;&gt; (actual-true model property)\n       #_(potential-seeds sentences)\n       #_(map #(apply evaluation/make-seeds sentences %))\n       #_(take n)\n       #_(apply clojure.set/union)))&quot;, :offset 237, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [model property sentences n]\n  (-&gt;&gt; (actual-true model property)\n       (potential-seeds sentences)\n       #_(map #(apply evaluation/make-seeds sentences %))\n       #_(take n)\n       #_(apply clojure.set/union)))&quot;, :offset 235, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(filter #(=   #{\&quot;7944828-T6\&quot; \&quot;7944828-T36\&quot;} (:entities)) (context-filt dep-filt (:sentences model)))&quot;, :offset 100, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(filter #(=   #{\&quot;7944828-T6\&quot; \&quot;7944828-T36\&quot;} (:entities %)) (context-filt dep-filt (:sentences model)))&quot;, :offset 102, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;7944828-T6\&quot;])&quot;, :offset 50, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in model [:concept-annotations \&quot;7944828-T36\&quot;])&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(filter #(=   #{\&quot;7944828-T6\&quot; \&quot;7944828-T36\&quot;} (:entities %)) (:sentences model))&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt dep-filt (:sentences model)) 100))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt 3  (:sentences model)) 100))&quot;, :offset 80, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt 5 (:sentences model)) 100))&quot;, :offset 79, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt 10 (:sentences model)) 100))&quot;, :offset 80, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (actual-true model property))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (context-filt 14 (:sentences model)) 100))&quot;, :offset 80, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (make-all-seeds model property (:sentences model) 100))&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(reduce max (-&gt;&gt; (make-all-seeds model property (:sentences model) 100) \n             (map :context)\n             (map count)))&quot;, :offset 127, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-all-seeds\n  [model property sentences n]\n  (-&gt;&gt; (actual-true model property)\n       (potential-seeds sentences)\n       (map #(apply evaluation/make-seeds sentences %))\n       (take n)\n       (apply clojure.set/union)))&quot;, :offset 229, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (make-all-seeds model property (:sentences model) 100))&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(reduce max (-&gt;&gt; (make-all-seeds model property (:sentences model) 100)\n                 (map :context)\n                 (map count)))&quot;, :offset 134, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(filter #(= 35 (count (:context %))) (make-all-seeds model property (:sentences model) 100))&quot;, :offset 92, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def dep-filt 10)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 500)\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 1\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1599, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 10)\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 10\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1599, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 100)\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.7\n                   min-support 10\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1600, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 100)\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1600, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [sentences (context-filt dep-filt (:sentences model))\n                   seeds (make-all-seeds model property sentences 100)\n                   ;seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 10\n                   params {:seed             (first seeds)\n                           ;:seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           ;:seed-match-fn    #(and (re/concepts-match? %1 %2)\n                           ;                        (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (actual-true model property)\n                                                        :all            (all-triples model)}))\n               matches))&quot;, :offset 1601, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (cluster-tools/single-pass-cluster (:sentences model) #{}\n                                          {:cluster-merge-fn re/add-to-pattern\n                                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                (and (&lt; (or %3 0.75) score)\n                                                                     score))}))&quot;, :offset 427, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for Dep2Rel">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.25335777" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32805908" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.33026317" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" weight="0.26476794" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21553884" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" weight="0.28429204" />
      <window_info anchor="bottom" id="Messages" order="17" visible="true" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2014652" />
      <window_info anchor="right" x="3700" y="734" width="580" height="336" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4382622" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Read relations from biocreative" />
    <MESSAGE value="Moved sentence building functions to sentence. Append doc id to relation source and target ids" />
    <MESSAGE value="Minor changes" />
    <MESSAGE value="Added knowtator as explicit jar" />
    <MESSAGE value="Updated to 1.10.1-beta2" />
    <MESSAGE value="Updated knowtator jar" />
    <MESSAGE value="Biocreative sentences can be read in." />
    <MESSAGE value="Read property ID as String." />
    <MESSAGE value="No need to worry  about adding doc id to everything." />
    <MESSAGE value="Updated Knowtator jar" />
    <MESSAGE value="Minor changes." />
    <MESSAGE value="removed seed similarity calculation" />
    <MESSAGE value="added depstar alias for uberjarring" />
    <MESSAGE value="Got incanter working" />
    <MESSAGE value="Transferred script to notebook" />
    <MESSAGE value="Made functions for calculating seeds and actual-true" />
    <MESSAGE value="Made images showing algorithm" />
    <MESSAGE value="Added colors to algorithm diagram" />
    <MESSAGE value="Started NLM presentation" />
    <MESSAGE value="removed presentation" />
    <MESSAGE value="Added presentation" />
    <MESSAGE value="Made background transparent" />
    <MESSAGE value="Edits" />
    <MESSAGE value="Updated dep example" />
    <MESSAGE value="Different output format" />
    <option name="LAST_COMMIT_MESSAGE" value="Different output format" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="561" column="53" lean-forward="true" selection-start-line="561" selection-start-column="53" selection-end-line="561" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj" />
    <entry file="file://$PROJECT_DIR$/src/util.clj" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/SocketInputStream.java" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/PlainSocketImpl.java" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/util.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/OWLNamedObject.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/HasIRI.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="244">
          <caret line="136" selection-start-line="136" selection-end-line="136" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/math.clj" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
    <entry file="file://$USER_HOME$/.clojure/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="302">
          <caret line="35" column="15" lean-forward="true" selection-start-line="35" selection-start-column="15" selection-end-line="35" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.boot/profile.boot" />
    <entry file="file://$PROJECT_DIR$/replay_pid6356.log" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/17b59d2ae8bb15cf21b8ccb4c4a605fc5b18871f/src/math.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/github/vlsi/mxgraph/jgraphx/3.9.8.1/jgraphx-3.9.8.1.jar!/com/mxgraph/view/mxGraph.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/TextSource.class" />
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2244">
          <caret line="102" column="11" selection-start-line="102" selection-start-column="2" selection-end-line="127" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/knowtator/KnowtatorXmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="242" column="68" selection-start-line="242" selection-start-column="68" selection-end-line="242" selection-end-column="68" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/collection/GraphSpaceCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="166">
          <caret line="46" selection-start-line="46" selection-end-line="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="279">
          <caret line="787" column="46" selection-start-line="787" selection-start-column="46" selection-end-line="787" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="28" column="11" selection-start-line="28" selection-start-column="11" selection-end-line="28" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="550">
          <caret line="84" selection-start-line="84" selection-end-line="84" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="38" column="33" selection-start-line="38" selection-start-column="33" selection-end-line="38" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1320">
          <caret line="60" column="6" selection-start-line="60" selection-start-column="6" selection-end-line="60" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/build.boot" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.java" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.form" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="12" column="40" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="14" selection-start-line="8" selection-start-column="14" selection-end-line="8" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="814">
          <caret line="37" column="31" selection-start-line="37" selection-start-column="31" selection-end-line="37" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" column="37" selection-start-line="5" selection-start-column="37" selection-end-line="5" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="264">
          <caret line="21" column="42" selection-start-line="21" selection-start-column="42" selection-end-line="21" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="https://github.com/gitpitch/in-60-seconds.git">
      <provider selected="true" editor-type-id="httpFileEditor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="361">
            <caret line="48" column="29" lean-forward="true" selection-start-line="48" selection-start-column="29" selection-end-line="48" selection-end-column="29" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/PITCHME.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="286">
            <caret line="13" column="8" lean-forward="true" selection-start-line="13" selection-start-column="8" selection-end-line="13" selection-end-column="8" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="16" column="2" selection-start-line="16" selection-start-column="2" selection-end-line="16" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="252">
          <caret line="122" column="14" lean-forward="true" selection-start-line="122" selection-start-column="14" selection-end-line="122" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="467">
          <caret line="116" column="8" selection-start-line="116" selection-start-column="8" selection-end-line="116" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="265">
          <caret line="95" column="5" selection-start-line="95" selection-start-column="5" selection-end-line="95" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/algorithm.png">
      <provider selected="true" editor-type-id="images" />
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/algorithm.svg">
      <provider selected="true" editor-type-id="images" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="274">
          <caret line="26" column="28" selection-start-line="26" selection-start-column="28" selection-end-line="26" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/dep_example.svg">
      <provider selected="true" editor-type-id="images" />
    </entry>
    <entry file="file://$PROJECT_DIR$/PITCHME.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="550">
            <caret line="31" column="9" lean-forward="true" selection-start-line="31" selection-start-column="9" selection-end-line="31" selection-end-column="9" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Dep2Rel</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: github-tuh8888/hpl-utl:17b59d</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>