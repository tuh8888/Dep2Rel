<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="Vector operations cannot have nil elements or be empty">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" beforeDir="false" afterPath="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/../hpl-util/src/math.clj" beforeDir="false" afterPath="$PROJECT_DIR$/../hpl-util/src/math.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Word2Vec-clj" />
              <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Word2Vec-clj" />
                <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$/../hpl-util" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$/../hpl-util" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4674729407000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="3928382818" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="4674728943000" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" value="2071936696" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="4670933584000" />
        <entry key="$PROJECT_DIR$/../hpl-util/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../Word2Vec-clj">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../hpl-util">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="103">
              <caret line="13" column="20" lean-forward="true" selection-start-line="13" selection-start-column="20" selection-end-line="13" selection-end-column="20" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="213">
              <caret line="56" column="22" selection-start-line="56" selection-start-column="22" selection-end-line="56" selection-end-column="22" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="462">
              <caret line="22" column="19" selection-start-line="22" selection-start-column="19" selection-end-line="22" selection-end-column="19" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="171">
              <caret line="61" column="22" selection-start-line="61" selection-start-column="22" selection-end-line="61" selection-end-column="22" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="227">
              <caret line="231" column="52" selection-start-line="231" selection-start-column="52" selection-end-line="231" selection-end-column="52" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="66">
              <caret line="3" column="29" selection-start-line="3" selection-start-column="29" selection-end-line="3" selection-end-column="29" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
      <find>loading</find>
      <find>log</find>
      <find>2340</find>
      <find>23402364-T37</find>
      <find>f1</find>
      <find>f1 0.\d+</find>
      <find>context-th</find>
      <find>save</find>
      <find>str</find>
      <find>warn</find>
      <find>:sentences</find>
      <find>&quot;</find>
      <find>ann:</find>
      <find>:wor</find>
      <find>:context-v</find>
      <find>(first training-sentences)</find>
      <find>:</find>
      <find>uncomplicat</find>
      <find>sum-</find>
      <find>con</find>
      <find>context</find>
      <find>unit-v</find>
      <find>pmap</find>
      <find>with-release</find>
      <find>context/</find>
      <find>unit-vec-sum</find>
    </findStrings>
    <replaceStrings>
      <replace>&quot;</replace>
      <replace>let-release</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="6e27e1ded932cb991ca419ac5ffdd882e7430b2c" />
      </map>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/math.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1599" />
    <option name="y" value="29" />
    <option name="width" value="1682" />
    <option name="height" value="1022" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator currentView="Scope" currentSubView="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope" proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope">
        <subPane subId="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
          </expand>
          <select />
        </subPane>
        <subPane subId="Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="~/Documents/Dep2Rel" type="442cc68d:ScopeViewTreeModel$RootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Word2Vec-clj" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Word2Vec-clj" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="/opt/graalvm/bin/jvisualvm" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="VisualVMLauncher" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560214594140">{:repl-history {:ide [], :local [{:command &quot;(.save model)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations model)&quot;, :offset 23, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 501, :ns &quot;user&quot;} {:command &quot;(def model (k/simple-model annotations))\n\n(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1408, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (group-by :doc (:concept-annotations model)))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :doc (:concept-annotations model))))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(type (:concept-annotations model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (:concept-annotations model))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (vals (:concept-annotations model)))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(set (map :doc (vals (:concept-annotations model))))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations model))&quot;, :offset 6, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/display annotations)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))}))&quot;, :offset 2316, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(count (:concept-annotations model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1366, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences (sentence/concept-annotations-&gt;sentences model))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first sentences)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.removeModelListener annotations text-source)\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property)\n             (.addModelListener annotations text-source))))))&quot;, :offset 1885, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(rdr/biocreative-read-relations (.get (.getModel annotations)) relations-file)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))\n\n(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n(rdr/biocreative-read-relations (k/model annotations) relations-file)&quot;, :offset 1084, :ns &quot;user&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (:concept-graphs model))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save (k/model annotations))&quot;, :offset 29, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 466, :ns &quot;user&quot;} {:command &quot;(def structures-annotations-with-embeddings (word2vec/with-word2vec word2vec-db\n                                              (sentence/structures-annotations-with-embeddings model)))&quot;, :offset 183, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model))\n\n(def model (assoc model\n             :concept-annotations concept-annotations-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n(def sentences (sentence/concept-annotations-&gt;sentences model))\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 359, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;}], :remote [{:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)]\n               (-&gt; split-training-model\n                   (assoc :properties properties)\n                   (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 880, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :entities (:seeds split-training-model))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count training-sentences)&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)]\n               (-&gt; split-training-model\n                   (assoc :properties properties)\n                   (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 880, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn context-vector-cosine-sim\n  [s1 s2]\n  (let [vec1 (:context-vector s1)\n        vec2 (:context-vector s2)]\n    (if (and vec1 vec2)\n      (thal/dot vec1 vec2)\n      0)))&quot;, :offset 172, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(seq (uncomplicate.neanderthal.native/dge [[1 2 3]\n                                           [4 5 6]]))&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(seq (uncomplicate.neanderthal.native/dge [[1 2 3]\n                                           [4 5 6]]\n                                          :layout :column))&quot;, :offset 160, :ns &quot;user&quot;} {:command &quot;(seq (uncomplicate.neanderthal.native/dge [[1 2 3]\n                                           [4 5 6]]\n                                          {:layout :column}))&quot;, :offset 146, :ns &quot;user&quot;} {:command &quot;(seq (uncomplicate.neanderthal.native/dge [[1 2]\n                                           [3 4]\n                                           [5 6]]))&quot;, :offset 142, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (let [samples (vec samples)\n        clusters (vec clusters)\n        sample-m (uncomplicate.neanderthal.native/dge (map :context-vector samples))\n        cluster-m (uncomplicate.neanderthal.native/dge (map :context-vector clusters))\n        score-m (thal/mm sample-m cluster-m)]\n    (reduce\n      (fn [best [i sample]]\n        (reduce\n          (fn [{:keys [score] :as best} [j cluster]]\n            (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n              (if (&lt; best score)\n                {:cluster cluster :sample sample :score}\n                best)))\n          best\n          (map-indexed vector clusters)))\n      {:score cluster-thresh}\n      (map-indexed vector samples))))&quot;, :offset 797, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (let [samples (vec samples)\n        clusters (vec clusters)\n        sample-m (uncomplicate.neanderthal.native/dge (map :context-vector samples))\n        cluster-m (uncomplicate.neanderthal.native/dge (map :context-vector clusters))\n        score-m (thal/mm sample-m cluster-m)]\n    (reduce\n      (fn [best [i sample]]\n        (reduce\n          (fn [{:keys [score] :as best} [j cluster]]\n            (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n              (if (&lt; best score)\n                {:cluster cluster :sample sample :score score }\n                best)))\n          best\n          (map-indexed vector clusters)))\n      {:score cluster-thresh}\n      (map-indexed vector samples))))&quot;, :offset 804, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (let [samples (vec samples)\n        clusters (vec clusters)\n        sample-m (uncomplicate.neanderthal.native/dge (map :context-vector samples))\n        cluster-m (uncomplicate.neanderthal.native/dge (map :context-vector clusters))\n        score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n    (reduce\n      (fn [best [i sample]]\n        (reduce\n          (fn [{:keys [score] :as best} [j cluster]]\n            (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n              (if (&lt; best score)\n                {:cluster cluster :sample sample :score score}\n                best)))\n          best\n          (map-indexed vector clusters)))\n      {:score cluster-thresh}\n      (map-indexed vector samples))))&quot;, :offset 828, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (let [samples (vec samples)\n        clusters (vec clusters)\n        sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples \n                                                           (map :context-vector) \n                                                           (map seq)))\n        cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters \n                                                            (map :context-vector)\n                                                            (seq)))\n        score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n    (reduce\n      (fn [best [i sample]]\n        (reduce\n          (fn [{:keys [score] :as best} [j cluster]]\n            (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n              (if (&lt; best score)\n                {:cluster cluster :sample sample :score score}\n                best)))\n          best\n          (map-indexed vector clusters)))\n      {:score cluster-thresh}\n      (map-indexed vector samples))))&quot;, :offset 1097, :ns &quot;cluster-tools&quot;} {:command &quot;(defn pattern-update\n  [{:keys [cluster-thresh\n           min-match-support]}\n   new-matches patterns property]\n  (let [samples (-&gt;&gt; new-matches\n                     (filter #(= (:predicted %) property))\n                     (set))\n        patterns (-&gt;&gt; patterns\n                      (filter #(= (:predicted %) property))\n                      (set))]\n\n    (-&gt;&gt; (cluster-tools/single-pass-cluster samples patterns\n           {:cluster-merge-fn re/add-to-pattern\n            :cluster-sim-fn   re/context-vector-cosine-sim\n            :cluster-thresh   cluster-thresh})\n         (map #(assoc % :predicted property))\n         (filter #(&lt; min-match-support (count (:support %)))))))&quot;, :offset 679, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (let [samples (vec samples)\n        clusters (vec clusters)\n        sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                           (map :context-vector)\n                                                           (map seq)\n                                                           (vec)))\n        cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                            (map :context-vector)\n                                                            (seq)\n                                                            (vec)))\n        score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n    (reduce\n      (fn [best [i sample]]\n        (reduce\n          (fn [{:keys [score] :as best} [j cluster]]\n            (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n              (if (&lt; best score)\n                {:cluster cluster :sample sample :score score}\n                best)))\n          best\n          (map-indexed vector clusters)))\n      {:score cluster-thresh}\n      (map-indexed vector samples))))&quot;, :offset 1225, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (map seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (seq)\n                                                              (vec)))\n          score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1295, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (map seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (map seq)\n                                                              (vec)))\n          score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1299, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (map seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (map seq)\n                                                              (vec)))\n          score-m (uncomplicate.neanderthal.core/mm sample-m (uncomplicate.neanderthal.core/trans! cluster-m))]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1338, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (map seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (map seq)\n                                                              (vec)))\n          #_score-m #_(uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (log/debug (uncomplicate.neanderthal.core/dim sample-m))\n      #_(reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                  (if (&lt; best score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples)))))&quot;, :offset 1390, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (map seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (map seq)\n                                                              (vec)))\n          #_score-m #_(uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (println (uncomplicate.neanderthal.core/dim sample-m))\n      #_(reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                  (if (&lt; best score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples)))))&quot;, :offset 1388, :ns &quot;cluster-tools&quot;} {:command &quot;(uncomplicate.neanderthal.native/dge [[1 2 3]\n                                      [4 5 6]])&quot;, :offset 90, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (count samples)\n                                                        (count (:context-vector (first samples)))\n                                                        (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (mapcat seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (count clusters)\n                                                         (count (:context-vector (first clusters)))\n                                                         (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (mapcat seq)\n                                                              (vec)))\n          #_score-m #_(uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (println (uncomplicate.neanderthal.core/dim sample-m))\n      #_(reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                  (if (&lt; best score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples)))))&quot;, :offset 1738, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          sample-m (uncomplicate.neanderthal.native/dge (count samples)\n                                                        (count (seq (:context-vector (first samples))))\n                                                        (-&gt;&gt; samples\n                                                             (map :context-vector)\n                                                             (mapcat seq)\n                                                             (vec)))\n          cluster-m (uncomplicate.neanderthal.native/dge (count clusters)\n                                                         (count (seq (:context-vector (first clusters))))\n                                                         (-&gt;&gt; clusters\n                                                              (map :context-vector)\n                                                              (mapcat seq)\n                                                              (vec)))\n          #_score-m #_(uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (println (uncomplicate.neanderthal.core/dim sample-m))\n      #_(reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                  (if (&lt; best score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples)))))&quot;, :offset 1750, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n                                                         \n          #_score-m #_(uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (println m1d1 m1d2 m2d1)\n      #_(reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                  (if (&lt; best score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples)))))&quot;, :offset 1339, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n\n          score-m (uncomplicate.neanderthal.core/mm sample-m cluster-m)]\n      (println m1d1 m1d2 m2d1)\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1254, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n\n          score-m (uncomplicate.neanderthal.core/mm sample-m (uncomplicate.neanderthal.core/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.core/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1292, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n\n          score-m (uncomplicate.neanderthal.core/mm sample-m (uncomplicate.neanderthal.core/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (uncomplicate.neanderthal.real/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1292, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n\n          score-m (uncomplicate.neanderthal.core/mm sample-m (uncomplicate.neanderthal.core/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (aget (uncomplicate.neanderthal.real/entry score-m i j) 0)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1301, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (uncomplicate.neanderthal.native/dge m1d1 m1d2 s1)\n          cluster-m (uncomplicate.neanderthal.native/dge m2d1 m1d2 s2)\n\n          score-m (uncomplicate.neanderthal.core/mm sample-m (uncomplicate.neanderthal.core/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (get (uncomplicate.neanderthal.real/entry score-m i j) 0)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1300, :ns &quot;cluster-tools&quot;} {:command &quot;(ns cluster-tools\n  (:require [com.climate.claypoole :as cp]\n            [taoensso.timbre :as log]\n            [uncomplicate.neanderthal.core :as thal]))&quot;, :offset 153, :ns &quot;user&quot;} {:command &quot;(ns cluster-tools\n  (:require [com.climate.claypoole :as cp]\n            [taoensso.timbre :as log]\n            [uncomplicate.neanderthal.core :as thal]\n            [uncomplicate.neanderthal.native :as thal-native]))&quot;, :offset 215, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (get (uncomplicate.neanderthal.real/entry score-m i j) 0)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1268, :ns &quot;cluster-tools&quot;} {:command &quot;(ns cluster-tools\n  (:require [com.climate.claypoole :as cp]\n            [taoensso.timbre :as log]\n            [uncomplicate.neanderthal.core :as thal]\n            [uncomplicate.neanderthal.native :as thal-native]\n            [uncomplicate.neanderthal.real :as thal-real]))&quot;, :offset 273, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (println (thal-real/entry score-m i j))\n              (let [score (get (thal-real/entry score-m i j) 0)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1302, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (println (thal-real/entry score-m i j))\n              (let [score (thal-real/entry score-m i j)]\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1294, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [score (thal-real/entry score-m i j)]\n                (println score (type score))\n                (if (&lt; best score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1285, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (println score (type score))\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1294, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (println m1d1 m1d2 m2d1)\n      (println (thal/mrows score-m) (thal/ncols score-m))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1249, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1160, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (when (seq clusters)\n    (let [samples (vec samples)\n          clusters (vec clusters)\n          m1d1 (count samples)\n          m2d1 (count clusters)\n          m1d2 (count (seq (:context-vector (first samples))))\n          s1 (-&gt;&gt; samples\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          s2 (-&gt;&gt; clusters\n                  (map :context-vector)\n                  (mapcat seq)\n                  (vec))\n          sample-m (thal-native/dge m1d1 m1d2 s1)\n          cluster-m (thal-native/dge m2d1 m1d2 s2)\n\n          score-m (thal/mm sample-m (thal/trans cluster-m))]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (println new-score)\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 1196, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)]\n               (-&gt; split-training-model\n                   (assoc :properties properties)\n                   (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 784, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(+ 1 1)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (seq clusters)\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans!))\n                                s2 (matrix-fn factory clusters)\n                                score-m (thal/mm s1 s2)]\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 847, :ns &quot;cluster-tools&quot;} {:command &quot;(defn context-mat\n  [factory coll]\n  (let [d (count (seq (:context-vector (first coll))))]\n    (-&gt;&gt; coll\n         (map :context-vector)\n         (mapcat seq)\n         (thal/ge factory d (count coll)))))&quot;, :offset 202, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh factory]} samples patterns]\n  (when (seq patterns)\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (context-mat factory)\n                                        (thal/trans!))\n                                s2 (context-mat factory patterns)\n                                score-m (thal/mm s1 s2)]\n      #_(-&gt;&gt; score-m\n             (thal/rows)\n             (map (fn [sample row]\n                    (let [i (thal/imax row)\n                          score (thal/entry row i)]\n                      (when (&lt; context-thresh score)\n                        (let [property (-&gt; patterns (get i) :predicted)]\n                          (assoc sample :predicted property)))))\n                  samples))\n      (map-indexed (fn [i s]\n                     (-&gt;&gt; (reduce\n                            (fn [{:keys [score] :as best} [j pattern]]\n                              (let [new-score (thal-real/entry score-m i j)]\n                                (if (&lt; score new-score)\n                                  {:pattern pattern :score score}\n                                  best)))\n                            {:score context-thresh}\n                            (map-indexed vector patterns))\n                          :pattern\n                          :predicted\n                          (assoc s :predicted)))\n                   samples))))&quot;, :offset 1426, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-update\n  [{:keys [min-match-support] :as params}\n   new-matches patterns property]\n  (let [samples (-&gt;&gt; new-matches\n                     (filter #(= (:predicted %) property))\n                     (set))\n        patterns (-&gt;&gt; patterns\n                      (filter #(= (:predicted %) property))\n                      (set))\n        patterns (-&gt;&gt; (cluster-tools/single-pass-cluster samples patterns\n                        (merge params {:cluster-merge-fn re/add-to-pattern\n                                       :matrix-fn context-mat\n                                       :cluster-sim-fn   re/context-vector-cosine-sim}))\n                      (map #(assoc % :predicted property)))\n        filt #(or (empty? new-matches) (&lt; min-match-support (count (:support %))))]\n    [(filter filt patterns)\n     (-&gt;&gt; patterns\n          (remove filt)\n          (mapcat :support))]))&quot;, :offset 883, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.9\n                           :min-match-support 5\n                           :matrix-fn         context-matrix\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)]\n               (-&gt; split-training-model\n                   (assoc :properties properties)\n                   (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 916, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn terminate?\n  [model {:keys [max-iterations max-matches]}\n   {:keys [iteration seeds new-matches matches patterns samples last-new-matches]}]\n  (let [success-model (assoc model :matches matches\n                                   :patterns patterns)]\n    (cond (&lt;= max-iterations iteration) (do (log/info \&quot;Max iteration reached\&quot;)\n                                            success-model)\n          (= last-new-matches new-matches) (do (log/info \&quot;No new matches\&quot;)\n                                               success-model)\n          (empty? samples) (do (log/info \&quot;No more samples\&quot;)\n                               success-model)\n          (&lt;= max-matches (count matches)) (do (log/info \&quot;Too many matches\&quot;)\n                                               model)\n          (empty? seeds) (do (log/info \&quot;No seeds\&quot;)\n                             model))))&quot;, :offset 856, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties #{\&quot;INHIBITOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;ANTAGONIST\&quot; \&quot;PART-OF\&quot;\n                  \&quot;UPREGULATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot; \&quot;DIRECT-UPREGULATOR\&quot;\n                  \&quot;REGULATOR\&quot;})&quot;, :offset 172, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(comment)&quot;, :offset 9, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.]\n                            (evaluation/split-train-test training-sentences training-model seed-frac properties)))&quot;, :offset 160, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-update\n  [{:keys [min-match-support reclustering?] :as params}\n   new-matches patterns property]\n  (let [samples (-&gt;&gt; new-matches\n                     (filter #(= (:predicted %) property))\n                     (set))\n        patterns (-&gt;&gt; patterns\n                      (filter #(= (:predicted %) property))\n                      (set))\n        patterns (-&gt;&gt; (cluster-tools/single-pass-cluster samples patterns\n                        (merge params {:cluster-merge-fn re/add-to-pattern\n                                       :cluster-sim-fn   re/context-vector-cosine-sim}))\n                      (map #(assoc % :predicted property)))\n        filt #(or (empty? new-matches) (&lt; min-match-support (count (:support %))))]\n    [(filter filt patterns)\n     (when reclustering?\n       (-&gt;&gt; patterns\n            (remove filt)\n            (mapcat :support)))]))&quot;, :offset 867, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh factory matrix-fn]} samples patterns]\n  (when (and (seq samples) (seq patterns))\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans))\n                                s2 (matrix-fn factory patterns)\n                                score-m (thal/mm s1 s2)]\n      #_(println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n\n      #_(-&gt;&gt; score-m\n             (thal/rows)\n             (map (fn [sample row]\n                    (let [i (thal/imax row)\n                          score (thal/entry row i)]\n                      (when (&lt; context-thresh score)\n                        (let [property (-&gt; patterns (get i) :predicted)]\n                          (assoc sample :predicted property)))))\n                  samples))\n      (map-indexed (fn [i s]\n                     (-&gt;&gt; (reduce\n                            (fn [{:keys [score] :as best} [j pattern]]\n                              (let [new-score (thal-real/entry score-m i j)]\n                                (if (&lt; score new-score)\n                                  {:pattern pattern :score score}\n                                  best)))\n                            {:score context-thresh}\n                            (map-indexed vector patterns))\n                          :pattern\n                          :predicted\n                          (assoc s :predicted)))\n                   samples))))&quot;, :offset 1534, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (and (seq samples) (seq clusters))\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans))\n                                s2 (matrix-fn factory clusters)\n                                score-m (thal/mm s1 s2)]\n      (println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2 ) (thal/ncols s2))\n      (reduce\n        (fn [best [i sample]]\n          (reduce\n            (fn [{:keys [score] :as best} [j cluster]]\n              (let [new-score (thal-real/entry score-m i j)]\n                (if (&lt; score new-score)\n                  {:cluster cluster :sample sample :score score}\n                  best)))\n            best\n            (map-indexed vector clusters)))\n        {:score cluster-thresh}\n        (map-indexed vector samples)))))&quot;, :offset 947, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (and (seq samples) (seq clusters))\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans))\n                                s2 (matrix-fn factory clusters)]\n      (uncomplicate/with-release [score-m (thal/mm s1 s2)]\n        (println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n        (reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [new-score (thal-real/entry score-m i j)]\n                  (if (&lt; score new-score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples))))))&quot;, :offset 976, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (and (seq samples) (seq clusters))\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans))\n                                s2 (matrix-fn factory clusters)]\n      (println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n      (uncomplicate/with-release [score-m (thal/mm s1 s2)]\n        (reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [new-score (thal-real/entry score-m i j)]\n                  (if (&lt; score new-score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples))))))&quot;, :offset 974, :ns &quot;cluster-tools&quot;} {:command &quot;(defn context-matrix\n  [factory coll]\n  (let [d (count (some #(seq (:context-vector %)) coll))]\n    (-&gt;&gt; coll\n         (map :context-vector)\n         (mapcat seq)\n         (thal/ge factory d (count coll)))))&quot;, :offset 207, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 3\n                             :max-iterations    100\n                             :max-matches       3000\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1110, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (and (seq samples) (seq clusters))\n    (uncomplicate/with-release [s1 (-&gt;&gt; samples\n                                        (matrix-fn factory)\n                                        (thal/trans))\n                                s2 (matrix-fn factory clusters)]\n      #_(println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n      (uncomplicate/with-release [score-m (thal/mm s1 s2)]\n        (reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (let [new-score (thal-real/entry score-m i j)]\n                  (if (&lt; score new-score)\n                    {:cluster cluster :sample sample :score score}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples))))))&quot;, :offset 976, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 7\n                             :max-iterations    10\n                             :max-matches       3000\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1109, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 3\n                             :max-iterations    10\n                             :max-matches       3000\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1109, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (evaluation/split-train-test training-sentences training-model seed-frac properties)))&quot;, :offset 161, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 3\n                             :max-iterations    10\n                             :max-matches       3000\n                             :reclustering      true\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1162, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 3\n                             :max-iterations    10\n                             :max-matches       3000\n                             :reclustering?      true\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1163, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns math\n  (:require [taoensso.timbre :as t]\n            [clojure.math.combinatorics :as combo]\n            [uncomplicate.neanderthal.core :as thal]\n            [uncomplicate.commons.core :as uncomplicate]))&quot;, :offset 207, :ns &quot;user&quot;} {:command &quot;(defn unit-vec\n  [v]\n  (thal/scal (/ (thal/nrm2 v)) v))&quot;, :offset 55, :ns &quot;math&quot;} {:command &quot;(defn cosine-sim\n  [v1 v2]\n  (uncomplicate/with-release [v1 (unit-vec v1)\n                              v2 (unit-vec v2)]\n    (thal/dot v1 v2)))&quot;, :offset 144, :ns &quot;math&quot;} {:command &quot;(defn unit-vec-sum\n  [&amp; vectors]\n  (if (&lt;= 2 (count vectors))\n    (uncomplicate/with-release [v (apply thal/xpy vectors)]\n      (unit-vec v))\n    (unit-vec (first vectors))))&quot;, :offset 174, :ns &quot;math&quot;} {:command &quot;(ns math\n  (:require [taoensso.timbre :as t]\n            [clojure.math.combinatorics :as combo]\n            [uncomplicate.neanderthal.core :as thal]\n            [uncomplicate.commons.core :as uncomplicate]))\n\n(defn digits\n  \&quot;Returns the digits of a number\&quot;\n  [x]\n  (map #(Character/getNumericValue ^Character %) (str x)))\n\n(defn exp\n  [x n]\n  (reduce * (repeat n x)))\n(declare mult-persistence)\n\n(defn unit-vec\n  [v]\n  (thal/scal (/ (thal/nrm2 v)) v))\n\n(defn cosine-sim\n  [v1 v2]\n  (uncomplicate/with-release [v1 (unit-vec v1)\n                              v2 (unit-vec v2)]\n    (thal/dot v1 v2)))\n\n(defn unit-vec-sum\n  [&amp; vectors]\n  (if (&lt;= 2 (count vectors))\n    (uncomplicate/with-release [v (apply thal/xpy vectors)]\n      (unit-vec v))\n    (unit-vec (first vectors))))\n\n(defn pred-false\n  [&amp; [{:keys [predicted-true all]}]]\n  (clojure.set/difference all predicted-true))\n\n(defn actual-false\n  [&amp; [{:keys [actual-true all]}]]\n  (clojure.set/difference all actual-true))\n\n(defn true-pos\n  [&amp; [{:keys [predicted-true actual-true]}]]\n  (clojure.set/intersection predicted-true actual-true))\n(defn true-neg\n  [&amp; [params]]\n  (clojure.set/intersection (pred-false params)\n                            (actual-false params)))\n(defn false-pos\n  [&amp; [{:keys [predicted-true] :as params}]]\n  (clojure.set/intersection predicted-true\n                            (actual-false params)))\n(defn false-neg\n  [&amp; [{:keys [actual-true] :as params}]]\n  (clojure.set/intersection (pred-false params)\n                            actual-true))\n\n(defn precision\n  [&amp; [params]]\n  (float (/ (count (true-pos params)) (+ (count (true-pos params)) (count (false-pos params))))))\n(defn recall\n  [&amp; [params]]\n  (float (/ (count (true-pos params)) (+ (count (true-pos params)) (count (false-neg params))))))\n(defn f1\n  [&amp; [params]]\n  (float (/ (* 2 (precision params) (recall params))\n            (+ (precision params) (recall params)))))\n\n(defn calc-metrics\n  [&amp; [params]]\n  {:tp        (count (true-pos params))\n   :tn        (count (true-neg params))\n   :fp        (count (false-pos params))\n   :fn        (count (false-neg params))\n   :precision (precision params)\n   :recall    (recall params)\n   :f1        (f1 params)})\n\n(defn _mult-persistence\n  ([x step]\n   (let [x (if (coll? x) x (digits x))]\n     (if (= 1 (count x))\n       step\n       (mult-persistence (digits (reduce * (BigInteger/ONE) x)) (inc step)))))\n  ([x]\n   (_mult-persistence x 0)))\n\n(def mult-persistence\n  (let [mem (atom {})]\n    (fn\n      ([x step]\n       (if-let [e (find @mem x)]\n         (val e)\n         (_mult-persistence x step)))\n      ([x]\n       (let [ret (mult-persistence x 0)]\n         (swap! mem assoc x ret)\n         ret)))))\n\n(defn find-highest-mult-persistence\n  \&quot;Finds the shortest whole number whose digits, can be iteratively multiplied\n  the most times. Current record holder is 277777788888899 with 11 iterations.\&quot;\n  [num-digits]\n\n  (let [best (atom {:num     (list)\n                    :steps   0\n                    :longest 0})\n        digit-params (combo/cartesian-product\n                       [true false]\n                       [true false]\n                       [true false]\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits))]\n    (t/info \&quot;Num numbers to check: \&quot; (count digit-params))\n\n    (letfn [(check-num [x]\n              (let [steps (mult-persistence x)]\n                (swap! best #(cond-&gt; %\n                                     (&lt; (:steps %) steps) (assoc :num x :steps steps)\n                                     (and (= (:steps %) steps)\n                                          (&lt;= (count x) (count (:num %)))) (assoc :num x :steps steps)\n                                     (&lt; (:longest %) (count x)) (assoc :longest (count x))))))\n            (make-num [use2? use3? use4? num5 num6 num7 num8 num9]\n              (lazy-cat\n                (repeat (if use2? 0 1) 2)\n                (repeat (if (and use3? (not use2?)) 0 1) 3)\n                (repeat (if (and use4? (not use2?)) 0 1) 4)\n                (repeat (if (not use2?) 0 num5) 5)\n                (repeat num6 6)\n                (repeat num7 7)\n                (repeat num8 8)\n                (repeat num9 9)))]\n      (doall\n        (pmap (fn [[i x]]\n                (when (zero? (rem i 100000)) (t/info i))\n                (check-num (apply make-num x)))\n              (map-indexed vector digit-params)))\n      (update @best :num #(BigInteger. ^String (apply str %))))))\n\n(comment\n  (t/set-level! :info)\n  (mult-persistence 277777788888899)\n  (find-highest-mult-persistence 3)\n  (combo/car)\n  (type (* (long 2) (long 5))))\n&quot;, :offset 4735, :ns &quot;user&quot;} {:command &quot;(def properties #_#{\&quot;INHIBITOR\&quot;} #{\&quot;PART-OF\&quot;\n                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                   \&quot;ANTAGONIST\&quot;\n                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                   \&quot;COFACTOR\&quot;\n                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                   \&quot;NOT\&quot;})&quot;, :offset 699, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                     params {:context-thresh    0.95\n                             :cluster-thresh    0.95\n                             :min-match-support 0\n                             :max-iterations    10\n                             :max-matches       3000\n                             :reclustering?      true\n                             :matrix-fn         context-matrix\n                             :factory           thal-native/native-double}\n                     context-match-fn (partial concept-context-match params)\n                     pattern-update-fn (partial pattern-update params)\n                     terminate? (partial terminate? params)]\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics))))&quot;, :offset 1163, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def triples-dataset (-&gt;&gt; training-sentences\n                            (filter #(or (nil? (:property %))\n                                         (properties (:property %))))\n                            (evaluation/sentences-&gt;dataset)))\n\n  (def groups (incanter/sel triples-dataset :cols :property))\n  (def y (incanter/sel triples-dataset :cols (range 0 200)))\n  (def x (evaluation/pca-2 y))\n  (-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (incanter/view)\n      #_(inc-svg/save-svg \&quot;pca-all.svg \&quot;))&quot;, :offset 738, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (remove :context-vector training-sentences))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;  (def triples-dataset (-&gt;&gt; training-sentences\n                            (filter #(or (nil? (:property %))\n                                         (properties (:property %))))\n                            (filter :context-vector)\n                            (evaluation/sentences-&gt;dataset)))\n\n  (def groups (incanter/sel triples-dataset :cols :property))\n  (def y (incanter/sel triples-dataset :cols (range 0 200)))\n  (def x (evaluation/pca-2 y))\n  (-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (incanter/view)\n      #_(inc-svg/save-svg \&quot;pca-all.svg \&quot;))&quot;, :offset 793, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;triples-dataset&quot;, :offset 15, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def x (evaluation/pca-2 y))&quot;, :offset 28, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def triples-dataset (-&gt;&gt; training-sentences\n                            (filter #(or (nil? (:property %))\n                                         (properties (:property %))))\n                            (filter :context-vector)\n                            (evaluation/sentences-&gt;dataset)))\n\n  (def groups (incanter/sel triples-dataset :cols :property))\n  (def y (incanter/sel triples-dataset :cols (range 0 200)))\n  (def x (evaluation/pca-2 y))\n  (-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (incanter/view)\n      #_(inc-svg/save-svg \&quot;pca-all.svg \&quot;))&quot;, :offset 791, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-thresh factory matrix-fn]}]\n  (when (and (seq samples) (seq clusters))\n    (uncomplicate/with-release [s1-1 (matrix-fn factory samples)\n                                s1 (thal/trans s1-1)\n                                s2 (matrix-fn factory clusters)]\n      #_(println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n      (uncomplicate/with-release [score-m (thal/mm s1 s2)]\n        (reduce\n          (fn [best [i sample]]\n            (reduce\n              (fn [{:keys [score] :as best} [j cluster]]\n                (uncomplicate/with-release [new-score (thal-real/entry score-m i j)]\n                  (if (&lt; score new-score)\n                    {:cluster cluster :sample sample :score (float score)}\n                    best)))\n              best\n              (map-indexed vector clusters)))\n          {:score cluster-thresh}\n          (map-indexed vector samples))))))&quot;, :offset 962, :ns &quot;cluster-tools&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh factory matrix-fn]} samples patterns]\n  (when (and (seq samples) (seq patterns))\n    (uncomplicate/with-release [s1-1 (matrix-fn factory samples)\n                                s1 (thal/trans s1-1)\n                                s2 (matrix-fn factory patterns)\n                                score-m (thal/mm s1 s2)]\n      #_(println (thal/mrows s1) (thal/ncols s1) (thal/mrows s2) (thal/ncols s2))\n\n      (map-indexed (fn [i s]\n                     (let [pattern (-&gt;&gt; (reduce\n                                          (fn [{:keys [score] :as best} [j pattern]]\n                                            (uncomplicate/with-release [new-score (thal-real/entry score-m i j)]\n                                              (if (&lt; score new-score)\n                                                {:pattern pattern :score (float score)}\n                                                best)))\n                                          {:score context-thresh}\n                                          (map-indexed vector patterns))\n                                        :pattern)]\n                       (assoc s :predicted (when (re/sent-pattern-concepts-match? s pattern) (:predicted pattern)))))\n                   samples))))&quot;, :offset 1284, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (uncomplicate/with-release [v (thal-native/dv (word2vec/word-embedding \&quot;has\&quot;))\n                              e (thal-real/entry v 0)]\n\n    e))&quot;, :offset 180, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (uncomplicate/with-release [v (thal-native/dv [1 2 3])\n                              e (thal-real/entry v 0)]\n\n    e))&quot;, :offset 156, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uncomplicate/with-release [v (thal-native/dv [1 2 3])\n                            e (thal-real/entry v 0)]\n\n  e)&quot;, :offset 113, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    10\n                           :max-matches       3000\n                           :reclustering?     true\n                           :matrix-fn         (partial context-matrix training-model)\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)\n                   terminate? (partial terminate? params)]\n               (word2vec/with-word2vec word2vec-db\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics)))))&quot;, :offset 1217, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh] :as params} samples patterns]\n  (when (and (seq samples) (seq patterns))\n    (-&gt;&gt; patterns\n         (math/find-best-row-matches params samples)\n         (filter (fn [{:keys [score]}] (&lt; context-thresh score)))\n         (filter (fn [{:keys [sample match]}] (re/sent-pattern-concepts-match? sample match)))\n         (map (fn [{:keys [sample match]}]\n                (assoc sample :predicted (:predicted match)))))))&quot;, :offset 468, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn find-best-match\n  [{:keys [vector-fn] :as params} s1 s2]\n  (uncomplicate/with-release [score-mat (mdot params (map vector-fn s1) (map vector-fn s2))]\n    (-&gt;&gt; s1\n         (map-indexed vector)\n         (reduce\n           (fn [best [i sample]]\n             (-&gt; (best-in-row-from-matrix score-mat best i s2)\n                 (assoc :sample sample)))\n           {:score 0})\n         (doall))))&quot;, :offset 395, :ns &quot;math&quot;} {:command &quot;(defn find-best-row-matches\n  [{:keys [vector-fn] :as params} s1 s2]\n  (uncomplicate/with-release [score-mat (mdot params (map vector-fn s1) (map vector-fn s2))]\n    (-&gt;&gt; s1\n         (map-indexed (fn [i sample]\n                        (-&gt; score-mat\n                            (best-in-row-from-matrix {:score 0} i s2)\n                            (assoc :sample sample))))\n         (doall))))&quot;, :offset 392, :ns &quot;math&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    10\n                           :max-matches       3000\n                           :reclustering?     true\n                           :vector-fn         #(or (:VEC %) (context/context-vector % training-model))\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)\n                   terminate? (partial terminate? params)]\n               (word2vec/with-word2vec word2vec-db\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                     (update :samples (fn [samples] (map #(assoc % :VEC (context/context-vector % training-model)) samples)))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics)\n                     (doall)))))&quot;, :offset 1409, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defrecord Pattern [support]\n  context/ContextVector\n  (context-vector [self model]\n    (-&gt;&gt; self\n         :support\n         (map #(context/context-vector % model))\n         (apply math/unit-vec-sum))))&quot;, :offset 202, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (-&gt; training-sentences \n                                (evaluation/split-train-test training-model seed-frac properties)\n                                (update :samples (fn [samples] (map #(assoc % :VEC (context/context-vector % training-model)) \n                                                                    samples)))))\n  (log/set-level! :info))&quot;, :offset 430, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (-&gt; training-sentences \n                                (evaluation/split-train-test training-model seed-frac properties)\n                                (update :samples (fn [samples] (map #(assoc % :VEC (context/context-vector % training-model)) \n                                                                    samples))))))&quot;, :offset 405, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    10\n                           :max-matches       3000\n                           :reclustering?     true\n                           :vector-fn         #(or (:VEC %) (context/context-vector % training-model (fn [s] (:VEC s))))\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)\n                   terminate? (partial terminate? params)]\n               (word2vec/with-word2vec word2vec-db\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics)\n                     (doall)))))&quot;, :offset 1301, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (-&gt; training-sentences\n                                (evaluation/split-train-test training-model seed-frac properties)\n                                (update :samples (fn [samples] (map #(assoc % :VEC (context/context-vector % training-model))\n                                                                    samples))))))&quot;, :offset 403, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/set-level! :info)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    10\n                           :max-matches       3000\n                           :reclustering?     true\n                           :vector-fn         #(or (:VEC %) (context/context-vector % training-model))\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)\n                   terminate? (partial terminate? params)]\n               (word2vec/with-word2vec word2vec-db\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics)\n                     (doall)))))&quot;, :offset 1283, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (-&gt; training-sentences\n                                (evaluation/split-train-test training-model seed-frac properties)\n                                (update :samples (fn [samples] (map #(sentence/assign-embedding training-model %)\n                                                                    samples)))\n                                (update :seeds (fn [seeds] (map #(sentence/assign-embedding training-model %)\n                                                                seeds))))))&quot;, :offset 574, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn unit-vec-sum\n  [&amp; vectors]\n  (let [vectors (keep seq vectors)]\n    (cond (not (seq vectors)) nil\n          (= 1 (count vectors)) (uncomplicate/let-release [v (thal-native/dv (first vectors))]\n                                  (unit-vec v))\n          :else (uncomplicate/let-release [vectors (map thal-native/dv vectors)\n                                           v (apply thal/xpy vectors)]\n                  (unit-vec v)))))&quot;, :offset 431, :ns &quot;math&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    10\n                           :max-matches       3000\n                           :reclustering?     true\n                           :vector-fn         #(context/context-vector % training-model)\n                           :factory           thal-native/native-double}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)\n                   terminate? (partial terminate? params)]\n               (word2vec/with-word2vec word2vec-db\n                 (-&gt; split-training-model\n                     (assoc :properties properties)\n                     (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                     (re/bootstrap {:terminate?        terminate?\n                                    :context-match-fn  context-match-fn\n                                    :pattern-update-fn pattern-update-fn})\n                     (evaluation/calc-metrics)\n                     (doall)))))&quot;, :offset 1269, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [uncomplicate-context-alg :as context]\n            [uncomplicate.neanderthal.native :as thal-native]))&quot;, :offset 641, :ns &quot;user&quot;} {:command &quot;(def factory (thal-native/native-double))&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def factory thal-native/native-double)&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2">
        <option name="ToolBeforeRunTask" enabled="true" actionId="Tool_External Tools_Tantor VisualVM" />
      </method>
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" weight="0.18192919" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32864866" />
      <window_info anchor="bottom" id="Run" order="2" visible="true" weight="0.32743362" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" weight="0.36283186" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.26327434" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.50061053" side_tool="true" weight="0.28324324" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2002442" />
      <window_info active="true" anchor="right" x="-1" y="419" width="1602" height="902" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4382622" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Simplified startup. Keep structure conlls in sentences dir" />
    <MESSAGE value="minor fix" />
    <MESSAGE value="Warning to run dependency parser" />
    <MESSAGE value="Simplified assigning of sents, toks, and embeddings" />
    <MESSAGE value="Further simplified sentence creation" />
    <MESSAGE value="Reader for biocreative files" />
    <MESSAGE value="Remove view as model listener After load" />
    <MESSAGE value="Remove view as model listener before load" />
    <MESSAGE value="Added train-test eval fn" />
    <MESSAGE value="Simplified some functions" />
    <MESSAGE value="Updated notebook to match script" />
    <MESSAGE value="Updated knowtator so that it doesn't fire model events during load" />
    <MESSAGE value="Fixes to reading in model" />
    <MESSAGE value="Simplified intro slide" />
    <MESSAGE value="Added save to svg for incanter" />
    <MESSAGE value="Lots of changes adding multiple property matching" />
    <MESSAGE value="Using native vectors for sim finding. Also reclustering" />
    <MESSAGE value="Release native vectors from memory" />
    <MESSAGE value="Minor fixes" />
    <MESSAGE value="Removed uncomplicate dependency" />
    <MESSAGE value="Moved uncomplicate functions to its own ns" />
    <MESSAGE value="Updated deps" />
    <MESSAGE value="Simplified vector math functions" />
    <MESSAGE value="Refactorted logging" />
    <MESSAGE value="Vector operations cannot have nil elements or be empty" />
    <option name="LAST_COMMIT_MESSAGE" value="Vector operations cannot have nil elements or be empty" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="467">
          <caret line="30" column="4" selection-start-line="30" selection-start-column="4" selection-end-line="30" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="7" lean-forward="true" selection-start-line="10" selection-start-column="7" selection-end-line="10" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/potemkin/potemkin/0.4.3/potemkin-0.4.3.jar!/potemkin/namespaces.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="76" column="10" selection-start-line="76" selection-start-column="10" selection-end-line="76" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/parallelcolt/parallelcolt/0.10.1/parallelcolt-0.10.1.jar!/cern/jet/stat/tdouble/DoubleDescriptive.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="207">
          <caret line="43" column="25" selection-start-line="43" selection-start-column="25" selection-end-line="43" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/stats.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-893">
          <caret line="1540" column="27" lean-forward="true" selection-start-line="1540" selection-start-column="27" selection-end-line="1540" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-123">
          <caret line="964" column="19" selection-start-line="964" selection-start-column="19" selection-end-line="964" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="39" column="42" selection-start-line="39" selection-start-column="42" selection-end-line="39" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/Profile.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="75" column="18" selection-start-line="75" selection-start-column="18" selection-end-line="75" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/knowtator/KnowtatorXmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="417">
          <caret line="430" column="29" selection-start-line="430" selection-start-column="29" selection-end-line="430" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/XmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="383">
          <caret line="83" column="51" lean-forward="true" selection-start-line="83" selection-start-column="51" selection-end-line="83" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1584">
          <caret line="36" column="51" selection-start-line="36" selection-start-column="51" selection-end-line="36" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="34" lean-forward="true" selection-start-line="4" selection-start-column="34" selection-end-line="4" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="291">
          <caret line="65" column="6" selection-start-line="65" selection-start-column="6" selection-end-line="65" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/BioCreative 2017 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.cpcache/752262307.cp">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="23" selection-start-line="23" selection-end-line="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="242">
          <caret line="11" column="6" selection-start-line="11" selection-start-column="6" selection-end-line="11" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="128" column="37" lean-forward="true" selection-start-line="128" selection-start-column="37" selection-end-line="128" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="682">
          <caret line="31" column="13" lean-forward="true" selection-start-line="31" selection-start-column="13" selection-end-line="31" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7b5266fd00a7110791812564ff946cabbafa9a7c/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="15" selection-start-line="20" selection-start-column="15" selection-end-line="20" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="335">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="462">
          <caret line="21" column="16" lean-forward="true" selection-start-line="21" selection-start-column="16" selection-end-line="21" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="254">
          <caret line="81" column="115" selection-start-line="81" selection-start-column="115" selection-end-line="81" selection-end-column="115" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="22" column="12" selection-start-line="22" selection-start-column="12" selection-end-line="22" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="9" column="4" selection-start-line="9" selection-start-column="4" selection-end-line="9" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="291">
          <caret line="22" column="32" selection-start-line="22" selection-start-column="32" selection-end-line="22" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="946">
          <caret line="43" column="51" selection-start-line="43" selection-start-column="51" selection-end-line="43" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="588">
          <caret line="33" column="27" lean-forward="true" selection-start-line="18" selection-end-line="37" selection-end-column="43" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="826">
          <caret line="50" column="42" lean-forward="true" selection-start-line="50" selection-start-column="42" selection-end-line="50" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="325">
          <caret line="28" column="19" selection-start-line="28" selection-start-column="19" selection-end-line="28" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="264">
          <caret line="12" column="49" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="70" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/edu/ucdenver/ccp/nlp/relation_extraction/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="175">
          <caret line="23" column="5" lean-forward="true" selection-start-line="23" selection-start-column="5" selection-end-line="23" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="1" column="4" selection-start-line="1" selection-start-column="4" selection-end-line="1" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="16" lean-forward="true" selection-start-line="16" selection-end-line="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="798" selection-start-line="798" selection-end-line="798" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/native.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="308">
          <caret line="14" column="69" selection-start-line="14" selection-start-column="69" selection-end-line="14" selection-end-column="69" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/internal/host/mkl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="4242" column="7" selection-start-line="4242" selection-start-column="7" selection-end-line="4242" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="770">
          <caret line="59" column="38" selection-start-line="59" selection-start-column="38" selection-end-line="59" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.cljx">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/commons/0.7.2/commons-0.7.2.jar!/uncomplicate/commons/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-5">
          <caret line="109" column="10" selection-start-line="109" selection-start-column="10" selection-end-line="109" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/a036390c6a2e6ba86de07bb3eff690992817617a/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="27" column="6" selection-start-line="27" selection-start-column="6" selection-end-line="27" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="66">
          <caret line="3" column="29" selection-start-line="3" selection-start-column="29" selection-end-line="3" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="47" selection-start-line="47" selection-end-line="47" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-198">
          <caret line="15" column="50" lean-forward="true" selection-start-line="15" selection-start-column="50" selection-end-line="15" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="213">
          <caret line="56" column="22" selection-start-line="56" selection-start-column="22" selection-end-line="56" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="171">
          <caret line="61" column="22" selection-start-line="61" selection-start-column="22" selection-end-line="61" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="462">
          <caret line="22" column="19" selection-start-line="22" selection-start-column="19" selection-end-line="22" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="103">
          <caret line="13" column="20" lean-forward="true" selection-start-line="13" selection-start-column="20" selection-end-line="13" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="227">
          <caret line="231" column="52" selection-start-line="231" selection-start-column="52" selection-end-line="231" selection-end-column="52" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Word2Vec-clj</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>