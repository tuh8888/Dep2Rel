<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__com_taoensso_encore_2_91_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__github_tuh8888_hpl_utl_a2b48b.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__github_tuh8888_hpl_utl_e0868a.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__net_jpountz_lz4_lz4_1_3_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__org_apache_commons_commons_lang3_3_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__org_clojure_tools_reader_1_0_0_beta4.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__org_tukaani_xz_1_5.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.rebl/prefs.edn" beforeDir="false" afterPath="$PROJECT_DIR$/.rebl/prefs.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Dep2Rel.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Dep2Rel.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="2745614147" />
        <entry key="$PROJECT_DIR$" value="4663692474000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="4132547199" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3427141421" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="129">
              <caret line="113" column="6" selection-start-line="113" selection-start-column="6" selection-end-line="113" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="129">
              <caret line="105" column="25" selection-start-line="105" selection-start-column="25" selection-end-line="105" selection-end-column="25" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="167">
              <caret line="86" column="37" selection-start-line="86" selection-start-column="37" selection-end-line="86" selection-end-column="37" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="3600" />
    <option name="y" value="34" />
    <option name="width" value="1600" />
    <option name="height" value="896" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../Knowtator-2.0" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
  </component>
  <component name="ReplState" timestamp="1554899845308">{:repl-history {:ide [], :local [{:command &quot;(get-in model [:structure-annotations \&quot;11532191-24797\&quot;])&quot;, :offset 53, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-in (first (vals model)) [:structure-annotations \&quot;11532191-24797\&quot;])&quot;, :offset 21, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-annotations (first (vals model))))&quot;, :offset 7, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get (:structure-annotations (first (vals model))) \&quot;11532192-24797\&quot;)&quot;, :offset 66, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent))))&quot;, :offset 1217, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))&quot;, :offset 817, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.save ^TextSource (first (:textSources (bean annotations))))&quot;, :offset 61, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n&quot;, :offset 1284, :ns &quot;user&quot;} {:command &quot;(.save annotations)&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(k/simple-model annotations)&quot;, :offset 28, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n&quot;, :offset 2376, :ns &quot;user&quot;} {:command &quot;(-&gt; triple :target bean :conceptAnnotation bean :id)&quot;, :offset 52, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-triple\n  [triple]\n  (let [source (-&gt; triple :source bean :conceptAnnotation bean :id)\n        target (-&gt; triple :target bean :conceptAnnotation bean :id)\n        value {:value (or (:property triple) (:value triple))}]\n    [source target value]))&quot;, :offset 258, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n&quot;, :offset 1780, :ns &quot;user&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23990\&quot;))&quot;, :offset 108, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    first)&quot;, :offset 91, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    \&quot;11532192-23988\&quot;)&quot;, :offset 102, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))&quot;, :offset 108, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n&quot;, :offset 2369, :ns &quot;user&quot;} {:command &quot;(bean annotations)&quot;, :offset 17, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (:textSources (bean annotations)))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (:structureGraphSpaces (map bean (:textSources (bean annotations)))))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map :model (map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations))))))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map :relationAnnotations (map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations))))))&quot;, :offset 25, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations)))))&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 2368, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1253, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def ^KnowtatorModel annotations (k/model annotations-file nil))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))&quot;, :offset 340, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 2259, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove (comp nil? first)))))&quot;, :offset 1253, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 594, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (mapcat :sentences (vals model)))&quot;, :offset 48, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 2354, :ns &quot;user&quot;} {:command &quot;(count sentences)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;sentences&quot;, :offset 9, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.readers\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.conll :as conll]\n            [org.clojurenlp.core :as corenlp]\n            [clojure.string :as str])\n  (:import (java.io File)\n           (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource ConceptAnnotation Span GraphSpace AnnotationNode Quantifier RelationAnnotation)))\n\n(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (map\n      (fn [[id title abstract]]\n        (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n          (spit article-f (str title \&quot;\\n\&quot; abstract))\n          (let [text-sources (.getTextSources annotations)\n                text-source (TextSource. annotations\n                                         (io/file (.getAnnotationsLocation annotations)\n                                                  (str id \&quot;.xml\&quot;))\n                                         (.getName article-f))]\n            (.add text-sources\n                  text-source))))\n      lines)))\n\n(defn sentenize\n  [^KnowtatorModel annotations]\n  (into {}\n        (map\n          #(vector (.getId %) (corenlp/sentenize (.getContent %)))\n          (.getTextSources annotations))))\n\n(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property))))))\n\n(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation))))))\n\n(defn article-names-in-dir\n  [dir ext]\n  (-&gt;&gt; (file-seq dir)\n       (filter #(.isFile ^File %))\n       (map #(.getName %))\n       (filter #(s/ends-with? % (str \&quot;.\&quot; ext)))\n       (map #(s/replace % (re-pattern (str \&quot;\\\\.\&quot; ext)) \&quot;\&quot;))))\n\n(defn read-references\n  [articles references-dir]\n  (-&gt;&gt; articles\n       (pmap\n         #(-&gt;&gt; (str % \&quot;.txt\&quot;)\n               (io/file references-dir)\n               (slurp)))\n       (into [])))\n\n(defn assign-embedding\n  [m v embedding-fn]\n  (assoc m :VEC (embedding-fn v)))\n\n\n(defn conll-with-embeddings\n  [k reference f]\n  (mapv\n    (fn [{lemma k :as tok}]\n      (assign-embedding tok\n                        (str/lower-case lemma)\n                        word2vec/word-embedding))\n    (try\n      (conll/read-conll reference true f)\n      (catch Throwable e\n        (println f)\n        (throw e)))))\n\n(defn read-dependency\n  [word2vec-db articles references dependency-dir &amp; {:keys [ext tok-key] :or {tok-key :LEMMA}}]\n  (word2vec/with-word2vec word2vec-db\n    (zipmap articles\n            (-&gt;&gt; articles\n                 (map\n                   #(str % \&quot;.\&quot; ext))\n                 (map\n                   #(io/file dependency-dir %))\n                 (pmap\n                   (partial conll-with-embeddings tok-key)\n                   references)))))\n\n\n&quot;, :offset 5180, :ns &quot;user&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.readers\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.conll :as conll]\n            [org.clojurenlp.core :as corenlp]\n            [word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (java.io File)\n           (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource ConceptAnnotation Span GraphSpace AnnotationNode Quantifier RelationAnnotation)))\n\n(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (map\n      (fn [[id title abstract]]\n        (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n          (spit article-f (str title \&quot;\\n\&quot; abstract))\n          (let [text-sources (.getTextSources annotations)\n                text-source (TextSource. annotations\n                                         (io/file (.getAnnotationsLocation annotations)\n                                                  (str id \&quot;.xml\&quot;))\n                                         (.getName article-f))]\n            (.add text-sources\n                  text-source))))\n      lines)))\n\n(defn sentenize\n  [^KnowtatorModel annotations]\n  (into {}\n        (map\n          #(vector (.getId %) (corenlp/sentenize (.getContent %)))\n          (.getTextSources annotations))))\n\n(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property))))))\n\n(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation))))))\n\n(defn article-names-in-dir\n  [dir ext]\n  (-&gt;&gt; (file-seq dir)\n       (filter #(.isFile ^File %))\n       (map #(.getName %))\n       (filter #(s/ends-with? % (str \&quot;.\&quot; ext)))\n       (map #(s/replace % (re-pattern (str \&quot;\\\\.\&quot; ext)) \&quot;\&quot;))))\n\n(defn read-references\n  [articles references-dir]\n  (-&gt;&gt; articles\n       (pmap\n         #(-&gt;&gt; (str % \&quot;.txt\&quot;)\n               (io/file references-dir)\n               (slurp)))\n       (into [])))\n\n(defn assign-embedding\n  [m v embedding-fn]\n  (assoc m :VEC (embedding-fn v)))\n\n\n(defn conll-with-embeddings\n  [k reference f]\n  (mapv\n    (fn [{lemma k :as tok}]\n      (assign-embedding tok\n                        (str/lower-case lemma)\n                        word2vec/word-embedding))\n    (try\n      (conll/read-conll reference true f)\n      (catch Throwable e\n        (println f)\n        (throw e)))))\n\n(defn read-dependency\n  [word2vec-db articles references dependency-dir &amp; {:keys [ext tok-key] :or {tok-key :LEMMA}}]\n  (word2vec/with-word2vec word2vec-db\n    (zipmap articles\n            (-&gt;&gt; articles\n                 (map\n                   #(str % \&quot;.\&quot; ext))\n                 (map\n                   #(io/file dependency-dir %))\n                 (pmap\n                   (partial conll-with-embeddings tok-key)\n                   references)))))\n\n\n&quot;, :offset 5216, :ns &quot;user&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [word2vec :refer [with-word2vec word-embedding]]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (set1/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))\n\n  (evaluation/format-matches matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (set1/intersection\n                                                  (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 5477, :ns &quot;user&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [word2vec :refer [with-word2vec word-embedding]]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 2340, :ns &quot;user&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (set1/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1831, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [concepts (map :concept entities)\n                          context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence concepts entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove (comp nil? first)))))&quot;, :offset 1321, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def model (with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 585, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (update :concepts\n                            (fn [concepts]\n                              (let [r (k/reasoner annotations)]\n                                (map \n                                  (fn [concept] \n                                    (conj (k/get-owl-descendants r concept) concept)) \n                                     concepts))))))&quot;, :offset 423, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (update :concepts\n                            (fn [concepts]\n                              (let [r (k/reasoner annotations)]\n                                (map\n                                  (fn [concept]\n                                    (conj (k/get-owl-descendants r concept) concept))\n                                     concepts))))))&quot;, :offset 420, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt; (mapcat :sentences (vals model))\n                    (update :concepts\n                            (fn [concepts]\n                              (let [r (k/reasoner annotations)]\n                                (map\n                                  (fn [concept]\n                                    (conj (k/get-owl-descendants r concept) concept))\n                                     concepts))))))&quot;, :offset 419, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (util/map-kv\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (let [r (k/reasoner annotations)]\n                                   (map\n                                     (fn [concept]\n                                       (conj (k/get-owl-descendants r concept) concept))\n                                     concepts)))))))&quot;, :offset 474, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (let [r (k/reasoner annotations)]\n                                   (map\n                                     (fn [concept]\n                                       (conj (k/get-owl-descendants r concept) concept))\n                                     concepts)))))))&quot;, :offset 466, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def mem-descs (memoize k/get-owl-descendants))&quot;, :offset 47, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def mem-descs\n  (memoize\n    (fn [r c]\n      (t/info c)\n      (k/get-owl-descendants r c))))&quot;, :offset 93, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (let [r (k/reasoner annotations)]\n                                   (map\n                                     (fn [concept]\n                                       (conj (mem-descs r concept) concept))\n                                     concepts)))))\n                    (doall)))&quot;, :offset 482, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def reasoner (k/reasoner annotations))&quot;, :offset 39, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (let []\n                                   (map\n                                     (fn [concept]\n                                       (conj (mem-descs concept) concept))\n                                     concepts)))))\n                    (doall)))&quot;, :offset 454, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(conj #{1 2 3} 4)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(defn get-owl-descendants\n  [^OWLReasoner r owlClass]\n  (-&gt; r\n      (.getSubClasses owlClass false)\n      (.getFlattened)))&quot;, :offset 123, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(hash-set 1 2 3 4)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(conj (hash-set 1 2 3 4) 5)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn get-owl-descendants\n  [^OWLReasoner r owlClass]\n  (-&gt; r\n      (.getSubClasses owlClass false)\n      (.getFlattened)\n      (set)))&quot;, :offset 135, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (let [descs (mem-descs concept)]\n                                       (t/info \&quot;hey\&quot;)\n                                       (conj descs concept)))\n                                   concepts))))\n                    (doall)))&quot;, :offset 517, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))&quot;, :offset 98, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))&quot;, :offset 404, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn add-to-pattern\n  [p s]\n  (map-&gt;Pattern {:concepts       (into (set (:concepts p)) (:concepts s))\n                 :context-vector (if (:context-vector p)\n                                   (when-let [vectors (keep :context-vector [p s])]\n                                     (apply (math/unit-vec-sum) vectors))\n                                   (:context-vector s))\n                 :support        (conj (set (:support p)) s)}))&quot;, :offset 437, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn add-to-pattern\n  [p s]\n  (map-&gt;Pattern {:concepts       (into (set (:concepts p)) (:concepts s))\n                 :context-vector (if (:context-vector p)\n                                   (when-let [vectors (seq (keep :context-vector [p s]))]\n                                     (apply (math/unit-vec-sum) vectors))\n                                   (:context-vector s))\n                 :support        (conj (set (:support p)) s)}))&quot;, :offset 443, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn add-to-pattern\n  [p s]\n  (map-&gt;Pattern {:concepts       (into (set (:concepts p)) (:concepts s))\n                 :context-vector (if (:context-vector p)\n                                   (when-let [vectors (seq (keep :context-vector [p s]))]\n                                     (apply math/unit-vec-sum vectors))\n                                   (:context-vector s))\n                 :support        (conj (set (:support p)) s)}))&quot;, :offset 441, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1838, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) \n                                                   :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1890, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       (vals)\n       (mapcat :concept-graphs)\n       (mapcat vals)\n       (map #(ubergraph.core/find-edges % {:value property}))))&quot;, :offset 189, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       (vals)\n       (mapcat :concept-graphs)\n       (map vals)\n       (map #(ubergraph.core/find-edges % {:value property}))))&quot;, :offset 186, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def matches (let [property (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % model property)]\n                                          (assoc % :num-matches (count t)\n                                                   :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1923, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       (vals)\n       (map :concept-graphs)\n       (mapcat vals)\n       (map #(ubergraph.core/find-edges % {:value property}))))&quot;, :offset 186, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       (vals)\n       (map :concept-graphs)\n       (mapcat vals)\n       (map #(ubergraph.core/find-edges % {:value property}))\n       (keep seq)))&quot;, :offset 204, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(k/triples-for-property model (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))&quot;, :offset 88, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObjectProperty)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(k/triples-for-property model (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n&quot;, :offset 1755, :ns &quot;user&quot;} {:command &quot;(do \n  model)&quot;, :offset 13, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)&quot;, :offset 57, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(k/triples-for-property model (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn matched-triples\n  [match model property]\n  (let [triples (k/triples-for-property model property)\n        concept-annotations (into {} (mapcat :concept-annotations (vals model)))]\n    (filter (fn [triple]\n              (let [source (-&gt;&gt; triple\n                                :src\n                                (get concept-annotations))\n                    target (-&gt;&gt; triple\n                                :dest\n                                (get concept-annotations))\n                    triple-anns #{source target}]\n                (= triple-anns (set (map :id (map :ann (:entities match)))))))\n            triples)))&quot;, :offset 632, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       (vals)\n       (map :concept-graphs)\n       (mapcat vals)\n       (mapcat #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 212, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn matched-triples\n  [match model property]\n  (let [triples (k/triples-for-property model property)\n        concept-annotations (into {} (mapcat :concept-annotations (vals model)))]\n    (filter (fn [triple]\n              (let [source (-&gt;&gt; triple\n                                :src\n                                (get concept-annotations)\n                                :id)\n                    target (-&gt;&gt; triple\n                                :dest\n                                (get concept-annotations)\n                                :id)\n                    triple-anns #{source target}]\n                (= triple-anns (set (map :id (map :ann (:entities match)))))))\n            triples)))&quot;, :offset 704, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn matched-triples\n  [match model property]\n  (let [triples (k/triples-for-property model property)\n        concept-annotations (into {} (mapcat :concept-annotations (vals model)))]\n    (filter\n      (fn [triple]\n        (let [source (-&gt;&gt; triple\n                          :src\n                          (get concept-annotations)\n                          :id)\n              target (-&gt;&gt; triple\n                          :dest\n                          (get concept-annotations)\n                          :id)\n              triple-anns #{source target}]\n          (= triple-anns (set (map :id (:entities match))))))\n      triples)))&quot;, :offset 633, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (:doc match)\n               sent (:sent match)\n               context (-&gt;&gt; (:context match))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               source-sent (pprint-sent model sent)\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; source-sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1237, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/format-matches matches)&quot;, :offset 35, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObjectProperty)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % model property)]\n                                          (assoc % :num-matches (count t)\n                                                   :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))\n\n  (evaluation/format-matches model matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (clojure.set/intersection\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 4923, :ns &quot;user&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % model property)]\n                                          (assoc % :num-matches (count t)\n                                                   :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1930, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (let [structure-annotations (-&gt;&gt; model\n                                   vals\n                                   (mapcat :structure-annotations)\n                                   (into {}))]\n    (-&gt;&gt; sent\n         :node-map\n         keys\n         (map #(get structure-annotations %))\n         (map (comp first :spans))\n         (sort-by :start)\n         (map :text )\n         (interpose \&quot; \&quot;)\n         (apply str))))&quot;, :offset 452, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (:doc match)\n               sent (-&gt; match :entities first :sent)\n               context (-&gt;&gt; (:context match))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               source-sent (pprint-sent model sent)\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; source-sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1256, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (let [structure-annotations (-&gt;&gt; model\n                                   vals\n                                   (mapcat :structure-annotations)\n                                   (into {}))]\n    (-&gt;&gt; sent\n         :node-map\n         keys\n         (map #(get structure-annotations %))\n         (map first)\n         (map :spans)\n         (map vals)\n         (sort-by :start)\n         (map :text)\n         (interpose \&quot; \&quot;)\n         (apply str))))&quot;, :offset 479, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (let [structure-annotations (-&gt;&gt; model\n                                   vals\n                                   (mapcat :structure-annotations)\n                                   (into {}))]\n    (-&gt;&gt; sent\n         :node-map\n         keys\n         (map #(get structure-annotations %))\n         (map :spans)\n         (map vals)\n         (map first)\n         (sort-by :start)\n         (map :text)\n         (interpose \&quot; \&quot;)\n         (apply str))))&quot;, :offset 479, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (:doc match)\n               sent (-&gt;&gt; match :entities first :sent\n                         (map (comp keys :node-map))\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1370, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (let [structure-annotations (-&gt;&gt; model\n                                   vals\n                                   (mapcat :structure-annotations)\n                                   (into {}))]\n    (-&gt;&gt; sent\n         (map #(get structure-annotations %))\n         (map :spans)\n         (map vals)\n         (map first)\n         (sort-by :start)\n         (map :text)\n         (interpose \&quot; \&quot;)\n         (apply str))))&quot;, :offset 446, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (let [structure-annotations (-&gt;&gt; model\n                                   vals\n                                   (mapcat :structure-annotations)\n                                   (into {}))]\n    (-&gt;&gt; sent\n         (map #(get structure-annotations %))\n         (map (comp first vals :spans))\n         (sort-by :start)\n         (map :text)\n         (interpose \&quot; \&quot;)\n         (apply str))))&quot;, :offset 423, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (filter #(contains? (:concept-annotations (second %)) \n                                       (-&gt; match\n                                           :entities\n                                           first\n                                           :id)))\n               sent (-&gt;&gt; match :entities first :sent\n                         (map (comp keys :node-map))\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1613, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (first (first (filter #(contains? (:concept-annotations (second %))\n                                               (-&gt; match\n                                                   :entities\n                                                   first\n                                                   :id))\n                                   model)))\n               sent (-&gt;&gt; match :entities first :sent\n                         (map (comp keys :node-map))\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1701, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [doc (some (fn [[id doc]]\n                           (when\n                             (contains? (:concept-annotations doc)\n                                        (-&gt; match\n                                            :entities\n                                            first\n                                            :id))\n                             id))\n                         model)\n               sent (-&gt;&gt; match :entities first :sent\n                         (map (comp keys :node-map))\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               entities (sort-by :concept (:entities match))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map :tok entities)\n               [e1-tok e2-tok] (map :FORM [e1-tok e2-tok])\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1748, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/format-matches model matches)&quot;, :offset 41, :ns &quot;scripts.relation-extraction-script&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REBL">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx8g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="3600" y="34" width="1600" height="896" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.253866" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32939634" />
      <window_info anchor="bottom" id="Debug" order="3" visible="true" weight="0.45526317" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" weight="0.28289473" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21578947" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" weight="0.32939634" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.20167525" />
      <window_info active="true" anchor="right" x="5233" y="463" width="1319" height="649" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4851804" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Many changes" />
    <MESSAGE value="Moved word2vec to new repo" />
    <MESSAGE value="Moved util functions to hpl-util" />
    <option name="LAST_COMMIT_MESSAGE" value="Moved util functions to hpl-util" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(seq sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>sent</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
     :node-map
     keys
     (map #(get structure-annotations %))
     (map :spans)
     (map vals)
     (map first)
     (sort-by :start)
     (map :text)
     (interpose &quot; &quot;)
     (apply str))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
     :node-map
     keys
     (map #(get structure-annotations %))
     (map :spans)
     (map first)
     (map vals)
     (sort-by :start)
     (map :text)
     (interpose &quot; &quot;)
     (apply str))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
         :node-map
         keys
         (map #(get structure-annotations %))
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
         :node-map
         keys
         (map #(get structure-annotations %))
     )</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
         :node-map
         keys
         (map #(get structure-annotations %))
         (map first)
         (map :spans)
         (map vals)
         (sort-by :start)
         (map :text)
         (interpose &quot; &quot;)
         (apply str))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
     :node-map
     keys
     (map #(get structure-annotations %))
     (map (comp first :spans))
     vals
     (sort-by :start))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
     :node-map
     keys
     (map #(get structure-annotations %))
     (map (comp first :spans))
     vals)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; sent
     :node-map
     keys
     (map #(get structure-annotations %))
     (map (comp first :spans))
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/ConceptAnnotation.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="435">
          <caret line="186" lean-forward="true" selection-start-line="186" selection-end-line="186" />
          <folding>
            <element signature="e#6089#6090#0" expanded="true" />
            <element signature="e#6159#6160#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="66" column="16" lean-forward="true" selection-start-line="66" selection-start-column="16" selection-end-line="66" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.3.8.413/org.semanticweb.hermit-1.3.8.413.jar!/org/semanticweb/HermiT/Reasoner.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="161" selection-start-line="161" selection-end-line="161" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="2754" selection-start-line="2754" selection-end-line="2754" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/CRAFT 3.1 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="190" column="11" selection-start-line="190" selection-start-column="11" selection-end-line="190" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="427">
          <caret line="36" column="24" selection-start-line="36" selection-start-column="24" selection-end-line="36" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/uk/ac/manchester/cs/owl/owlapi/OWLClassImpl.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="223" selection-start-line="223" selection-end-line="223" />
          <folding>
            <element signature="e#6261#6262#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="303">
          <caret line="51" column="9" selection-start-line="51" selection-start-column="9" selection-end-line="51" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="561" column="53" lean-forward="true" selection-start-line="561" selection-start-column="53" selection-end-line="561" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="551">
          <caret line="271" column="16" selection-start-line="271" selection-start-column="16" selection-end-line="271" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-85">
          <caret line="39" column="16" selection-start-line="39" selection-start-column="16" selection-end-line="39" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="53" lean-forward="true" selection-start-line="6" selection-start-column="53" selection-end-line="6" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" lean-forward="true" selection-start-line="4" selection-end-line="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="348">
          <caret line="120" column="19" selection-start-line="120" selection-start-column="19" selection-end-line="120" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="101" selection-start-line="6" selection-start-column="101" selection-end-line="6" selection-end-column="101" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-66">
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="85" column="32" lean-forward="true" selection-start-line="85" selection-start-column="32" selection-end-line="85" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-94">
          <caret line="55" column="12" selection-start-line="55" selection-start-column="12" selection-end-line="55" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="167">
          <caret line="86" column="37" selection-start-line="86" selection-start-column="37" selection-end-line="86" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="105" column="25" selection-start-line="105" selection-start-column="25" selection-end-line="105" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="113" column="6" selection-start-line="113" selection-start-column="6" selection-end-line="113" selection-end-column="6" />
        </state>
      </provider>
    </entry>
  </component>
</project>