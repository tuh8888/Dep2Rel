<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__com_googlecode_java_diff_utils_diffutils_1_2_1.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Dep2Rel.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Dep2Rel.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/PITCHME.md" beforeDir="false" afterPath="$PROJECT_DIR$/PITCHME.md" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4674645394000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="595115683" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-287">
              <caret line="20" column="61" selection-start-line="20" selection-start-column="61" selection-end-line="20" selection-end-column="61" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/PITCHME.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
            <state split_layout="SPLIT">
              <first_editor relative-caret-position="242">
                <caret line="17" column="29" lean-forward="true" selection-start-line="17" selection-start-column="29" selection-end-line="17" selection-end-column="29" />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
      <find>loading</find>
      <find>log</find>
      <find>2340</find>
      <find>23402364-T37</find>
      <find>f1</find>
      <find>f1 0.\d+</find>
      <find>context-th</find>
      <find>save</find>
      <find>str</find>
      <find>warn</find>
      <find>pmap</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1920" />
    <option name="y" value="30" />
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/lib" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560113902113">{:repl-history {:ide [], :local [{:command &quot;(.save model)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations model)&quot;, :offset 23, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 501, :ns &quot;user&quot;} {:command &quot;(def model (k/simple-model annotations))\n\n(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1408, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (group-by :doc (:concept-annotations model)))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :doc (:concept-annotations model))))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(type (:concept-annotations model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (:concept-annotations model))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (vals (:concept-annotations model)))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(set (map :doc (vals (:concept-annotations model))))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations model))&quot;, :offset 6, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/display annotations)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))}))&quot;, :offset 2316, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(count (:concept-annotations model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1366, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences (sentence/concept-annotations-&gt;sentences model))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first sentences)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.removeModelListener annotations text-source)\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property)\n             (.addModelListener annotations text-source))))))&quot;, :offset 1885, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(rdr/biocreative-read-relations (.get (.getModel annotations)) relations-file)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))\n\n(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n(rdr/biocreative-read-relations (k/model annotations) relations-file)&quot;, :offset 1084, :ns &quot;user&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (:concept-graphs model))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save (k/model annotations))&quot;, :offset 29, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 466, :ns &quot;user&quot;} {:command &quot;(def structures-annotations-with-embeddings (word2vec/with-word2vec word2vec-db\n                                              (sentence/structures-annotations-with-embeddings model)))&quot;, :offset 183, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model))\n\n(def model (assoc model\n             :concept-annotations concept-annotations-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n(def sentences (sentence/concept-annotations-&gt;sentences model))\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 359, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;}], :remote [{:command &quot;(def sep \&quot;_\&quot;)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def chemprot \&quot;chemprot\&quot;)&quot;, :offset 25, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-string \&quot;training\&quot;)&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-prefix (apply str (interpose sep [chemprot training-string])))&quot;, :offset 76, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))&quot;, :offset 73, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-string \&quot;test\&quot;)&quot;, :offset 27, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def gs-string \&quot;gs\&quot;)&quot;, :offset 20, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-prefix (apply str (interpose sep [chemprot testing-string gs-string])))&quot;, :offset 84, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;testing-prefix&quot;, :offset 14, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-pattern (apply str (interpose sep [chemprot testing-string \&quot;%s\&quot; gs-string])))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;testing-pattern&quot;, :offset 15, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir (io/file biocreative-dir training-prefix))&quot;, :offset 60, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-dir (io/file biocreative-dir testing-prefix))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 54, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]))\n\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def sep \&quot;_\&quot;)\n(def chemprot \&quot;chemprot\&quot;)\n(def training-string \&quot;training\&quot;)\n(def training-prefix (apply str (interpose sep [chemprot training-string])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-string \&quot;test\&quot;)\n(def gs-string \&quot;gs\&quot;)\n(def testing-prefix (apply str (interpose sep [chemprot testing-string gs-string])))\n(def testing-pattern (apply str (interpose sep [chemprot testing-string \&quot;%s\&quot; gs-string])))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n#_(def training-knowtator-view (k/view training-dir))\n(def testing-knowtator-view (k/view testing-dir))\n&quot;, :offset 1521, :ns &quot;user&quot;} {:command &quot;(.save (k/model testing-knowtator-view))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [sentences-dir (-&gt;&gt; \&quot;sentences\&quot;\n                         (format testing-pattern)\n                         (io/file testing-dir))]\n  (doseq [[id content] (rdr/sentenize (k/model testing-knowtator-view))]\n    (log/info id)\n    (let [content (-&gt;&gt; content\n                       (map :text)\n                       (interpose \&quot;\\n\&quot;)\n                       (apply str))\n          sentence-f (io/file sentences-dir (str id \&quot;.txt\&quot;))]\n      (spit sentence-f content))))&quot;, :offset 465, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.io.conll ConllUtil)))&quot;, :offset 643, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.io.conll ConllUtil)))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;; Files\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n&quot;, :offset 1476, :ns &quot;user&quot;} {:command &quot;(defn read-biocreative-files\n  \&quot;Read biocreative files to model. Caches them by saving the model.\n  Only reads in files if the cache is empty.\&quot;\n  [dir pat v]\n  (let [sent-dir (-&gt;&gt; \&quot;sentences\&quot;\n                      (format pat)\n                      (io/file dir))]\n    (when (empty? (file-seq (io/file dir \&quot;Articles\&quot;)))\n      (log/info \&quot;Reading BioCreative abstracts\&quot;)\n      (-&gt;&gt; \&quot;abstracts\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-abstracts (k/model v))))\n    (when (empty? (file-seq sent-dir))\n      (log/info \&quot;Writing abstract sentences to\&quot; (str sent-dir))\n      (doseq [[id content] (rdr/sentenize (k/model v))]\n        (let [content (-&gt;&gt; content\n                           (map :text)\n                           (interpose \&quot;\\n\&quot;)\n                           (apply str))\n              sentence-f (io/file sent-dir (str id \&quot;.txt\&quot;))]\n          (spit sentence-f content)))\n      (println \&quot;Run dependency parser, then continue\&quot;)\n      (read-line))\n    (when (empty? (file-seq (io/file dir \&quot;Annotations\&quot;)))\n      (log/info \&quot;Reading BioCreative entities\&quot;)\n      (-&gt;&gt; \&quot;entities\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-entities (k/model v)))\n      (log/info \&quot;Reading BioCreative relations\&quot;)\n      (-&gt;&gt; \&quot;relations\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-relations (k/model v))))\n    (when (empty? (file-seq (io/file dir \&quot;Structures\&quot;)))\n      (log/info \&quot;Reading BioCreative structures\&quot;)\n      (let [conll-util (ConllUtil.)]\n        (doseq [f (-&gt;&gt; sent-dir\n                       (file-seq)\n                       (filter #(str/ends-with? % \&quot;.conll\&quot;)))]\n          (.readToStructureAnnotations conll-util (k/model v) f))))\n\n    (log/info \&quot;Saving Knowtatomodel\&quot;)\n    (.save ^KnowtatorModel (k/model v))))&quot;, :offset 1861, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn read-biocreative-files\n  \&quot;Read biocreative files to model. Caches them by saving the model.\n  Only reads in files if the cache is empty.\&quot;\n  [dir pat v]\n  (let [sent-dir (-&gt;&gt; \&quot;sentences\&quot;\n                      (format pat)\n                      (io/file dir))]\n    (when (empty? (file-seq (io/file dir \&quot;Articles\&quot;)))\n      (log/info \&quot;Reading BioCreative abstracts\&quot;)\n      (-&gt;&gt; \&quot;abstracts\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-abstracts (k/model v))))\n    (when (empty? (file-seq sent-dir))\n      (log/info \&quot;Writing abstract sentences to\&quot; (str sent-dir))\n      (doseq [[id content] (rdr/sentenize (k/model v))]\n        (let [content (-&gt;&gt; content\n                           (map :text)\n                           (interpose \&quot;\\n\&quot;)\n                           (apply str))\n              sentence-f (io/file sent-dir (str id \&quot;.txt\&quot;))]\n          (spit sentence-f content)))\n      (println \&quot;Run dependency parser, then continue\&quot;)\n      (read-line))\n    (when (empty? (file-seq (io/file dir \&quot;Annotations\&quot;)))\n      (log/info \&quot;Reading BioCreative entities\&quot;)\n      (-&gt;&gt; \&quot;entities\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-entities (k/model v)))\n      (log/info \&quot;Reading BioCreative relations\&quot;)\n      (-&gt;&gt; \&quot;relations\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-relations (k/model v))))\n    (when (empty? (file-seq (io/file dir \&quot;Structures\&quot;)))\n      (log/info \&quot;Reading BioCreative structures\&quot;)\n      (let [conll-util (ConllUtil.)]\n        (doseq [f (-&gt;&gt; sent-dir\n                       (file-seq)\n                       (filter #(str/ends-with? % \&quot;.conll\&quot;)))]\n          (.readToStructureAnnotations conll-util (k/model v) f))))\n\n    (log/info \&quot;Saving Knowtator model\&quot;)\n    (.save ^KnowtatorModel (k/model v))))&quot;, :offset 1863, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(empty? (file-seq (io/file testing-dir \&quot;Annotations\&quot;)))&quot;, :offset 55, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(file-seq (io/file testing-dir \&quot;Annotations\&quot;))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn read-biocreative-files\n  \&quot;Read biocreative files to model. Caches them by saving the model.\n  Only reads in files if the cache is empty.\&quot;\n  [dir pat v]\n  (let [sent-dir (-&gt;&gt; \&quot;sentences\&quot;\n                      (format pat)\n                      (io/file dir))]\n    (when (empty? (rest (file-seq (io/file dir \&quot;Articles\&quot;))))\n      (log/info \&quot;Reading BioCreative abstracts\&quot;)\n      (-&gt;&gt; \&quot;abstracts\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-abstracts (k/model v))))\n    (when  (empty? (rest(file-seq sent-dir)))\n      (log/info \&quot;Writing abstract sentences to\&quot; (str sent-dir))\n      (doseq [[id content] (rdr/sentenize (k/model v))]\n        (let [content (-&gt;&gt; content\n                           (map :text)\n                           (interpose \&quot;\\n\&quot;)\n                           (apply str))\n              sentence-f (io/file sent-dir (str id \&quot;.txt\&quot;))]\n          (spit sentence-f content)))\n      (println \&quot;Run dependency parser, then continue\&quot;)\n      (read-line))\n    (when (empty? (rest (file-seq (io/file dir \&quot;Annotations\&quot;))))\n      (log/info \&quot;Reading BioCreative entities\&quot;)\n      (-&gt;&gt; \&quot;entities\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-entities (k/model v)))\n      (log/info \&quot;Reading BioCreative relations\&quot;)\n      (-&gt;&gt; \&quot;relations\&quot;\n           (format (str pat \&quot;.tsv\&quot;))\n           (io/file dir)\n           (rdr/biocreative-read-relations (k/model v))))\n    (when (empty? (rest (file-seq (io/file dir \&quot;Structures\&quot;))))\n      (log/info \&quot;Reading BioCreative structures\&quot;)\n      (let [conll-util (ConllUtil.)]\n        (doseq [f (-&gt;&gt; sent-dir\n                       (file-seq)\n                       (filter #(str/ends-with? % \&quot;.conll\&quot;)))]\n          (.readToStructureAnnotations conll-util (k/model v) f))))\n\n    (log/info \&quot;Saving Knowtator model\&quot;)\n    (.save ^KnowtatorModel (k/model v))))&quot;, :offset 1891, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(read-biocreative-files testing-dir testing-pattern testing-knowtator-view)&quot;, :offset 75, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.io.conll ConllUtil)))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;; Files\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n;; Reading in models\n#_(def training-knowtator-view (k/view training-dir))\n(def testing-knowtator-view (k/view testing-dir))\n&quot;, :offset 1602, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.io.conll ConllUtil)))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;; Files\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (.getAbsolutePath (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n;; Reading in models\n#_(def training-knowtator-view (k/view training-dir))\n(def testing-knowtator-view (k/view testing-dir))\n\n#_(read-biocreative-files training-dir training-pattern training-knowtator-view)\n(rdr/read-biocreative-files testing-dir testing-pattern testing-knowtator-view)\n&quot;, :offset 1764, :ns &quot;user&quot;} {:command &quot;(def word2vec-db (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/simple-model v)&quot;, :offset 18, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/simple-model testing-knowtator-view)&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(empty? (rest (file-seq (io/file testing-dir \&quot;Annotations\&quot;))))&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/read-biocreative-files testing-dir testing-pattern testing-knowtator-view)&quot;, :offset 79, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;;; FILES ;;;\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n\n;;; MODELS ;;;\n(defn make-model\n  [v]\n  (log/info \&quot;Making model\&quot;)\n  (let [model (as-&gt; (k/simple-model v) model\n                    (update model :structure-annotations util/pmap-kv sentence/assign-word-embedding)\n                    (update model :structure-annotations util/pmap-kv sentence/assign-sent-id model)\n                    (update model :concept-annotations util/pmap-kv sentence/assign-tok model)\n                    (assoc model :sentences (-&gt;&gt; model\n                                                 (sentence/concept-annotations-&gt;sentences)\n                                                 (map #(assoc % :property (evaluation/sent-property model %))))))]\n    (log/info \&quot;Num sentences:\&quot; (count (:sentences model)))\n    model))\n\n(def testing-knowtator-view (k/view testing-dir))&quot;, :offset 2096, :ns &quot;user&quot;} {:command &quot;(:modelListeners (bean (k/model testing-knowtator-view)))&quot;, :offset 57, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (k/model testing-knowtator-view))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-model\n  [v]\n  (log/info \&quot;Making model\&quot;)\n  (let [model (as-&gt; (k/simple-model v) model\n                    (update model :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %))\n                    (update model :structure-annotations #(util/pmap-kv (partial sentence/assign-sent-id model) %))\n                    (update model :concept-annotations #(util/pmap-kv (partial sentence/assign-tok model) %))\n                    (assoc model :sentences (-&gt;&gt; model\n                                                 (sentence/concept-annotations-&gt;sentences)\n                                                 (map #(assoc % :property (evaluation/sent-property model %))))))]\n    (log/info \&quot;Num sentences:\&quot; (count (:sentences model)))\n    model))&quot;, :offset 760, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn assign-word-embedding\n  [{:keys [spans :as annotation]}]\n  (let [{:keys [text]} (first spans)]\n    (assoc annotation :word-vector (-&gt; text\n                                       (str/lower-case)\n                                       (word2vec/word-embedding)))))&quot;, :offset 269, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(first (:concept-annotations m))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:structure-annotations m))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn assign-word-embedding\n  [{:keys [spans :as annotation]}]\n  (let [{:keys [text]} (first (vals spans))]\n    (assoc annotation :word-vector (-&gt; text\n                                       (str/lower-case)\n                                       (word2vec/word-embedding)))))&quot;, :offset 276, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(get-in m [:concept-annotations \&quot;23071106-T55\&quot;])&quot;, :offset 48, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn ann-tok\n  [model {:keys [doc spans] :as ann}]\n  (let [{concept-start :start concept-end :end} (first (vals spans))\n        tok-id (-&gt;&gt; model\n                    :structure-annotations\n                    (vals)\n                    (filter #(= (:doc %) doc))\n                    (reduce\n                      (fn [{old-spans :spans :as old-tok}\n                           {new-spans :spans :as new-tok}]\n                        (let [{old-tok-start :start old-tok-end :end} (first (vals old-spans))\n                              {new-tok-start :start new-tok-end :end} (fist (vals new-spans))]\n                          (cond (&lt;= new-tok-start concept-start concept-end new-tok-end) new-tok\n                                (&lt;= concept-start new-tok-start new-tok-end concept-end) new-tok\n                                (&lt;= old-tok-start concept-start concept-end old-tok-end) old-tok\n                                (&lt;= concept-start old-tok-start old-tok-end concept-end) old-tok\n                                (&lt;= new-tok-start concept-start new-tok-end) new-tok\n                                (&lt;= old-tok-start concept-start old-tok-end) old-tok\n                                :else old-tok)))\n                      nil))]\n    (when-not tok-id (log/warn \&quot;No token found for\&quot; ann))\n    tok-id))&quot;, :offset 1305, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn ann-tok\n  [model {:keys [doc spans] :as ann}]\n  (let [{concept-start :start concept-end :end} (first (vals spans))\n        tok-id (-&gt;&gt; model\n                    :structure-annotations\n                    (vals)\n                    (filter #(= (:doc %) doc))\n                    (reduce\n                      (fn [{old-spans :spans :as old-tok}\n                           {new-spans :spans :as new-tok}]\n                        (let [{old-tok-start :start old-tok-end :end} (first (vals old-spans))\n                              {new-tok-start :start new-tok-end :end} (first (vals new-spans))]\n                          (cond (&lt;= new-tok-start concept-start concept-end new-tok-end) new-tok\n                                (&lt;= concept-start new-tok-start new-tok-end concept-end) new-tok\n                                (&lt;= old-tok-start concept-start concept-end old-tok-end) old-tok\n                                (&lt;= concept-start old-tok-start old-tok-end concept-end) old-tok\n                                (&lt;= new-tok-start concept-start new-tok-end) new-tok\n                                (&lt;= old-tok-start concept-start old-tok-end) old-tok\n                                :else old-tok)))\n                      nil))]\n    (when-not tok-id (log/warn \&quot;No token found for\&quot; ann))\n    tok-id))&quot;, :offset 1306, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn ann-tok\n  [model {:keys [doc spans] :as ann}]\n  (let [{concept-start :start concept-end :end} (first (vals spans))\n        tok-id (-&gt;&gt; model\n                    :structure-annotations\n                    (vals)\n                    (filter #(= (:doc %) doc))\n                    (reduce\n                      (fn [{old-spans :spans :as old-tok} {new-spans :spans :as new-tok}]\n                        (let [{old-tok-start :start old-tok-end :end} (first (vals old-spans))\n                              {new-tok-start :start new-tok-end :end} (first (vals new-spans))]\n                          (cond (&lt;= new-tok-start concept-start concept-end new-tok-end) new-tok\n                                (&lt;= concept-start new-tok-start new-tok-end concept-end) new-tok\n                                (and old-tok (&lt;= old-tok-start concept-start concept-end old-tok-end) old-tok)\n                                (and old-tok (&lt;= concept-start old-tok-start old-tok-end concept-end) old-tok)\n                                (&lt;= new-tok-start concept-start new-tok-end) new-tok\n                                (and old-tok (&lt;= old-tok-start concept-start old-tok-end) old-tok)\n                                :else old-tok)))\n                      nil))]\n    (when-not tok-id (log/warn \&quot;No token found for\&quot; ann))\n    tok-id))&quot;, :offset 1321, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn ann-tok\n  [model {:keys [doc spans] :as ann}]\n  (let [{concept-start :start concept-end :end} (first (vals spans))\n        tok-id (-&gt;&gt; model\n                    :structure-annotations\n                    (vals)\n                    (filter #(= (:doc %) doc))\n                    (reduce\n                      (fn [{old-spans :spans :as old-tok} {new-spans :spans :as new-tok}]\n                        (let [{old-tok-start :start old-tok-end :end} (first (vals old-spans))\n                              {new-tok-start :start new-tok-end :end} (first (vals new-spans))]\n                          (cond (&lt;= new-tok-start concept-start concept-end new-tok-end) new-tok\n                                (&lt;= concept-start new-tok-start new-tok-end concept-end) new-tok\n                                (and old-tok (&lt;= old-tok-start concept-start concept-end old-tok-end)) old-tok\n                                (and old-tok (&lt;= concept-start old-tok-start old-tok-end concept-end)) old-tok\n                                (&lt;= new-tok-start concept-start new-tok-end) new-tok\n                                (and old-tok (&lt;= old-tok-start concept-start old-tok-end)) old-tok\n                                :else old-tok)))\n                      nil))]\n    (when-not tok-id (log/warn \&quot;No token found for\&quot; ann))\n    tok-id))&quot;, :offset 1321, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(sentence/ann-tok m (get-in m [:concept-annotations \&quot;23071106-T55\&quot;]))&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(sentence/ann-tok m (get-in m [:concept-annotations \&quot;14967461-T18\&quot;]))&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(update m :concept-annotations #(util/pmap-kv (partial sentence/assign-tok m) %))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def m1 (update m :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %)))&quot;, :offset 91, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (def m1 (update m :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %))))&quot;, :offset 130, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def m2 (update m1 :concept-annotations #(util/pmap-kv (partial sentence/assign-tok m1) %)))&quot;, :offset 92, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(word2vec/with-word2vec word2vec-db\n  (def m1 (update m :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %)))\n  (def m2 (update m1 :concept-annotations #(util/pmap-kv (partial sentence/assign-tok m1) %))))&quot;, :offset 225, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(sentence/ann-tok m (get-in m [:concept-annotations \&quot;10373451-T35\&quot;]))&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn assign-tok\n  [model ann]\n  (let [{:keys [sent id]} (ann-tok model ann)]\n    (assoc ann :tok id\n               :sent sent\n               :word-vector (-&gt;&gt; ann :spans (keep :text) (mapcat #(str/split % #\&quot; \&quot;) (map word2vec/word-embedding) (apply math/unit-vec-sum))))))&quot;, :offset 272, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn assign-tok\n  [model ann]\n  (let [{:keys [sent id]} (ann-tok model ann)]\n    (assoc ann :tok id\n               :sent sent\n               :word-vector (-&gt;&gt; ann :spans (keep :text) #_(map word2vec/word-embedding) #_(apply math/unit-vec-sum)))))&quot;, :offset 247, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def m (k/simple-model training-knowtator-view))&quot;, :offset 48, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(update m :structure-annotations #(util/pmap-kv (partial sentence/assign-sent-id m) %))&quot;, :offset 87, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn assign-sent-id\n  [model tok]\n  (update tok :sent #(tok-sent-id model %)))&quot;, :offset 79, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn make-model\n  [v]\n  (log/info \&quot;Making model\&quot;)\n  (let [model (as-&gt; (k/simple-model v) model\n                    (update model :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %))\n                    #_(update model :structure-annotations #(util/pmap-kv (partial sentence/assign-sent-id model) %))\n                    (update model :concept-annotations #(util/pmap-kv (partial sentence/assign-tok model) %))\n                    (assoc model :sentences (-&gt;&gt; model\n                                                 (sentence/concept-annotations-&gt;sentences)\n                                                 (map #(assoc % :property (evaluation/sent-property model %))))))]\n    (log/info \&quot;Num sentences:\&quot; (count (:sentences model)))\n    model))&quot;, :offset 762, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (apply concat\n         (pmap\n           (fn [[id g]]\n             (let [sent-annotations (filter #(= id (:sent %)) concept-annotations)]\n               (when (seq sent-annotations)\n                 (let [g (graph/undirected-graph g)]\n                   (for [ann1 sent-annotations\n                         ann2 sent-annotations\n                         :when (not= ann1 ann2)]\n                     (make-sentence model g ann1 ann2))))))\n           structure-graphs)))&quot;, :offset 623, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def testing-knowtator-view (k/view testing-dir))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/read-biocreative-files training-dir training-pattern training-knowtator-view)&quot;, :offset 82, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences  training-model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:concept-annotations  training-model))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations  training-model))&quot;, :offset 48, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first  (:structure-annotations  training-model))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:structure-annotations  training-model))&quot;, :offset 48, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences training-model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:structure-graphs  training-model))&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (-&gt;&gt; structure-graphs\n       (pmap\n         (fn [[id g]]\n           (let [sent-annotations (filter #(= id (:sent %)) concept-annotations)]\n             (when (seq sent-annotations)\n               (log/debug \&quot;Sentence:\&quot; id)\n               (let [g (graph/undirected-graph g)]\n                 (for [ann1 sent-annotations\n                       ann2 sent-annotations\n                       :when (not= ann1 ann2)]\n                   (make-sentence model g ann1 ann2)))))))\n       (apply concat)))&quot;, :offset 649, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(count (:sentences training-mode))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (-&gt;&gt; structure-graphs\n       (pmap\n         (fn [[id g]]\n           (let [sent-annotations (filter #(= id (:sent %)) concept-annotations)]\n             (log/debug \&quot;Sentence:\&quot; id) \n             (when (seq sent-annotations)\n               (let [g (graph/undirected-graph g)]\n                 (for [ann1 sent-annotations\n                       ann2 sent-annotations\n                       :when (not= ann1 ann2)]\n                   (make-sentence model g ann1 ann2)))))))\n       (apply concat)))&quot;, :offset 648, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (-&gt;&gt; structure-graphs\n       (pmap\n         (fn [[id g]]\n           (let [sent-annotations (filter #(= id (:sent %)) concept-annotations)]\n             (when-not (empty? sent-annotations)\n               (log/debug \&quot;Sentence:\&quot; id)\n               (let [g (graph/undirected-graph g)]\n                 (for [ann1 sent-annotations\n                       ann2 sent-annotations\n                       :when (not= ann1 ann2)]\n                   (make-sentence model g ann1 ann2)))))))\n       (apply concat)))&quot;, :offset 656, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (-&gt;&gt; structure-graphs\n       (pmap\n         (fn [[id g]]\n           (log/debug (:sent (first concept-annotations)))\n           (let [sent-annotations (filter #(= id (:sent %)) concept-annotations)]\n             (when-not (empty? sent-annotations)\n               (log/debug \&quot;Sentence:\&quot; id)\n               (let [g (graph/undirected-graph g)]\n                 (for [ann1 sent-annotations\n                       ann2 sent-annotations\n                       :when (not= ann1 ann2)]\n                   (make-sentence model g ann1 ann2)))))))\n       (apply concat)))&quot;, :offset 715, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (log/info \&quot;Making sentences for concept annotations\&quot;)\n  (-&gt;&gt; structure-graphs\n       (pmap\n         (fn [[id g]]\n           (let [sent-annotations (filter #(= id (:sent %)) (vals concept-annotations))]\n             (when (seq sent-annotations)\n               (log/debug \&quot;Sentence:\&quot; id)\n               (let [g (graph/undirected-graph g)]\n                 (for [ann1 sent-annotations\n                       ann2 sent-annotations\n                       :when (not= ann1 ann2)]\n                   (make-sentence model g ann1 ann2)))))))\n       (apply concat)))&quot;, :offset 656, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def training-model1 (assoc training-model :sentences (-&gt;&gt; training-model\n                                                           (sentence/concept-annotations-&gt;sentences)\n                                                           (map #(assoc % :property (evaluation/sent-property training-model %))))))&quot;, :offset 307, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences training-model1))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations  training-model))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn assign-tok\n  [model ann]\n  (let [{:keys [sent id]} (ann-tok model ann)]\n    (assoc ann :tok id\n               :sent sent\n               :word-vector (-&gt;&gt; ann :spans (keep :text) (mapcat #(str/split % #\&quot; \&quot;)) (apply concat) (map word2vec/word-embedding) (apply math/unit-vec-sum)))))&quot;, :offset 287, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn assign-tok\n  [model ann]\n  (let [{:keys [sent id]} (ann-tok model ann)]\n    (assoc ann :tok id\n               :sent sent\n               :word-vector (-&gt;&gt; ann \n                                 :spans\n                                 (keep :text) \n                                 (mapcat #(str/split % #\&quot; \&quot;)) \n                                 (apply concat) \n                                 #_(map word2vec/word-embedding) \n                                 #_(apply math/unit-vec-sum)))))&quot;, :offset 494, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(sentence/assign-tok training-model (first (vals (:concept-annotations  training-model))))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as str]))&quot;, :offset 522, :ns &quot;user&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (keep :text)\n     (mapcat #(str/split % #\&quot; \&quot;))\n     (apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 227, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (keep :text)\n     #_(mapcat #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 231, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     #_(keep :text)\n     #_(mapcat #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 233, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     #_(keep :text)\n     #_(mapcat #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 245, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     (keep :text)\n     #_(mapcat #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 243, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     (keep :text)\n     (mapcat #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 241, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     (keep :text)\n     (mapcat #(str/split % #\&quot; \&quot;))\n     (apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 239, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     (keep :text)\n     (map #(str/split % #\&quot; \&quot;))\n     #_(apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 238, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-model\n     (:concept-annotations)\n     (vals)\n     (first)\n     :spans\n     (vals)\n     (keep :text)\n     (map #(str/split % #\&quot; \&quot;))\n     (apply concat)\n     #_(map word2vec/word-embedding)\n     #_(apply math/unit-vec-sum))&quot;, :offset 236, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; {:id \&quot;8894610-T21\&quot;, :spans {\&quot;8894610-1111224\&quot; {:start 683, :end 699, :text \&quot;(+/-)-tamsulosin\&quot;}}, :concept \&quot;CHEMICAL\&quot;, :doc \&quot;8894610\&quot;}\n     :spans\n     vals\n     (keep :text)\n     (map #(str/split % #\&quot; \&quot;))\n     (apply concat)\n     (map str/lower-case))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-context-vector\n  [dependency-path structure-annotations ann1 ann2]\n  (-&gt; (map #(get-in structure-annotations [% :word-vector]) dependency-path)\n      (conj (:word-vector ann1))\n      (conj (:word-vector ann2))\n      (sum-vectors)))&quot;, :offset 242, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(vec #{1 2})&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(defn make-model\n  [v]\n  (log/info \&quot;Making model\&quot;)\n  (let [model (as-&gt; (k/simple-model v) model\n                    (update model :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %))\n                    (update model :structure-annotations #(util/pmap-kv (partial sentence/assign-sent-id model) %))\n                    (update model :concept-annotations #(util/pmap-kv (partial sentence/assign-tok model) %))\n                    (assoc model :sentences (-&gt;&gt; model\n                                                 (sentence/concept-annotations-&gt;sentences)\n                                                 (map #(assoc % :property (evaluation/sent-property model (vec (:entities %))))))))]\n    (log/info \&quot;Num sentences:\&quot; (count (:sentences model)))\n    model))&quot;, :offset 778, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (word2vec/with-word2vec word2vec-db\n                      (make-model training-knowtator-view)))\n\n(def testing-model (word2vec/with-word2vec word2vec-db\n                     (make-model testing-knowtator-view)))&quot;, :offset 231, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (word2vec/with-word2vec word2vec-db\n                      (make-model training-knowtator-view)))&quot;, :offset 116, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-model (word2vec/with-word2vec word2vec-db\n                     (make-model testing-knowtator-view)))&quot;, :offset 113, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.24642856" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32964602" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32743362" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" weight="0.32079646" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.26438054" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.50061053" side_tool="true" weight="0.28324324" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info active="true" anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" visible="true" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.20119047" />
      <window_info anchor="right" x="-1" y="419" width="1602" height="902" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4382622" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Simple fixes" />
    <MESSAGE value="PCA ar function" />
    <MESSAGE value="Letfn for functions" />
    <MESSAGE value="PCA Evaluation fns" />
    <MESSAGE value="Functions are passed from script to eval script" />
    <MESSAGE value="Use pmap" />
    <MESSAGE value="PCA on clusters" />
    <MESSAGE value="Added termination criteria" />
    <MESSAGE value="Minor changes" />
    <MESSAGE value="Find property for sentence if it exists" />
    <MESSAGE value="Started adding training data" />
    <MESSAGE value="Updated knowtator jar with indent fix" />
    <MESSAGE value="Simplified startup. Keep structure conlls in sentences dir" />
    <MESSAGE value="minor fix" />
    <MESSAGE value="Warning to run dependency parser" />
    <MESSAGE value="Simplified assigning of sents, toks, and embeddings" />
    <MESSAGE value="Further simplified sentence creation" />
    <MESSAGE value="Reader for biocreative files" />
    <MESSAGE value="Remove view as model listener After load" />
    <MESSAGE value="Remove view as model listener before load" />
    <MESSAGE value="Added train-test eval fn" />
    <MESSAGE value="Simplified some functions" />
    <MESSAGE value="Updated notebook to match script" />
    <MESSAGE value="Updated knowtator so that it doesn't fire model events during load" />
    <MESSAGE value="Fixes to reading in model" />
    <option name="LAST_COMMIT_MESSAGE" value="Fixes to reading in model" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/replay_pid6356.log" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/17b59d2ae8bb15cf21b8ccb4c4a605fc5b18871f/src/math.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/github/vlsi/mxgraph/jgraphx/3.9.8.1/jgraphx-3.9.8.1.jar!/com/mxgraph/view/mxGraph.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/TextSource.class" />
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/collection/GraphSpaceCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="166">
          <caret line="46" selection-start-line="46" selection-end-line="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="279">
          <caret line="787" column="46" selection-start-line="787" selection-start-column="46" selection-end-line="787" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="550">
          <caret line="84" selection-start-line="84" selection-end-line="84" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="38" column="33" selection-start-line="38" selection-start-column="33" selection-end-line="38" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/build.boot" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.java" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.form" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="12" column="40" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="14" selection-start-line="8" selection-start-column="14" selection-end-line="8" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="https://github.com/gitpitch/in-60-seconds.git">
      <provider selected="true" editor-type-id="httpFileEditor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/README.md" />
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/PITCHME.md" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1210">
          <caret line="55" column="14" selection-start-line="55" selection-start-column="14" selection-end-line="55" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="467">
          <caret line="30" column="4" selection-start-line="30" selection-start-column="4" selection-end-line="30" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="7" lean-forward="true" selection-start-line="10" selection-start-column="7" selection-end-line="10" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/potemkin/potemkin/0.4.3/potemkin-0.4.3.jar!/potemkin/namespaces.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="76" column="10" selection-start-line="76" selection-start-column="10" selection-end-line="76" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="282">
          <caret line="116" column="57" selection-start-line="116" selection-start-column="57" selection-end-line="116" selection-end-column="57" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/parallelcolt/parallelcolt/0.10.1/parallelcolt-0.10.1.jar!/cern/jet/stat/tdouble/DoubleDescriptive.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="207">
          <caret line="43" column="25" selection-start-line="43" selection-start-column="25" selection-end-line="43" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/stats.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-893">
          <caret line="1540" column="27" lean-forward="true" selection-start-line="1540" selection-start-column="27" selection-end-line="1540" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-123">
          <caret line="964" column="19" selection-start-line="964" selection-start-column="19" selection-end-line="964" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="39" column="42" selection-start-line="39" selection-start-column="42" selection-end-line="39" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/Profile.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="75" column="18" selection-start-line="75" selection-start-column="18" selection-end-line="75" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/knowtator/KnowtatorXmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="417">
          <caret line="430" column="29" selection-start-line="430" selection-start-column="29" selection-end-line="430" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/XmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="383">
          <caret line="83" column="51" lean-forward="true" selection-start-line="83" selection-start-column="51" selection-end-line="83" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1584">
          <caret line="36" column="51" selection-start-line="36" selection-start-column="51" selection-end-line="36" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="34" lean-forward="true" selection-start-line="4" selection-start-column="34" selection-end-line="4" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="291">
          <caret line="65" column="6" selection-start-line="65" selection-start-column="6" selection-end-line="65" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1166">
          <caret line="53" column="6" selection-start-line="53" selection-start-column="6" selection-end-line="53" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/BioCreative 2017 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.cpcache/752262307.cp">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="616">
          <caret line="28" column="27" selection-start-line="28" selection-start-column="27" selection-end-line="28" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="242">
          <caret line="11" column="6" selection-start-line="11" selection-start-column="6" selection-end-line="11" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="412">
          <caret line="46" column="6" selection-start-line="46" selection-start-column="6" selection-end-line="46" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-270">
          <caret line="75" column="23" lean-forward="true" selection-start-line="75" selection-start-column="23" selection-end-line="75" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="128" column="37" lean-forward="true" selection-start-line="128" selection-start-column="37" selection-end-line="128" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="682">
          <caret line="31" column="13" lean-forward="true" selection-start-line="31" selection-start-column="13" selection-end-line="31" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="155" column="16" selection-start-line="155" selection-start-column="16" selection-end-line="155" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="34" selection-start-line="10" selection-start-column="34" selection-end-line="10" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1210">
          <caret line="64" selection-start-line="64" selection-end-line="64" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7b5266fd00a7110791812564ff946cabbafa9a7c/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="15" selection-start-line="20" selection-start-column="15" selection-end-line="20" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-287">
          <caret line="20" column="61" selection-start-line="20" selection-start-column="61" selection-end-line="20" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/PITCHME.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="242">
            <caret line="17" column="29" lean-forward="true" selection-start-line="17" selection-start-column="29" selection-end-line="17" selection-end-column="29" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Dep2Rel</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>