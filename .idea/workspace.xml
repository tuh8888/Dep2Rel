<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="Many changes">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Deps__github_tuh8888_kabob_mops_dc457f.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dictionaries/tuh8888.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dictionaries/tuh8888.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Dep2Rel.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Dep2Rel.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Word2Vec2Clojure/word2vec2clojure.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="2745614147" />
        <entry key="$PROJECT_DIR$" value="4663687991000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="3140928045" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3427141421" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/deps.edn">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="44">
              <caret line="2" lean-forward="true" selection-start-line="2" selection-end-line="2" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
          <provider selected="true" editor-type-id="text-editor" />
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="418">
              <caret line="52" column="4" selection-start-line="52" selection-start-column="4" selection-end-line="52" selection-end-column="4" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="3600" />
    <option name="y" value="34" />
    <option name="width" value="1600" />
    <option name="height" value="896" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../Knowtator-2.0" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
  </component>
  <component name="ReplState" timestamp="1554888032688">{:repl-history {:ide [], :local [{:command &quot;(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (get-in annotation [:spans 0 :text])))))&quot;, :offset 205, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :span\n                                 first\n                                 :text)))))&quot;, :offset 301, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (word2vec/with-word2vec word2vec-db\n             (reduce\n               (fn [model doc]\n                 (update-in model [doc :structure-annotations]\n                            (fn [annotations]\n                              (doall\n                                (map\n                                  assign-word-embedding\n                                  annotations)))))\n               model (keys model))))&quot;, :offset 425, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 first\n                                 :text)))))&quot;, :offset 302, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(:structure-graphs model)&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/set-level! :debug)&quot;, :offset 21, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))&quot;, :offset 85, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))&quot;, :offset 53, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])&quot;, :offset 74, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-graphs model))&quot;, :offset 7, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-annotations model))&quot;, :offset 30, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;model&quot;, :offset 5, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-annotations (first model)))&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(keys (first model))&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(keys model)&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-graphs (first (vals model))))&quot;, :offset 7, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (word2vec/with-word2vec word2vec-db\n             (reduce\n               (fn [model doc]\n                 (update-in model [doc :structure-annotations]\n                            (fn [annotations]\n                              (doall\n                                (map\n                                  assign-word-embedding\n                                  (vals annotations))))))\n               model (keys model))))&quot;, :offset 432, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (let [model (k/simple-model annotations)] \n             (word2vec/with-word2vec word2vec-db\n              (reduce\n                (fn [model doc]\n                  (update-in model [doc :structure-annotations]\n                             (fn [annotations]\n                               (doall\n                                 (map\n                                   assign-word-embedding\n                                   (vals annotations))))))\n                model (keys model)))))&quot;, :offset 498, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences\n  (sentence/make-sentences model))&quot;, :offset 49, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn annotation-&gt;entity\n  [model ann]\n  (let [concept-start (get-in ann [:spans 0 :start])\n        concept-end (get-in ann [:spans 0 :end])]\n    (some\n      (fn [tok]\n        (let [tok-start (-&gt; tok :spans first :start)\n              tok-end (-&gt; tok :spans first :end)]\n          (when (or (&lt;= tok-start concept-start concept-end tok-end)\n                    (&lt;= concept-start tok-start tok-end concept-end))\n            tok)))\n      (:structure-annotations model))))&quot;, :offset 468, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count (:sentences sentence-model)))&quot;, :offset 61, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (:sentences sentence-model))&quot;, :offset 35, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(keys sentence-model)&quot;, :offset 6, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (:sentences (first sentence-model)))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(keys (first sentence-model))&quot;, :offset 6, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(keys (first (vals sentence-model)))&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (keys sentence-model))&quot;, :offset 12, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count (:sentences (first sentence-model))))&quot;, :offset 69, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (vals sentence-model))&quot;, :offset 29, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (group-by :sent (vals (:concept-annotations (first (vals model))))))&quot;, :offset 75, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (group-by :sent (vals (:concept-annotations (first (vals sentence-model))))))&quot;, :offset 84, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (uber-alg/shortest-path sent (:id e1) (:id e2))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (group-by :sent (vals (:concept-annotations model)))))&quot;, :offset 749, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def sentence-model\n  (sentence/make-sentences model))&quot;, :offset 54, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count (:sentences (first (vals sentence-model)))))&quot;, :offset 76, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count (:sentences (first (vals model)))))&quot;, :offset 67, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn sentences-with-ann\n  [sentences id]\n  (filter (fn [s]\n            (some (fn [e]\n                    (= id (:id e)))\n                  (get s :entities)))\n          sentences))&quot;, :offset 181, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (set1/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1831, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                   seeds (set1/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [t (evaluation/matched-triples % annotations property)]\n                                        (assoc % :num-matches (count t) :triples t))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               matches))&quot;, :offset 1781, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)))&quot;, :offset 753, :ns &quot;user&quot;} {:command &quot;(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (update-in model [doc :structure-annotations]\n                                  (fn [annotations]\n                                    (doall\n                                      (map\n                                        assign-word-embedding\n                                        (vals annotations))))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1667, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (update-in model [doc :structure-annotations]\n                                  (fn [annotations]\n                                    (doall\n                                      (map\n                                        assign-word-embedding\n                                        (vals annotations))))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 2421, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (uber-alg/shortest-path (ubergraph.core/multigraph sent) \n                                                        (-&gt; e1 :tok :id) \n                                                        (-&gt; e2 :tok :id))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 972, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (uber-alg/shortest-path (apply ubergraph.core/multigraph (loom.graph/edges sent))\n                                                        (-&gt; e1 :tok :id)\n                                                        (-&gt; e2 :tok :id))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 995, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn undirected-graph\n  [g]\n  (apply ubergraph.core/multigraph\n         (map #(vector (loom.graph/src %)\n                       (loom.graph/dest %))\n              (loom.graph/edges g))))&quot;, :offset 187, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (ubergraph.alg/shortest-path\n                                  (undirected-graph sent)\n                                  (-&gt; e1 :tok :id)\n                                  (-&gt; e2 :tok :id))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 956, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (-&gt; (undirected-graph sent)\n                                    (ubergraph.alg/shortest-path\n                                      (-&gt; e1 :tok :id)\n                                      (-&gt; e2 :tok :id))\n                                    (ubergraph.alg/nodes-in-path))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (map #(get (:concept-annotations model) %))\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1144, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;y&quot;, :offset 1, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (-&gt; (undirected-graph sent)\n                                    (ubergraph.alg/shortest-path\n                                      (-&gt; e1 :tok :id)\n                                      (-&gt; e2 :tok :id))\n                                    (ubergraph.alg/nodes-in-path))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (map #(filter (fn [ann]\n                                                                               (= (-&gt; ann :tok :id))) \n                                                                             (:concept-annotations model)))\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1335, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (-&gt; (undirected-graph sent)\n                                    (ubergraph.alg/shortest-path\n                                      (-&gt; e1 :tok :id)\n                                      (-&gt; e2 :tok :id))\n                                    (ubergraph.alg/nodes-in-path))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (map #(filter (fn [ann]\n                                                                               (= (-&gt; ann :tok :id)))\n                                                                             (:concept-annotations model)))\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1334, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (map\n                (fn [[e1 e2 :as entities]]\n                  (let [context (-&gt; (undirected-graph sent)\n                                    (ubergraph.alg/shortest-path\n                                      (-&gt; e1 :tok :id)\n                                      (-&gt; e2 :tok :id))\n                                    (ubergraph.alg/nodes-in-path))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (map #(get (:structure-annotations model) %))\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1146, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (update-in model [doc :structure-annotations]\n                                  (fn [annotations]\n                                    (doall\n                                      (map\n                                        assign-word-embedding\n                                        (vals annotations))))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 607, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn annotation-&gt;entity\n  [model ann]\n  (let [concept-start (-&gt; ann :spans vals first :start)\n        concept-end (-&gt; ann :spans vals first :end)]\n    (some\n      (fn [tok]\n        (let [tok-start (-&gt; tok :spans vals first :start)\n              tok-end (-&gt; tok :spans vals first :end)]\n          (when (or (&lt;= tok-start concept-start concept-end tok-end)\n                    (&lt;= concept-start tok-start tok-end concept-end))\n            tok)))\n      (vals (:structure-annotations model)))))&quot;, :offset 491, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2)))\n                  (let [context (-&gt; (undirected-graph sent)\n                                    (ubergraph.alg/shortest-path\n                                      (-&gt; e1 :tok :id)\n                                      (-&gt; e2 :tok :id))\n                                    (ubergraph.alg/nodes-in-path))\n                        context-vector (when-let [vectors (-&gt;&gt; context\n                                                               (map #(get (:structure-annotations model) %))\n                                                               (keep :VEC)\n                                                               (seq))]\n                                         (apply unit-vec-sum vectors))]\n                    (-&gt;Sentence entities context context-vector)))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1231, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(get-in model [:structure-annotations \&quot;11532191-24797\&quot;])&quot;, :offset 53, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get-in (first (vals model)) [:structure-annotations \&quot;11532191-24797\&quot;])&quot;, :offset 21, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (:structure-annotations (first (vals model))))&quot;, :offset 7, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get (:structure-annotations (first (vals model))) \&quot;11532192-24797\&quot;)&quot;, :offset 66, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent))))&quot;, :offset 1217, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))&quot;, :offset 817, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(.save ^TextSource (first (:textSources (bean annotations))))&quot;, :offset 61, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n&quot;, :offset 1284, :ns &quot;user&quot;} {:command &quot;(.save annotations)&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(k/simple-model annotations)&quot;, :offset 28, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n&quot;, :offset 2376, :ns &quot;user&quot;} {:command &quot;(-&gt; triple :target bean :conceptAnnotation bean :id)&quot;, :offset 52, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-triple\n  [triple]\n  (let [source (-&gt; triple :source bean :conceptAnnotation bean :id)\n        target (-&gt; triple :target bean :conceptAnnotation bean :id)\n        value {:value (or (:property triple) (:value triple))}]\n    [source target value]))&quot;, :offset 258, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObject)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n&quot;, :offset 1780, :ns &quot;user&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23990\&quot;))&quot;, :offset 108, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    first)&quot;, :offset 91, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    \&quot;11532192-23988\&quot;)&quot;, :offset 102, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))&quot;, :offset 108, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n&quot;, :offset 2369, :ns &quot;user&quot;} {:command &quot;(bean annotations)&quot;, :offset 17, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (:textSources (bean annotations)))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (:structureGraphSpaces (map bean (:textSources (bean annotations)))))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map :model (map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations))))))&quot;, :offset 10, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map :relationAnnotations (map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations))))))&quot;, :offset 25, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map bean (mapcat :structureGraphSpaces (map bean (:textSources (bean annotations)))))&quot;, :offset 0, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(-&gt; annotations\n    k/simple-model\n    vals\n    first\n    :structure-annotations\n    (get \&quot;11532192-23988\&quot;))\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 2368, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove #(nil? (first %))))))&quot;, :offset 1253, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def ^KnowtatorModel annotations (k/model annotations-file nil))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))&quot;, :offset 340, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 2259, :ns &quot;user&quot;} {:command &quot;(defn entities-&gt;sentences\n  [model]\n  (reduce\n    (fn [model [sent sentence-entities]]\n      (update model :sentences into\n              (keep\n                (fn [[e1 e2 :as entities]]\n                  (when-not (= (:tok e1)\n                               (:tok e2))\n                    (let [context (-&gt; (undirected-graph sent)\n                                      (ubergraph.alg/shortest-path\n                                        (-&gt; e1 :tok :id)\n                                        (-&gt; e2 :tok :id))\n                                      (ubergraph.alg/nodes-in-path))\n                          context-vector (when-let [vectors (-&gt;&gt; context\n                                                                 (map #(get (:structure-annotations model) %))\n                                                                 (keep :VEC)\n                                                                 (seq))]\n                                           (apply unit-vec-sum vectors))]\n                      (-&gt;Sentence entities context context-vector))))\n                (combo/combinations sentence-entities 2))))\n    model\n    (-&gt;&gt; model\n         :concept-annotations\n         vals\n         (group-by :sent)\n         (remove (comp nil? first)))))&quot;, :offset 1253, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))&quot;, :offset 594, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (mapcat :sentences (vals model)))&quot;, :offset 48, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word2vec/word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (word2vec/with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 2354, :ns &quot;user&quot;} {:command &quot;(count sentences)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;sentences&quot;, :offset 9, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [word2vec :refer [with-word2vec word-embedding]]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 2340, :ns &quot;user&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.readers\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.conll :as conll]\n            [org.clojurenlp.core :as corenlp]\n            [clojure.string :as str])\n  (:import (java.io File)\n           (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource ConceptAnnotation Span GraphSpace AnnotationNode Quantifier RelationAnnotation)))\n\n(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (map\n      (fn [[id title abstract]]\n        (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n          (spit article-f (str title \&quot;\\n\&quot; abstract))\n          (let [text-sources (.getTextSources annotations)\n                text-source (TextSource. annotations\n                                         (io/file (.getAnnotationsLocation annotations)\n                                                  (str id \&quot;.xml\&quot;))\n                                         (.getName article-f))]\n            (.add text-sources\n                  text-source))))\n      lines)))\n\n(defn sentenize\n  [^KnowtatorModel annotations]\n  (into {}\n        (map\n          #(vector (.getId %) (corenlp/sentenize (.getContent %)))\n          (.getTextSources annotations))))\n\n(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property))))))\n\n(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation))))))\n\n(defn article-names-in-dir\n  [dir ext]\n  (-&gt;&gt; (file-seq dir)\n       (filter #(.isFile ^File %))\n       (map #(.getName %))\n       (filter #(s/ends-with? % (str \&quot;.\&quot; ext)))\n       (map #(s/replace % (re-pattern (str \&quot;\\\\.\&quot; ext)) \&quot;\&quot;))))\n\n(defn read-references\n  [articles references-dir]\n  (-&gt;&gt; articles\n       (pmap\n         #(-&gt;&gt; (str % \&quot;.txt\&quot;)\n               (io/file references-dir)\n               (slurp)))\n       (into [])))\n\n(defn assign-embedding\n  [m v embedding-fn]\n  (assoc m :VEC (embedding-fn v)))\n\n\n(defn conll-with-embeddings\n  [k reference f]\n  (mapv\n    (fn [{lemma k :as tok}]\n      (assign-embedding tok\n                        (str/lower-case lemma)\n                        word2vec/word-embedding))\n    (try\n      (conll/read-conll reference true f)\n      (catch Throwable e\n        (println f)\n        (throw e)))))\n\n(defn read-dependency\n  [word2vec-db articles references dependency-dir &amp; {:keys [ext tok-key] :or {tok-key :LEMMA}}]\n  (word2vec/with-word2vec word2vec-db\n    (zipmap articles\n            (-&gt;&gt; articles\n                 (map\n                   #(str % \&quot;.\&quot; ext))\n                 (map\n                   #(io/file dependency-dir %))\n                 (pmap\n                   (partial conll-with-embeddings tok-key)\n                   references)))))\n\n\n&quot;, :offset 5180, :ns &quot;user&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.readers\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.conll :as conll]\n            [org.clojurenlp.core :as corenlp]\n            [word2vec :as word2vec]\n            [clojure.string :as str])\n  (:import (java.io File)\n           (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object TextSource ConceptAnnotation Span GraphSpace AnnotationNode Quantifier RelationAnnotation)))\n\n(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (map\n      (fn [[id title abstract]]\n        (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n          (spit article-f (str title \&quot;\\n\&quot; abstract))\n          (let [text-sources (.getTextSources annotations)\n                text-source (TextSource. annotations\n                                         (io/file (.getAnnotationsLocation annotations)\n                                                  (str id \&quot;.xml\&quot;))\n                                         (.getName article-f))]\n            (.add text-sources\n                  text-source))))\n      lines)))\n\n(defn sentenize\n  [^KnowtatorModel annotations]\n  (into {}\n        (map\n          #(vector (.getId %) (corenlp/sentenize (.getContent %)))\n          (.getTextSources annotations))))\n\n(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property))))))\n\n(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation))))))\n\n(defn article-names-in-dir\n  [dir ext]\n  (-&gt;&gt; (file-seq dir)\n       (filter #(.isFile ^File %))\n       (map #(.getName %))\n       (filter #(s/ends-with? % (str \&quot;.\&quot; ext)))\n       (map #(s/replace % (re-pattern (str \&quot;\\\\.\&quot; ext)) \&quot;\&quot;))))\n\n(defn read-references\n  [articles references-dir]\n  (-&gt;&gt; articles\n       (pmap\n         #(-&gt;&gt; (str % \&quot;.txt\&quot;)\n               (io/file references-dir)\n               (slurp)))\n       (into [])))\n\n(defn assign-embedding\n  [m v embedding-fn]\n  (assoc m :VEC (embedding-fn v)))\n\n\n(defn conll-with-embeddings\n  [k reference f]\n  (mapv\n    (fn [{lemma k :as tok}]\n      (assign-embedding tok\n                        (str/lower-case lemma)\n                        word2vec/word-embedding))\n    (try\n      (conll/read-conll reference true f)\n      (catch Throwable e\n        (println f)\n        (throw e)))))\n\n(defn read-dependency\n  [word2vec-db articles references dependency-dir &amp; {:keys [ext tok-key] :or {tok-key :LEMMA}}]\n  (word2vec/with-word2vec word2vec-db\n    (zipmap articles\n            (-&gt;&gt; articles\n                 (map\n                   #(str % \&quot;.\&quot; ext))\n                 (map\n                   #(io/file dependency-dir %))\n                 (pmap\n                   (partial conll-with-embeddings tok-key)\n                   references)))))\n\n\n&quot;, :offset 5216, :ns &quot;user&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.clustering :refer [single-pass-cluster]]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [util :refer [cosine-sim]]\n            [clojure.set :as set1]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [word2vec :refer [with-word2vec word-embedding]]\n            [clojure.string :as str])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot;))\n\n\n(def references-dir\n  (io/file craft-dir \&quot;Articles\&quot;))\n(def articles\n  [(first (rdr/article-names-in-dir references-dir \&quot;txt\&quot;))])\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(defn assign-word-embedding\n  [annotation]\n  (assoc annotation :VEC (word-embedding\n                           (str/lower-case\n                             (-&gt; annotation\n                                 :spans\n                                 vals\n                                 first\n                                 :text)))))\n\n(def model (with-word2vec word2vec-db\n             (let [model (k/simple-model annotations)]\n              (-&gt;&gt; (keys model)\n                   (reduce\n                     (fn [model doc]\n                       (reduce\n                         (fn [model ann]\n                           (update-in model [doc :structure-annotations ann]\n                                      assign-word-embedding))\n                         model\n                         (keys (get-in model [doc :structure-annotations]))))\n                     model)\n                   (sentence/make-sentences)))))\n\n(def sentences (mapcat :sentences (vals model)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (set1/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))\n\n  (evaluation/format-matches matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (set1/intersection\n                                                  (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (get-sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 5477, :ns &quot;user&quot;} {:command &quot;(def matches (let [property \&quot;has_location_in\&quot;\n                     seeds (set1/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % annotations property)]\n                                          (assoc % :num-matches (count t) :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1831, :ns &quot;scripts.relation-extraction-script&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REBL">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx8g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="3600" y="34" width="1600" height="896" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.253866" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32939634" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.38057742" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" weight="0.28289473" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21578947" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" weight="0.32939634" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.49440715" weight="0.20167525" />
      <window_info anchor="right" x="5200" y="465" width="1319" height="649" id="REPL" order="11" sideWeight="0.5055928" side_tool="true" visible="true" weight="0.39884022" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Many changes" />
    <option name="LAST_COMMIT_MESSAGE" value="Many changes" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint type="java-line">
          <condition expression="(nil? context)" language="Clojure" />
          <url>file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj</url>
          <line>92</line>
          <properties />
          <option name="timeStamp" value="55" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(:relationAnnotations graph-space)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(ubergraph.core/viz-graph
  (apply ubergraph.core/multigraph
        (map #(vector (loom.graph/src %)
                      (loom.graph/dest %))
             (loom.graph/edges sent))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(apply ubergraph.core/multigraph
         (map #(vector (loom.graph/src %)
                       (loom.graph/dest %))
              (loom.graph/edges sent)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq (loom.graph/edges sent))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(undirected-graph sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt; (undirected-graph sent)
    (ubergraph.alg/shortest-path
      (-&gt; e1 :tok :id)
      (-&gt; e2 :tok :id)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt; (undirected-graph sent)
                                      (ubergraph.alg/shortest-path
                                        (-&gt; e1 :tok :id)
                                        (-&gt; e2 :tok :id))
    )</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt; (undirected-graph sent)
                                      (ubergraph.alg/shortest-path
                                        (-&gt; e1 :tok :id)
                                        (-&gt; e2 :tok :id))
                                      (ubergraph.alg/nodes-in-path))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get-in model [:structure-annotations (first context)])</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/ConceptAnnotation.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="435">
          <caret line="186" lean-forward="true" selection-start-line="186" selection-end-line="186" />
          <folding>
            <element signature="e#6089#6090#0" expanded="true" />
            <element signature="e#6159#6160#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="66" column="16" lean-forward="true" selection-start-line="66" selection-start-column="16" selection-end-line="66" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.3.8.413/org.semanticweb.hermit-1.3.8.413.jar!/org/semanticweb/HermiT/Reasoner.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="161" selection-start-line="161" selection-end-line="161" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="2754" selection-start-line="2754" selection-end-line="2754" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/CRAFT 3.1 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="190" column="11" selection-start-line="190" selection-start-column="11" selection-end-line="190" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="427">
          <caret line="36" column="24" selection-start-line="36" selection-start-column="24" selection-end-line="36" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/uk/ac/manchester/cs/owl/owlapi/OWLClassImpl.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="223" selection-start-line="223" selection-end-line="223" />
          <folding>
            <element signature="e#6261#6262#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="303">
          <caret line="51" column="9" selection-start-line="51" selection-start-column="9" selection-end-line="51" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="561" column="53" lean-forward="true" selection-start-line="561" selection-start-column="53" selection-end-line="561" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="551">
          <caret line="271" column="16" selection-start-line="271" selection-start-column="16" selection-end-line="271" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-85">
          <caret line="39" column="16" selection-start-line="39" selection-start-column="16" selection-end-line="39" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="6" selection-start-line="20" selection-start-column="6" selection-end-line="20" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="277">
          <caret line="83" column="12" selection-start-line="83" selection-start-column="12" selection-end-line="83" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="53" lean-forward="true" selection-start-line="6" selection-start-column="53" selection-end-line="6" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="260">
          <caret line="43" column="30" selection-start-line="43" selection-start-column="30" selection-end-line="43" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" lean-forward="true" selection-start-line="2" selection-end-line="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" lean-forward="true" selection-start-line="10" selection-end-line="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="9" column="13" lean-forward="true" selection-start-line="9" selection-start-column="13" selection-end-line="9" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="418">
          <caret line="52" column="4" selection-start-line="52" selection-start-column="4" selection-end-line="52" selection-end-column="4" />
        </state>
      </provider>
    </entry>
  </component>
</project>