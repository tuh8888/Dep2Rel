<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="2745614147" />
        <entry key="$PROJECT_DIR$" value="4663692474000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="4132547199" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3427141421" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="129">
              <caret line="80" column="6" selection-start-line="80" selection-start-column="6" selection-end-line="80" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="129">
              <caret line="101" selection-start-line="101" selection-end-line="101" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="129">
              <caret line="117" column="6" selection-start-line="117" selection-start-column="6" selection-end-line="117" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="220">
              <caret line="31" column="21" selection-start-line="31" selection-start-column="21" selection-end-line="31" selection-end-column="21" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="3600" />
    <option name="y" value="34" />
    <option name="width" value="1600" />
    <option name="height" value="896" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes />
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../Knowtator-2.0" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
  </component>
  <component name="ReplState" timestamp="1554908443899">{:repl-history {:ide [], :local [{:command &quot;(evaluation/format-matches model matches)&quot;, :offset 41, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [t (evaluation/matched-triples % model property)]\n                                          (assoc % :num-matches (count t)\n                                                   :triples t))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 1930, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn matched-triples\n  [match model triples]\n  (let [concept-annotations (into {} (mapcat :concept-annotations (vals model)))]\n    (filter\n      (fn [triple]\n        (let [source (-&gt;&gt; triple\n                          :src\n                          (get concept-annotations)\n                          :id)\n              target (-&gt;&gt; triple\n                          :dest\n                          (get concept-annotations)\n                          :id)\n              triple-anns #{source target}]\n          (= triple-anns (set (map :id (:entities match))))))\n      triples)))&quot;, :offset 576, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [triples (k/triples-for-property model property)\n                                              matched (evaluation/matched-triples % model triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched\n                                                   :possible-triples triples))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 matches))&quot;, :offset 2118, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                     seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.8\n                     context-thresh 0.9\n                     cluster-thresh 0.75\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [triples (k/triples-for-property model property)\n                                              matched (evaluation/matched-triples % model triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched\n                                                   :possible-triples triples))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Possible triples matches\&quot; (count (:possible-triples matches)))\n                 matches))&quot;, :offset 2207, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def  property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))&quot;, :offset 80, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [triples (k/triples-for-property model property)\n                                            matched (evaluation/matched-triples % model triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples matches\&quot; (count (:possible-triples matches)))\n               matches))&quot;, :offset 2149, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [triples (k/triples-for-property model property)\n                                            matched (evaluation/matched-triples % model triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count (map :possible-triples matches)))\n               matches))&quot;, :offset 2145, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [triples (k/triples-for-property model property)\n                                            matched (evaluation/matched-triples % model triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count (distinct (mapcat :possible-triples matches))))\n               matches))&quot;, :offset 2159, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [triples (k/triples-for-property model property)\n                                            matched (evaluation/matched-triples % model triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count (mapcat :possible-triples matches)))\n               matches))&quot;, :offset 2148, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (k/triples-for-property model property)\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (evaluation/matched-triples % model possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               matches))&quot;, :offset 2132, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn calc-metrics\n  [predicted-true actual-true all]\n  (let [predicted-false (clojure.set/difference all predicted-true)\n        actual-false (clojure.set/difference all actual-true)\n        tp (count (clojure.set/intersection predicted-true actual-true))\n        tn (count (clojure.set/intersection predicted-false actual-false))\n        fp (count (clojure.set/intersection predicted-true actual-false))\n        fn (count (clojure.set/intersection predicted-false actual-true))\n        precision (/ tp (+ tp fp))\n        recall (/ tp (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))]\n    {:tp tp\n     :tn tn\n     :fn fn\n     :fp fp\n     :precision precision\n     :recall recall\n     :f1 f1}))&quot;, :offset 729, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (k/triples-for-property model property)\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (evaluation/matched-triples % model possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               (let [metrics (evaluation/calc-metrics (map #(map :id (:entities %)) matches) possible-triples (map #(map :id (:entities %)) sentences))]\n                 (t/info \&quot;Metrics\&quot; metrics))\n               matches))&quot;, :offset 2330, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (k/triples-for-property model property)\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (evaluation/matched-triples % model possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               (let [metrics (evaluation/calc-metrics (set (map #(map :id (:entities %)) matches)) (set possible-triples) (set (map #(map :id (:entities %)) sentences)))]\n                 (t/info \&quot;Metrics\&quot; metrics))\n               matches))&quot;, :offset 2348, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn match-&gt;triple\n  [match]\n  (map :id (:entities match)))&quot;, :offset 60, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn sent-&gt;triple\n  [match]\n  (map :id (:entities match)))&quot;, :offset 59, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (map edge-&gt;triple (k/triples-for-property model property))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (evaluation/matched-triples % model possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               (let [metrics (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences)))]\n                 (t/info \&quot;Metrics\&quot; metrics))\n               matches))&quot;, :offset 2343, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (evaluation/matched-triples % model possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               (let [metrics (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences)))]\n                 (t/info \&quot;Metrics\&quot; metrics))\n               matches))&quot;, :offset 2354, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn sent-&gt;triple\n  [match]\n  (set (map :id (:entities match))))&quot;, :offset 65, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn edge-&gt;triple\n  [model edge]\n  (let [concept-annotations (into {} (mapcat :concept-annotations (vals model)))\n        source (-&gt;&gt; edge\n                    :src\n                    (get concept-annotations)\n                    :id)\n        target (-&gt;&gt; edge\n                    :dest\n                    (get concept-annotations)\n                    :id)]\n    #{source target}))&quot;, :offset 381, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;))\n                   possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property))\n                   seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched\n                                                 :possible-triples possible-triples))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Possible triples\&quot; (count possible-triples))\n               (let [metrics (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences)))]\n                 (t/info \&quot;Metrics\&quot; metrics))\n               matches))&quot;, :offset 2532, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               matches))&quot;, :offset 1989, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(let [metrics (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences)))]\n  (t/info \&quot;Metrics\&quot; metrics))&quot;, :offset 161, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Metrics\&quot; metrics)&quot;, :offset 26, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def metrics (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))&quot;, :offset 130, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))&quot;, :offset 147, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def metrics (c-metrics matches))&quot;, :offset 33, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn calc-metrics\n  [predicted-true actual-true all]\n  (let [predicted-false (clojure.set/difference all predicted-true)\n        actual-false (clojure.set/difference all actual-true)\n        tp (count (clojure.set/intersection predicted-true actual-true))\n        tn (count (clojure.set/intersection predicted-false actual-false))\n        fp (count (clojure.set/intersection predicted-true actual-false))\n        fn (count (clojure.set/intersection predicted-false actual-true))\n        precision (float (/ tp (+ tp fp)))\n        recall (float (/ tp (+ tp fn)))\n        f1 (float (/ (* 2 precision recall)\n                     (+ precision recall)))]\n    {:tp        tp\n     :tn        tn\n     :fn        fn\n     :fp        fp\n     :precision precision\n     :recall    recall\n     :f1        f1}))&quot;, :offset 798, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 30\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.8\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.95\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2044, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.99\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2044, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.95\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 20\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2044, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.95\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 5\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 5\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2042, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.95\n                   context-thresh 0.9\n                   cluster-thresh 0.75\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2044, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.95\n                   context-thresh 0.9\n                   cluster-thresh 0.85\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2044, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.95\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.85\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2043, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                           (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                   seed-thresh 0.9\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn add-to-pattern\n                           :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params))\n                                (map #(let [matched (filter\n                                                      (fn [triple]\n                                                        (= triple (sent-&gt;triple %)))\n                                                      possible-triples)]\n                                        (assoc % :num-matches (count matched)\n                                                 :triples matched))))]\n               (t/info \&quot;Final matches:\&quot; (count matches))\n               (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 2042, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObjectProperty)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions\&quot; #_\&quot;concepts+assertions_1_article\&quot;))\n\n\n(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  (defn sent-&gt;triple\n    [match]\n    (set (map :id (:entities match))))\n\n  (defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (into {} (mapcat :concept-annotations (vals model)))\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))\n\n\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))\n  (def possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property)))\n\n  (defn c-metrics\n    [matches]\n    (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))\n\n  (def matches (let [seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))\n\n  (def metrics (c-metrics matches))\n\n  (t/info \&quot;Metrics\&quot; metrics)\n\n  (evaluation/format-matches model matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches model)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (clojure.set/intersection\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 6004, :ns &quot;user&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (org.semanticweb.owlapi.model OWLObjectProperty)))&quot;, :offset 471, :ns &quot;user&quot;} {:command &quot;(t/set-level! :debug)&quot;, :offset 21, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions\&quot; #_\&quot;concepts+assertions_1_article\&quot;))&quot;, :offset 109, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations-file\n  (io/file craft-dir \&quot;concepts+assertions.knowtator\&quot;))&quot;, :offset 76, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations-file\n  (io/file craft-dir \&quot;CRAFT_assertions.knowtator\&quot;))&quot;, :offset 73, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def ^KnowtatorModel annotations (k/model annotations-file nil))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))]\n    {:structure-annotations (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1615, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def craft-dir\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_64\&quot; #_\&quot;concepts+assertions_1_article\&quot;))\n\n\n(def annotations-file\n  (io/file craft-dir \&quot;CRAFT_assertions.knowtator\&quot;))\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  (defn sent-&gt;triple\n    [match]\n    (set (map :id (:entities match))))\n\n  (defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (into {} (mapcat :concept-annotations (vals model)))\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))\n\n\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))\n  (def possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property)))\n\n  (defn c-metrics\n    [matches]\n    (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))\n\n  (def matches (let [seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))\n\n  (def metrics (c-metrics matches))\n\n  (t/info \&quot;Metrics\&quot; metrics)\n\n  (evaluation/format-matches model matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches model)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (clojure.set/intersection\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 5944, :ns &quot;user&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1710, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1715, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (mapcat\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1707, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(update % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1698, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (map\n                              (fn [[id doc]]\n                                (map \n                                  #(assoc % :doc id) \n                                     (simple-collection (:structureAnnotations doc)\n                                                    simple-concept-annotation)))\n                              text-sources)\n     :concept-annotations   (map\n                              (fn [[id doc]]\n                                (map\n                                  #(assoc % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (map\n                              (fn [[id doc]]\n                                (map\n                                  #(assoc % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (map\n                              (fn [[id doc]]\n                                (map\n                                  #(assoc % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1666, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(assoc % :doc id)\n                                  (simple-collection (:conceptAnnotations doc)\n                                                     simple-concept-annotation)))\n                              text-sources)\n     :concept-graphs        (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(assoc % :doc id)\n                                  (simple-collection (:graphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)\n     :structure-graphs      (map\n                              (fn [[id doc]]\n                                (util/map-kv\n                                  #(assoc % :doc id)\n                                  (simple-collection (:structureGraphSpaces doc)\n                                                     simple-graph-space)))\n                              text-sources)}))&quot;, :offset 1785, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space)))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space)))\n                                     text-sources))}))&quot;, :offset 2058, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn make-sentences\n  [model]\n  (-&gt;&gt; model\n       \n       (update model :structure-annotations\n               (fn [structure-annotations]\n                 (util/map-kv assign-word-embedding\n                              structure-annotations)))\n       annotations-&gt;entities\n       entities-&gt;sentences))&quot;, :offset 303, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(defn make-sentences\n  [model]\n  (-&gt; model\n      (update :structure-annotations\n              (fn [structure-annotations]\n                (util/map-kv assign-word-embedding\n                             structure-annotations)))\n      annotations-&gt;entities\n      entities-&gt;sentences))&quot;, :offset 282, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))&quot;, :offset 109, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def reasoner (k/reasoner annotations))&quot;, :offset 39, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))&quot;, :offset 98, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; (mapcat :sentences (vals model))\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))&quot;, :offset 404, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt; model \n                    :sentences\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))&quot;, :offset 409, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn format-matches\n  [model matches]\n  (map (fn [match]\n         (let [[e1 e2 :as entities] (:entities match)\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (:sent e1)\n                         :node-map\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map #(.getShortForm (.getIRI %))))\n               [e1-ann e2-ann] (map :id (map :ann entities))\n               [e1-tok e2-tok] (map (comp :text first vals :spans :tok) entities)\n               seed (-&gt;&gt; (get-in match [:seed :entities])\n                         (map :concept)\n                         (map #(.getShortForm (.getIRI %)))\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            ;;:e1-ann        e1-ann\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            ;;:e2-ann        e2-ann\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)\n            }))\n       matches))&quot;, :offset 1391, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn sent-&gt;triple\n    [match]\n    (set (map :id (:entities match))))&quot;, :offset 69, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (into {} (mapcat :concept-annotations (vals model)))\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))&quot;, :offset 403, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn c-metrics\n    [matches]\n    (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))&quot;, :offset 151, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (into {} (:concept-annotations model))\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))&quot;, :offset 389, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (:concept-annotations model)\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))&quot;, :offset 379, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       (mapcat vals)\n       (mapcat #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 192, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))&quot;, :offset 79, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       vals\n       (map #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 180, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       (map #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 168, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       (map vals)\n       (mapcat #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 189, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       (mapcat vals)\n       (map #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 189, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(k/triples-for-property model property)&quot;, :offset 39, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn triples-for-property\n  [model property]\n  (-&gt;&gt; model\n       :concept-graphs\n       vals\n       (mapcat #(ubergraph.core/find-edges % {:value property}))\n       (keep identity)))&quot;, :offset 183, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(def possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property)))&quot;, :offset 92, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;possible-triples&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :refer :all]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))\n(t/set-level! :debug)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def annotations-file\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_1_article\&quot; \&quot;concepts+assertions.knowtator\&quot;))\n\n#_(def annotations-file\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions_64\&quot; \&quot;CRAFT_assertions.knowtator\&quot; ))\n\n(def ^KnowtatorModel annotations (k/model annotations-file nil))\n\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def sentences (-&gt;&gt; model\n                    :sentences\n                    (map\n                      #(update % :concepts\n                               (fn [concepts]\n                                 (map\n                                   (fn [concept]\n                                     (conj (mem-descs concept) concept))\n                                   concepts))))\n                    (doall)))\n\n(t/info \&quot;Num sentences:\&quot; (count sentences))\n\n(comment\n  (defn sent-&gt;triple\n    [match]\n    (set (map :id (:entities match))))\n\n  (defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (:concept-annotations model)\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))\n\n\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))\n  (def possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property)))\n\n  (defn c-metrics\n    [matches]\n    (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))\n\n  (def matches (let [seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))\n\n  (def metrics (c-metrics matches))\n\n  (t/info \&quot;Metrics\&quot; metrics)\n\n  (evaluation/format-matches model matches)\n  (evaluation/to-csv (io/file \&quot;.\&quot; \&quot;matches.csv\&quot;) matches model)\n\n  (def param-results (evaluation/parameter-walk annotations\n                                                \&quot;has_location_in\&quot;\n                                                (clojure.set/intersection\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                                                  (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                                                sentences))\n\n  (def p2 (map last (partition 4 param-results)))\n  (def p3 (map (fn [[a b c d]] [a b c (count d) (reduce + (map :num-matches d))]) (partition 4 param-results)))\n\n  (count param-results)\n  (let [f (io/file \&quot;.\&quot; \&quot;params.csv\&quot;)\n        p p3\n        col-names [:seed-thresh :cluster-thresh :min-support :count :num-matches]\n        csv-form (str (apply str col-names) \&quot;\\n\&quot;\n                      (apply str\n                             (map\n                               #(str (apply str (interpose \&quot;,\&quot; %)) \&quot;\\n\&quot;)\n                               p3)))]\n    (spit f csv-form)))\n\n\n\n\n\n\n&quot;, :offset 5980, :ns &quot;user&quot;} {:command &quot;(defn sent-&gt;triple\n    [match]\n    (set (map :id (:entities match))))\n\n  (defn edge-&gt;triple\n    [model edge]\n    (let [concept-annotations (:concept-annotations model)\n          source (-&gt;&gt; edge\n                      :src\n                      (get concept-annotations)\n                      :id)\n          target (-&gt;&gt; edge\n                      :dest\n                      (get concept-annotations)\n                      :id)]\n      #{source target}))\n\n\n  ;(k/display annotations)\n  ;(k/selected-annotation annotations)\n\n  ;; Mutation located in gene\n  (def property (.get (.getOwlObjectPropertyById annotations \&quot;has_location_in\&quot;)))\n  (def possible-triples (map #(edge-&gt;triple model %) (k/triples-for-property model property)))\n\n  (defn c-metrics\n    [matches]\n    (evaluation/calc-metrics (set (map sent-&gt;triple matches)) (set possible-triples) (set (map sent-&gt;triple sentences))))\n&quot;, :offset 884, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/intersection\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                             (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2100, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(set (mapcat :triples matches))&quot;, :offset 31, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(clojure.set/difference possible-triples (set (mapcat :triples matches)))&quot;, :offset 73, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(clojure.set/difference (set possible-triples) (set (mapcat :triples matches)))&quot;, :offset 79, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2438, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2434, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.9\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2434, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.9\n                     context-thresh 0.95\n                     cluster-thresh 0.9\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.9\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2436, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.95\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 20\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.95\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.96\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.99\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.98\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2435, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (into\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21741\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21947\&quot;)))\n                             (clojure.set/intersection\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21945\&quot;))\n                               (set (sentence/sentences-with-ann sentences \&quot;CRAFT_aggregate_ontology_Instance_21819\&quot;))))\n                     seed-thresh 0.975\n                     context-thresh 0.9\n                     cluster-thresh 0.9\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn add-to-pattern\n                             :cluster-match-fn #(let [score (context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params))\n                                  (map #(let [matched (filter\n                                                        (fn [triple]\n                                                          (= triple (sent-&gt;triple %)))\n                                                        possible-triples)]\n                                          (assoc % :num-matches (count matched)\n                                                   :triples matched))))]\n                 (t/info \&quot;Final matches:\&quot; (count matches))\n                 (t/info \&quot;Triples matched\&quot; (count (distinct (mapcat :triples matches))))\n                 (t/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 2436, :ns &quot;scripts.relation-extraction-script&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for Dep2Rel">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx8g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="3600" y="34" width="1600" height="896" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.253866" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32939634" />
      <window_info anchor="bottom" id="Debug" order="3" visible="true" weight="0.45526317" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" weight="0.28289473" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21578947" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" weight="0.32939634" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.20167525" />
      <window_info active="true" anchor="right" x="5228" y="463" width="1332" height="649" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4851804" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Many changes" />
    <MESSAGE value="Moved word2vec to new repo" />
    <MESSAGE value="Moved util functions to hpl-util" />
    <MESSAGE value="Fixed evaluation to fit new model" />
    <option name="LAST_COMMIT_MESSAGE" value="Fixed evaluation to fit new model" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     (map vals)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     (mapcat vals)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     (mapcat vals))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     )</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
       :concept-graphs
       (mapcat vals)
       (map #(ubergraph.core/find-edges % {:value property}))
       (keep identity)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
       :concept-graphs
       (mapcat vals)
       (map #(ubergraph.core/find-edges % {:value property}))
       (keep identity))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq (first (vals model)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(vals model)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(util/map-kv seq model)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/ConceptAnnotation.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="435">
          <caret line="186" lean-forward="true" selection-start-line="186" selection-end-line="186" />
          <folding>
            <element signature="e#6089#6090#0" expanded="true" />
            <element signature="e#6159#6160#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="66" column="16" lean-forward="true" selection-start-line="66" selection-start-column="16" selection-end-line="66" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.3.8.413/org.semanticweb.hermit-1.3.8.413.jar!/org/semanticweb/HermiT/Reasoner.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="161" selection-start-line="161" selection-end-line="161" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="2754" selection-start-line="2754" selection-end-line="2754" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/CRAFT 3.1 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="190" column="11" selection-start-line="190" selection-start-column="11" selection-end-line="190" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="427">
          <caret line="36" column="24" selection-start-line="36" selection-start-column="24" selection-end-line="36" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/uk/ac/manchester/cs/owl/owlapi/OWLClassImpl.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="223" selection-start-line="223" selection-end-line="223" />
          <folding>
            <element signature="e#6261#6262#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="561" column="53" lean-forward="true" selection-start-line="561" selection-start-column="53" selection-end-line="561" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="551">
          <caret line="271" column="16" selection-start-line="271" selection-start-column="16" selection-end-line="271" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-85">
          <caret line="39" column="16" selection-start-line="39" selection-start-column="16" selection-end-line="39" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="53" lean-forward="true" selection-start-line="6" selection-start-column="53" selection-end-line="6" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/util.clj" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="348">
          <caret line="120" column="19" selection-start-line="120" selection-start-column="19" selection-end-line="120" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="101" selection-start-line="6" selection-start-column="101" selection-end-line="6" selection-end-column="101" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-66">
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-94">
          <caret line="55" column="12" selection-start-line="55" selection-start-column="12" selection-end-line="55" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="101" selection-start-line="101" selection-end-line="101" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/SocketInputStream.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="92" column="23" selection-start-line="92" selection-start-column="23" selection-end-line="92" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="2293" column="23" selection-start-line="2293" selection-start-column="23" selection-end-line="2293" selection-end-column="23" />
          <folding>
            <element signature="e#89922#89923#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/PlainSocketImpl.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="144" lean-forward="true" selection-start-line="144" selection-end-line="144" />
          <folding>
            <element signature="e#3816#3817#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="5" lean-forward="true" selection-start-line="8" selection-start-column="5" selection-end-line="8" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="80" column="6" selection-start-line="80" selection-start-column="6" selection-end-line="80" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="117" column="6" selection-start-line="117" selection-start-column="6" selection-end-line="117" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="31" column="21" selection-start-line="31" selection-start-column="21" selection-end-line="31" selection-end-column="21" />
        </state>
      </provider>
    </entry>
  </component>
</project>