<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="1741300601" />
        <entry key="$PROJECT_DIR$" value="4664411231000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="3934898756" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3427141421" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/deps.edn">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="88">
              <caret line="4" column="98" selection-start-line="4" selection-start-column="98" selection-end-line="4" selection-end-column="98" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="277">
              <caret line="99" lean-forward="true" selection-start-line="99" selection-end-line="99" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1386">
              <caret line="63" column="27" lean-forward="true" selection-start-line="63" selection-start-column="27" selection-end-line="63" selection-end-column="27" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="421">
              <caret line="109" column="44" selection-start-line="109" selection-start-column="44" selection-end-line="109" selection-end-column="44" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="3600" />
    <option name="y" value="34" />
    <option name="width" value="1600" />
    <option name="height" value="896" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="scripts" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$USER_HOME$/.boot/profile.boot" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="restartRequiresConfirmation" value="false" />
  </component>
  <component name="ReplState" timestamp="1555124551488">{:repl-history {:ide [], :local [{:command &quot;(+ 1 319537 6)&quot;, :offset 14, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (clojure.set/intersection (math/true-neg {:predicted-true (predicted-true matches)\n                                           :actual-true    actual-true\n                                           :all            all-triples})\n                           actual-true))&quot;, :offset 274, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(cont actual-true)&quot;, :offset 18, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(+ (count (predicted-true matches))\n   (count (math/false-neg {:predicted-true (predicted-true matches)\n                           :actual-true    actual-true\n                           :all            all-triples})))&quot;, :offset 217, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def params {:predicted-true (predicted-true matches)\n             :actual-true    actual-true\n             :all            all-triples})&quot;, :offset 137, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(+ (count (predicted-true matches))\n   (count (math/false-neg params)))&quot;, :offset 71, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count actual-true)&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count matches)&quot;, :offset 15, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first all-triples)&quot;, :offset 18, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (predicted-true matches))&quot;, :offset 32, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (clojure.set/intersection (math/pred-false params)\n                           actual-true))&quot;, :offset 98, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (math/pred-false params))&quot;, :offset 32, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(clojure.set/difference all-triples (predicted-true matches))&quot;, :offset 61, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (clojure.set/difference all-triples (predicted-true matches)))&quot;, :offset 69, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (clojure.set/difference actual-true (clojure.set/difference all-triples (predicted-true matches))))&quot;, :offset 106, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (clojure.set/difference actual-true all-triples))&quot;, :offset 56, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count actual-true-triples)&quot;, :offset 27, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (set actual-true))&quot;, :offset 11} {:command &quot;actual-true-triples&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first (clojure.set/difference actual-true actual-true-triples))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;((first (first actual-true)) (:concept-annotations model))&quot;, :offset 58, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(get (:concept-annotations model) (first (first actual-true)))&quot;, :offset 62, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(contains? (set actual-true-sentences) (get (:concept-annotations model) (first (first actual-true))))&quot;, :offset 102, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(contains? sentences (get (:concept-annotations model) (first (first actual-true))))&quot;, :offset 84, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(contains? (set sentences) (get (:concept-annotations model) (first (first actual-true))))&quot;, :offset 90, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(contains? (:entities %) (first (first actual-true)))\n      sentences)&quot;, :offset 77, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(contains? (set (:entities %)) (first (first actual-true)))\n      sentences)&quot;, :offset 83, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(contains? (set (:entities %)) (get (:concept-annotations model) (first (first actual-true))))\n      sentences)&quot;, :offset 118, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(contains? (set (map :id (:entities %))) (:id (get (:concept-annotations model) (first (first actual-true)))))\n      sentences)&quot;, :offset 134, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(= (set (map :id (:entities %))) (:id (get (:concept-annotations model) (first actual-true))))\n      sentences)&quot;, :offset 118, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some #(= (set (map :id (:entities %))) (first actual-true))\n      sentences)&quot;, :offset 77, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some \n  (fn [sent] \n    (= (set (:entities sent)) \n       (map \n         #(get (:concept-annotations model) %) \n         (first actual-true))))\n      sentences)&quot;, :offset 161, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map \n         #(get (:concept-annotations model) %) \n         (first actual-true))&quot;, :offset 83, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count (remove nil? (map\n                 #(get (:concept-annotations model) %)\n                 (first actual-true))))&quot;, :offset 119, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(some\n  (fn [sent]\n    (= (set (:entities sent))\n       (map\n         #(get (:concept-annotations model) %)\n         (first actual-true))))\n      sentences)&quot;, :offset 156, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(map\n         #(get (:concept-annotations model) %)\n         (first actual-true))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model\n  (word2vec/with-word2vec word2vec-db\n    (sentence/make-sentences (k/simple-model annotations))))&quot;, :offset 109, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(let [[[tok1 :tok :as e1] [tok2 :tok :as e2] :as entities] [{:tok 1} {:tok 2}]]\n  (println tok1 tok2 e1 e2 entities))&quot;, :offset 115, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(let [[{tok1 :tok :as e1} {tok2 :tok :as e2} :as entities] [{:tok 1} {:tok 2}]]\n  (println tok1 tok2 e1 e2 entities))&quot;, :offset 27, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (pmap sentence/assign-word-embedding\n                  (vals (:structure-annotations model))))))&quot;, :offset 246, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(ns scripts.relation-extraction-script\n  (:require [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as t]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)))&quot;, :offset 406, :ns &quot;user&quot;} {:command &quot;(t/set-level! :debug)&quot;, :offset 21, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations-file\n  (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions1\&quot; \&quot;CRAFT_assertions.knowtator\&quot;))&quot;, :offset 112, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (map\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (-&gt; model\n                   (assoc % :tok tok-id)\n                   (assoc % :sent sent-id)))\n            (vals (:concept-annotations model)))))&quot;, :offset 373, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences\n                   concepts-with-toks\n                   structures-annotations-with-embeddings)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))&quot;, :offset 497, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (update model\n                    :concept-annotations concepts-with-toks\n                    :structure-annotations structures-annotations-with-embeddings\n                    :sentences sentences))&quot;, :offset 209, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(second sentences)&quot;, :offset 7, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn tok-sent-id\n  [model tok-id]\n  (some\n    (fn [[id sent]]\n      (when (get-in sent [:node-map tok-id])\n        id))\n    (:structure-graphs model)))&quot;, :offset 152, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(first concepts-with-toks)&quot;, :offset 26, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences\n                   concepts-with-toks\n                   structures-annotations-with-embeddings)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))\n                            ))))&quot;, :offset 526, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (update model\n                   :concept-annotations concepts-with-toks\n                   :structure-annotations structures-annotations-with-embeddings))&quot;, :offset 166, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))\n                            ))))&quot;, :offset 436, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations] :as model}]\n  (mapcat\n    (fn [[sent entities]]\n      (sentence-entities model sent entities))\n    (-&gt;&gt; concept-annotations\n         vals\n         (group-by :sent)\n         (remove (comp nil? first)))))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def actual-true-sentences (filter #(actual-true (set (map :id (:entities %)))) sentences))&quot;, :offset 91, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count sentences)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(count actual-true-sentences)&quot;, :offset 28, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first sentences\n       )&quot;, :offset 24, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first sentences)&quot;, :offset 16, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(first actual-true-triples)&quot;, :offset 26, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn sent-&gt;triple\n  [match]\n  (set (:entities match)))&quot;, :offset 55, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(count (clojure.set/difference actual-true actual-true-triples))&quot;, :offset 64, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations-file\n    (io/file home-dir \&quot;craft-versions\&quot; \&quot;concepts+assertions64\&quot; \&quot;CRAFT_assertions.knowtator\&quot;))&quot;, :offset 115, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def annotations (k/view annotations-file))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                   (vals (:structure-annotations model)))))))&quot;, :offset 269, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (map\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))&quot;, :offset 338, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))&quot;, :offset 339, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def reasoner (k/reasoner annotations))&quot;, :offset 39, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def mem-descs\n  (memoize\n    (fn [c]\n      (t/info c)\n      (k/get-owl-descendants reasoner c))))&quot;, :offset 98, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (assoc model\n                   :concept-annotations concepts-with-toks\n                   :structure-annotations structures-annotations-with-embeddings))&quot;, :offset 165, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations] :as model}]\n  (mapcat\n    (fn [[sent entities]]\n      (log/info sent)\n      (sentence-entities model sent entities))\n    (-&gt;&gt; concept-annotations\n         vals\n         (group-by :sent)\n         (remove (comp nil? first)))))&quot;, :offset 293, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))&quot;, :offset 407, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(t/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 43, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def model (assoc model :sentences sentences))&quot;, :offset 46, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def property (.get (.getOwlObjectPropertyById ^KnowtatorModel (k/model annotations) \&quot;exists_at_or_derives_from\&quot;)))&quot;, :offset 115, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 63, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn predicted-true\n  [matches]\n  (set (map evaluation/sent-&gt;triple matches)))&quot;, :offset 79, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 193, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def actual-true-sentences (filter #(actual-true (set (:entities %))) sentences))&quot;, :offset 81, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def actual-true-triples (map evaluation/sent-&gt;triple actual-true-sentences))&quot;, :offset 77, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn make-seeds\n  [e1 e2]\n  (clojure.set/intersection\n    (set (sentence/sentences-with-ann sentences e1))\n    (set (sentence/sentences-with-ann sentences e2))))&quot;, :offset 162, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(defn sentences-with-ann\n  [sentences id]\n  (filter\n    (fn [s]\n      (some\n        (fn [e]\n          (= id e))\n        (:entities s)))\n    sentences))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.sentence&quot;} {:command &quot;(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)&quot;, :offset 135, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.99\n                   context-thresh 0.99\n                   cluster-thresh 0.99\n                   min-support 10\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1914, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.99\n                   context-thresh 0.99\n                   cluster-thresh 0.99\n                   min-support 3\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.99\n                   context-thresh 0.99\n                   cluster-thresh 0.95\n                   min-support 3\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.99\n                   context-thresh 0.95\n                   cluster-thresh 0.99\n                   min-support 3\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.99\n                   context-thresh 0.95\n                   cluster-thresh 0.99\n                   min-support 2\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.95\n                   context-thresh 0.95\n                   cluster-thresh 0.99\n                   min-support 2\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.95\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 2\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.5\n                   context-thresh 0.5\n                   cluster-thresh 0.5\n                   min-support 1\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1910, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.75\n                   context-thresh 0.75\n                   cluster-thresh 0.75\n                   min-support 1\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.85\n                   context-thresh 0.85\n                   cluster-thresh 0.85\n                   min-support 1\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.9\n                   context-thresh 0.9\n                   cluster-thresh 0.9\n                   min-support 1\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1910, :ns &quot;scripts.relation-extraction-script&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                           (make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21471\&quot;\n                                       \&quot;CRAFT_aggregate_ontology_Instance_21917\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21999\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21895\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21583\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_21881\&quot;)\n                           #_(make-seeds \&quot;CRAFT_aggregate_ontology_Instance_21437\&quot;\n                                         \&quot;CRAFT_aggregate_ontology_Instance_22305\&quot;))\n                   seed-thresh 0.95\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 1\n                   params {:seed             (first seeds)\n                           :seed-thresh      seed-thresh\n                           :context-thresh   context-thresh\n                           :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                   (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                           :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                           :cluster-merge-fn re/add-to-pattern\n                           :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                (and (&lt; (or %3 cluster-thresh) score)\n                                                     score))\n                           :min-support      min-support}\n                   matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                (map #(merge % params)))]\n               (t/info \&quot;Metrics\&quot; (c-metrics matches))\n               matches))&quot;, :offset 1913, :ns &quot;scripts.relation-extraction-script&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL for Dep2Rel">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="ToolWindowManager">
    <frame x="3600" y="34" width="1600" height="896" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.253866" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32894737" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.33026317" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" visible="true" weight="0.30526316" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21578947" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" weight="0.32939634" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32894737" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.20167525" />
      <window_info active="true" anchor="right" x="5209" y="465" width="1332" height="649" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4851804" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Many changes" />
    <MESSAGE value="Moved word2vec to new repo" />
    <MESSAGE value="Moved util functions to hpl-util" />
    <MESSAGE value="Fixed evaluation to fit new model" />
    <MESSAGE value="Simple model is now even more simple" />
    <MESSAGE value="Minor fixes and refactorings" />
    <MESSAGE value="Improvements on transforming model" />
    <MESSAGE value="Moved clustering to hpl-util" />
    <MESSAGE value="Fixed some requires" />
    <MESSAGE value="Moved rebl alias out of deps" />
    <MESSAGE value="Removed kabob-mops as dep" />
    <MESSAGE value="Simplified use of model. Use ids to reference other structures" />
    <option name="LAST_COMMIT_MESSAGE" value="Simplified use of model. Use ids to reference other structures" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/ConceptAnnotation.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="435">
          <caret line="186" lean-forward="true" selection-start-line="186" selection-end-line="186" />
          <folding>
            <element signature="e#6089#6090#0" expanded="true" />
            <element signature="e#6159#6160#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="66" column="16" lean-forward="true" selection-start-line="66" selection-start-column="16" selection-end-line="66" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/org.semanticweb.hermit/1.3.8.413/org.semanticweb.hermit-1.3.8.413.jar!/org/semanticweb/HermiT/Reasoner.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="161" selection-start-line="161" selection-end-line="161" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/CRAFT 3.1 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="245">
          <caret line="190" column="11" selection-start-line="190" selection-start-column="11" selection-end-line="190" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="427">
          <caret line="36" column="24" selection-start-line="36" selection-start-column="24" selection-end-line="36" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/uk/ac/manchester/cs/owl/owlapi/OWLClassImpl.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="223" selection-start-line="223" selection-end-line="223" />
          <folding>
            <element signature="e#6261#6262#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="561" column="53" lean-forward="true" selection-start-line="561" selection-start-column="53" selection-end-line="561" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="551">
          <caret line="271" column="16" selection-start-line="271" selection-start-column="16" selection-end-line="271" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-85">
          <caret line="39" column="16" selection-start-line="39" selection-start-column="16" selection-end-line="39" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="6" column="53" lean-forward="true" selection-start-line="6" selection-start-column="53" selection-end-line="6" selection-end-column="53" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/util.clj" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="348">
          <caret line="120" column="19" selection-start-line="120" selection-start-column="19" selection-end-line="120" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/SocketInputStream.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="92" column="23" selection-start-line="92" selection-start-column="23" selection-end-line="92" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="2293" column="23" selection-start-line="2293" selection-start-column="23" selection-end-line="2293" selection-end-column="23" />
          <folding>
            <element signature="e#89922#89923#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/PlainSocketImpl.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="144" lean-forward="true" selection-start-line="144" selection-end-line="144" />
          <folding>
            <element signature="e#3816#3817#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="5" lean-forward="true" selection-start-line="8" selection-start-column="5" selection-end-line="8" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/OWLNamedObject.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="132">
          <caret line="9" column="45" selection-start-line="9" selection-start-column="45" selection-end-line="9" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/HasIRI.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="11" column="8" selection-start-line="11" selection-start-column="8" selection-end-line="11" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="244">
          <caret line="136" selection-start-line="136" selection-end-line="136" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$USER_HOME$/.clojure/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="302">
          <caret line="35" column="15" lean-forward="true" selection-start-line="35" selection-start-column="15" selection-end-line="35" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.boot/profile.boot">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="396">
          <caret line="18" column="8" selection-start-line="18" selection-start-column="8" selection-end-line="18" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="161">
          <caret line="60" column="28" selection-start-line="60" selection-start-column="28" selection-end-line="60" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/replay_pid6356.log">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-129273" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="292">
          <caret line="89" column="16" selection-start-line="89" selection-start-column="16" selection-end-line="89" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/17b59d2ae8bb15cf21b8ccb4c4a605fc5b18871f/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="358">
          <caret line="74" lean-forward="true" selection-start-line="74" selection-end-line="74" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="98" selection-start-line="4" selection-start-column="98" selection-end-line="4" selection-end-column="98" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="277">
          <caret line="99" lean-forward="true" selection-start-line="99" selection-end-line="99" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1386">
          <caret line="63" column="27" lean-forward="true" selection-start-line="63" selection-start-column="27" selection-end-line="63" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="421">
          <caret line="109" column="44" selection-start-line="109" selection-start-column="44" selection-end-line="109" selection-end-column="44" />
        </state>
      </provider>
    </entry>
  </component>
</project>