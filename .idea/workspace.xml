<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4674651553000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="4214218312" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="616">
              <caret line="28" column="23" lean-forward="true" selection-start-line="28" selection-start-column="23" selection-end-line="28" selection-end-column="23" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="371">
              <caret line="36" column="33" selection-start-line="36" selection-start-column="33" selection-end-line="36" selection-end-column="33" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="474">
              <caret line="65" column="16" selection-start-line="65" selection-start-column="16" selection-end-line="65" selection-end-column="16" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="254">
              <caret line="81" column="115" selection-start-line="81" selection-start-column="115" selection-end-line="81" selection-end-column="115" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
      <find>loading</find>
      <find>log</find>
      <find>2340</find>
      <find>23402364-T37</find>
      <find>f1</find>
      <find>f1 0.\d+</find>
      <find>context-th</find>
      <find>save</find>
      <find>str</find>
      <find>warn</find>
      <find>pmap</find>
      <find>:sentences</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1920" />
    <option name="y" value="30" />
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/lib" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560146696448">{:repl-history {:ide [], :local [{:command &quot;(.save model)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations model)&quot;, :offset 23, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 501, :ns &quot;user&quot;} {:command &quot;(def model (k/simple-model annotations))\n\n(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1408, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (group-by :doc (:concept-annotations model)))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :doc (:concept-annotations model))))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(type (:concept-annotations model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (:concept-annotations model))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (vals (:concept-annotations model)))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(set (map :doc (vals (:concept-annotations model))))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations model))&quot;, :offset 6, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/display annotations)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))}))&quot;, :offset 2316, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(count (:concept-annotations model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1366, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences (sentence/concept-annotations-&gt;sentences model))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first sentences)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.removeModelListener annotations text-source)\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property)\n             (.addModelListener annotations text-source))))))&quot;, :offset 1885, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(rdr/biocreative-read-relations (.get (.getModel annotations)) relations-file)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))\n\n(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n(rdr/biocreative-read-relations (k/model annotations) relations-file)&quot;, :offset 1084, :ns &quot;user&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (:concept-graphs model))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save (k/model annotations))&quot;, :offset 29, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 466, :ns &quot;user&quot;} {:command &quot;(def structures-annotations-with-embeddings (word2vec/with-word2vec word2vec-db\n                                              (sentence/structures-annotations-with-embeddings model)))&quot;, :offset 183, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model))\n\n(def model (assoc model\n             :concept-annotations concept-annotations-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n(def sentences (sentence/concept-annotations-&gt;sentences model))\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 359, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;}], :remote [{:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update params)]\n               (-&gt; split-training-model\n                   (assoc :properties properties)\n                   #_(update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 882, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-model\n  [v]\n  (log/info \&quot;Making model\&quot;)\n  (let [model (as-&gt; (k/simple-model v) model\n                    (update model :structure-annotations #(util/pmap-kv sentence/assign-word-embedding %))\n                    (update model :structure-annotations #(util/pmap-kv (partial sentence/assign-sent-id model) %))\n                    (update model :concept-annotations #(util/pmap-kv (partial sentence/assign-tok model) %))\n                    (assoc model :sentences (-&gt;&gt; model\n                                                 (sentence/concept-annotations-&gt;sentences)\n                                                 (map #(evaluation/assign-property model %)))))]\n\n    (log/info \&quot;Num sentences:\&quot; (count (:sentences model)))\n    model))&quot;, :offset 743, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (word2vec/with-word2vec word2vec-db\n                      (make-model training-knowtator-view)))\n(def testing-model (word2vec/with-word2vec word2vec-db\n                     (make-model testing-knowtator-view)))\n(log/info \&quot;Num sentences:\&quot; (count (keep :property (:sentences testing-model))))\n(log/info \&quot;Num sentences:\&quot; (count (keep :property (:sentences training-model))))&quot;, :offset 391, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  3\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (loop [samples samples\n         clusters clusters]\n    (println \&quot;Samples:\&quot; (count samples) \&quot;Clusters:\&quot; (count clusters))\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (seq best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (rest samples) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else clusters))))&quot;, :offset 577, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.75\n                           :min-match-support 0\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-cluster\n  [sample clusters best {:keys [cluster-match-fn]}]\n  (reduce\n    (fn [{:keys [cluster score] :as best} new-cluster]\n      (if-let [score (cluster-match-fn cluster sample score)]\n        {:score score :cluster new-cluster :sample sample}\n        best))\n    best clusters))&quot;, :offset 294, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-cluster\n  [sample clusters best {:keys [cluster-match-fn]}]\n  (reduce\n    (fn [{:keys [score] :as best} new-cluster]\n      (if-let [score (cluster-match-fn new-cluster sample score)]\n        {:score score :cluster new-cluster :sample sample}\n        best))\n    best clusters))&quot;, :offset 290, :ns &quot;cluster-tools&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh]} s p]\n  (and (re/sent-pattern-concepts-match? s p)\n       (&lt; context-thresh (re/context-vector-cosine-sim s p))))&quot;, :offset 168, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn default-cluster\n  [samples clusters cluster-thresh]\n  (cluster-tools/single-pass-cluster samples clusters\n    {:cluster-merge-fn re/add-to-pattern\n     :cluster-match-fn (fn [cluster sample score]\n                         (let [new-score (re/context-vector-cosine-sim cluster sample)]\n                           (and (&lt; (or score cluster-thresh) new-score)\n                                new-score)))}))&quot;, :offset 410, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn default-cluster\n  [samples clusters cluster-thresh]\n  (cluster-tools/single-pass-cluster (set samples) clusters\n    {:cluster-merge-fn re/add-to-pattern\n     :cluster-match-fn (fn [cluster sample score]\n                         (let [new-score (re/context-vector-cosine-sim cluster sample)]\n                           (and (&lt; (or score cluster-thresh) new-score)\n                                new-score)))}))&quot;, :offset 416, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (loop [samples samples\n         clusters clusters]\n    (println \&quot;Samples:\&quot; (count samples) \&quot;Clusters:\&quot; (count clusters))\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (seq best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else clusters))))&quot;, :offset 583, :ns &quot;cluster-tools&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (loop [samples samples\n         clusters clusters]\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (seq best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else clusters))))&quot;, :offset 513, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.1\n                           :min-match-support 0\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 848, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [merge-fn] :as params}]\n  (print \&quot;clustering\&quot;)\n  (loop [samples samples\n         clusters clusters]\n    (print \&quot;.\&quot;)\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (:cluster best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) merge-fn))\n            :else (do\n                    (println)\n                    clusters)))))&quot;, :offset 588, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [sim-fn thresh]}]\n  (-&gt;&gt; clusters\n       (pmap\n         (fn [sample cluster]\n           {:score (sim-fn cluster sample) :cluster cluster :sample sample})\n         samples)\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score thresh})))&quot;, :offset 382, :ns &quot;cluster-tools&quot;} {:command &quot;(defn default-cluster\n  [samples clusters]\n  (cluster-tools/single-pass-cluster (set samples) clusters\n    {:cluster-merge-fn re/add-to-pattern\n     :cluster-match-fn re/context-vector-cosine-si}))&quot;, :offset 197, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn default-cluster\n  [samples clusters]\n  (cluster-tools/single-pass-cluster (set samples) clusters\n    {:cluster-merge-fn re/add-to-pattern\n     :cluster-match-fn re/context-vector-cosine-sim}))&quot;, :offset 198, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (print \&quot;clustering\&quot;)\n  (loop [samples samples\n         clusters clusters]\n    (print \&quot;.\&quot;)\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (:cluster best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else (do\n                    (println)\n                    clusters)))))&quot;, :offset 612, :ns &quot;cluster-tools&quot;} {:command &quot;(defn default-cluster\n  [samples clusters]\n  (cluster-tools/single-pass-cluster (set samples) clusters\n    {:cluster-merge-fn re/add-to-pattern\n     :cluster-sim-fn re/context-vector-cosine-sim}))&quot;, :offset 196, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-update\n  [context-match-fn {:keys [cluster-thresh min-seed-support min-match-support min-match-matches]} _ new-matches matches patterns]\n  (-&gt; new-matches\n      (set)\n      (cluster-tools/single-pass-cluster patterns\n        {:cluster-merge-fn re/add-to-pattern\n         :cluster-sim-fn   re/context-vector-cosine-sim\n         :cluster-thresh cluster-thresh})\n      (default-cluster patterns cluster-thresh)\n      (cond-&gt;&gt;\n        (and (&lt; 0 min-seed-support)\n             (empty? new-matches)) (remove #(&gt; min-seed-support (count (:support %))))\n        (and (&lt; 0 min-match-support)\n             (seq new-matches)) (remove #(&gt; (+ min-match-support) (count (:support %))))\n        (and (&lt; 0 min-match-matches)\n             (seq new-matches)) (remove #(&gt; min-match-matches\n                                            (count (filter (fn [s] (context-match-fn s %)) matches)))))\n      (set)))&quot;, :offset 902, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-update\n  [context-match-fn {:keys [cluster-thresh min-seed-support min-match-support min-match-matches]} _ new-matches matches patterns]\n  (-&gt; new-matches\n      (set)\n      (cluster-tools/single-pass-cluster patterns\n        {:cluster-merge-fn re/add-to-pattern\n         :cluster-sim-fn   re/context-vector-cosine-sim\n         :cluster-thresh cluster-thresh})\n      (cond-&gt;&gt;\n        (and (&lt; 0 min-seed-support)\n             (empty? new-matches)) (remove #(&gt; min-seed-support (count (:support %))))\n        (and (&lt; 0 min-match-support)\n             (seq new-matches)) (remove #(&gt; (+ min-match-support) (count (:support %))))\n        (and (&lt; 0 min-match-matches)\n             (seq new-matches)) (remove #(&gt; min-match-matches\n                                            (count (filter (fn [s] (context-match-fn s %)) matches)))))\n      (set)))&quot;, :offset 854, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (print \&quot;clustering\&quot;)\n  (loop [samples samples\n         clusters clusters]\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (:cluster best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else (do\n                    (println)\n                    clusters)))))&quot;, :offset 596, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.9\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 848, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; clusters\n       (pmap\n         (fn [sample cluster]\n           {:score (cluster-sim-fn cluster sample) :cluster cluster :sample sample})\n         samples)\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})))&quot;, :offset 414, :ns &quot;cluster-tools&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (loop [samples samples\n         clusters clusters]\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (:cluster best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else (do\n                    (println)\n                    clusters)))))&quot;, :offset 573, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 5\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; clusters\n       (pmap\n         (fn [sample cluster]\n           {:score (cluster-sim-fn sample cluster) :cluster cluster :sample sample})\n         samples)\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})))&quot;, :offset 414, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.9\n                           :min-match-support 10\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.9\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 848, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; clusters\n       (cp/upfor (cp/ncpus) [sample samples\n                             cluster clusters])\n       (pmap\n         (fn [sample cluster]\n           {:score (cluster-sim-fn sample cluster) :cluster cluster :sample sample})\n         samples)\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})))&quot;, :offset 506, :ns &quot;cluster-tools&quot;} {:command &quot;(ns cluster-tools\n  (:require [com.climate.claypoole :as cp]))&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; clusters\n       (cp/upfor (cp/ncpus) [sample samples\n                             cluster clusters]\n                 {:score (cluster-sim-fn sample cluster) :cluster cluster :sample sample})\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})))&quot;, :offset 450, :ns &quot;cluster-tools&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :sentences #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; (cp/upfor (cp/ncpus) [sample samples\n                             cluster clusters]\n                 (print \&quot;.\&quot;)\n                 {:score (cluster-sim-fn sample cluster) :cluster cluster :sample sample})\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})\n       (do (println))))&quot;, :offset 485, :ns &quot;cluster-tools&quot;} {:command &quot;(def triples-dataset (evaluation/sentences-&gt;dataset (:sentences training-model)))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count triples-dataset)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(keys triples-dataset)&quot;, :offset 5, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def x (evaluation/pca-2 triples-dataset))&quot;, :offset 42, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/view (charts/scatter-plot (get x 0) (get x 1)\n                                      :group-by groups\n                                      :legend true\n                                      :x-label \&quot;PC1\&quot;\n                                      :y-label \&quot;PC2\&quot;\n                                      :title \&quot;PCA\&quot;))&quot;, :offset 320, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (inc-svg/save-svg \&quot;pca-all.svg\&quot;))&quot;, :offset 317, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]))&quot;, :offset 528, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pprint-sent\n  [model sent]\n  (-&gt;&gt; sent\n       (map #(get-in model [:structure-annotations %]))\n       (map (comp first vals :spans))\n       (sort-by :start)\n       (map :text)\n       (interpose \&quot; \&quot;)\n       (apply str)))&quot;, :offset 225, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn format-matches\n  [model matches _]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (mapcat identity)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)}))\n\n       matches))&quot;, :offset 1411, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [ubergraph.core :as uber]))&quot;, :offset 438, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn -&gt;csv\n  [f model matches patterns]\n  (let [formatted (format-matches model matches patterns)\n        cols [:doc :e1-concept :e1-tok :e2-concept :e2-tok :seed :sentence]\n        csv-form (str (apply str (interpose \&quot;,\&quot; cols)) \&quot;\\n\&quot; (apply str (map #(str (apply str (interpose \&quot;,\&quot; ((apply juxt cols) %))) \&quot;\\n\&quot;) formatted)))]\n    (spit f csv-form)))&quot;, :offset 350, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn sent-&gt;triple\n  [match]\n  (set (:entities match)))&quot;, :offset 55, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn edge-&gt;triple\n  [edge]\n  #{(:src edge) (:dest edge)})&quot;, :offset 58, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn cluster-sentences\n  [sentences]\n  (map\n    #(map :entities %)\n    (map :support\n         (filter\n           #(when (&lt; 1 (count (:support %)))\n              %)\n           (cluster-tools/single-pass-cluster sentences #{}\n             {:cluster-merge-fn re/add-to-pattern\n              :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                   (and (&lt; (or %3 0.75) score)\n                                        score))})))))&quot;, :offset 474, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn make-seeds\n  [sentences e1 e2]\n  (clojure.set/intersection\n    (set (sentence/sentences-with-ann sentences e1))\n    (set (sentence/sentences-with-ann sentences e2))))&quot;, :offset 172, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn predicted-true\n  [matches]\n  (set (map sent-&gt;triple matches)))&quot;, :offset 68, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn actual-true\n  [model property]\n  (-&gt;&gt; property\n       (k/edges-for-property (vals (:concept-graphs model)))\n       (map edge-&gt;triple)\n       (set)))&quot;, :offset 154, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn all-triples\n  [model]\n  (-&gt;&gt; model\n       :sentences\n       (map sent-&gt;triple)\n       (set)))&quot;, :offset 99, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn potential-seeds\n  [sentences actual-true]\n  (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true))&quot;, :offset 118, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn make-all-seeds\n  [model property]\n  (-&gt;&gt; (actual-true model property)\n       (potential-seeds (:sentences model))\n       (mapcat #(apply make-seeds (model :sentences) %))))&quot;, :offset 178, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn context-path-filter\n  [dep-filter coll]\n  (filter #(&lt;= (count (:context %)) dep-filter) coll))&quot;, :offset 100, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn frac-seeds\n  [model properties frac]\n  (-&gt;&gt; model\n       :sentences\n       (group-by properties)\n       (util/map-kv #(-&gt; %\n                         (count)\n                         (* frac)\n                         (take %)\n                         (set)))))&quot;, :offset 265, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn split-train-test\n  \&quot;Splits model into train and test sets\&quot;\n  [model properties frac]\n  (let [seeds (frac-seeds model properties frac)]\n    (assoc model :samples (remove (fn [s] (some #(% s) (vals seeds))))\n                 :seeds seeds)))&quot;, :offset 244, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn train-test\n  \&quot;Makes a model from a training model and a testing model\&quot;\n  [train-model test-model property frac]\n  (let [seeds (frac-seeds train-model property frac)]\n    (-&gt; train-model\n        (update :sentences remove seeds)\n        (assoc :actual-true (actual-true test-model property)\n               :all (all-triples test-model)\n               :test-sentences (:sentences test-model)\n               :seeds))))&quot;, :offset 420, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn calc-metrics\n  [model]\n  (let [metrics (try\n                  (math/calc-metrics model)\n                  (catch ArithmeticException _ {}))]\n    (log/info \&quot;Metrics:\&quot; metrics)\n    (merge model metrics)))&quot;, :offset 208, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-match-fn pattern-update-fn terminate?\n                            context-path-length-cap\n                            context-thresh cluster-thresh\n                            min-seed-support min-match-support min-match-matches\n                            seed-frac]}]\n  (cp/upfor (dec (cp/ncpus)) [seed-frac seed-frac\n                              :let [split-model (split-train-test model property seed-frac)]\n                              context-path-length-cap context-path-length-cap\n                              context-thresh context-thresh\n                              cluster-thresh cluster-thresh\n                              min-seed-support min-seed-support\n                              min-match-support min-match-support\n                              min-match-matches min-match-matches]\n            (let [params {:seed-frac               seed-frac\n                          :context-path-length-cap context-path-length-cap\n                          :context-thresh          context-thresh\n                          :cluster-thresh          cluster-thresh\n                          :min-match-support       min-match-support\n                          :min-seed-support        min-seed-support\n                          :min-match-matches       min-match-matches}\n                  context-match-fn (partial context-match-fn params)\n                  pattern-update-fn (partial pattern-update-fn context-match-fn params)]\n              (-&gt; split-model\n                  (update :sentences context-path-filter context-path-length-cap)\n                  (re/bootstrap {:context-match-fn  context-match-fn\n                                 :pattern-update-fn pattern-update-fn\n                                 :terminate?        terminate?})\n                  (calc-metrics)\n                  (merge params)))))&quot;, :offset 1883, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn pca-2\n  [data]\n  (let [X (incanter/to-matrix data)\n        pca (inc-stats/principal-components X)\n        components (:rotation pca)\n        pc1 (incanter/sel components :cols 0)\n        pc2 (incanter/sel components :cols 1)\n        x1 (incanter/mmult X pc1)\n        x2 (incanter/mmult X pc2)]\n    [x1 x2]))&quot;, :offset 313, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn triple-&gt;sent\n  [t sentences]\n  (-&gt;&gt; sentences\n       (filter #(= t (sent-&gt;triple %)))\n       (first)))&quot;, :offset 108, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn edge-&gt;sent\n  [g e sentences]\n  (let [t (edge-&gt;triple e)\n        property (:value (uber/attrs g e))]\n    (assoc (triple-&gt;sent t sentences) :property property)))&quot;, :offset 165, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn flatten-context-vector\n  [s]\n  (let [v (vec (seq (:context-vector s)))]\n    (apply assoc s (interleave (range (count v)) v))))&quot;, :offset 132, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn sentences-&gt;dataset\n  [sentences]\n  (-&gt;&gt; sentences\n       (filter #(identity (:context-vector %)))\n       (pmap flatten-context-vector)\n       (map #(dissoc % :context-vector :entities :concepts :context))\n       (vec)\n       (incanter/to-dataset)))&quot;, :offset 254, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn triples-&gt;dataset\n  [model]\n  (-&gt;&gt; model\n       :concept-graphs\n       (vals)\n       (mapcat\n         (fn [g]\n           (map #(edge-&gt;sent g % (:sentences model))\n                (ubergraph.core/find-edges g {}))))\n       (sentences-&gt;dataset)))&quot;, :offset 249, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn sent-property\n  [{:keys [concept-graphs]} [id1 id2]]\n  (some\n    (fn [g]\n      (when-let [e (uber/find-edge g id1 id2)]\n        (:value (uber/attrs g e))))\n    (vals concept-graphs)))&quot;, :offset 189, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn assign-property\n  \&quot;Assign the associated property with the sentence\&quot;\n  [model s]\n  (assoc s :property (sent-property model (vec (:entities s)))))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [ubergraph.core :as uber]))\n\n(defn pprint-sent\n  [model sent]\n  (-&gt;&gt; sent\n       (map #(get-in model [:structure-annotations %]))\n       (map (comp first vals :spans))\n       (sort-by :start)\n       (map :text)\n       (interpose \&quot; \&quot;)\n       (apply str)))\n\n(defn format-matches\n  [model matches _]\n  (map (fn [match]\n         (let [[e1 _ :as entities] (map #(get-in model [:concept-annotations %]) (:entities match))\n\n               doc (:doc e1)\n               sent (-&gt;&gt; (get-in model [:structure-graphs (:sent e1) :node-map])\n                         keys\n                         (pprint-sent model))\n               context (-&gt;&gt; match\n                            :context\n                            (pprint-sent model))\n               [e1-concept e2-concept] (-&gt;&gt; entities\n                                            (sort-by :concept)\n                                            (map :concept)\n                                            (map str))\n               [e1-tok e2-tok] (-&gt;&gt; entities\n                                    (map :tok)\n                                    (map #(get-in model [:structure-annotations %]))\n                                    (map (comp :text first vals :spans)))\n               seed (-&gt;&gt; (get match :seed)\n                         :concepts\n                         (mapcat identity)\n                         (interpose \&quot;, \&quot;))]\n           {:doc        doc\n            :context    context\n            :e1-concept e1-concept\n            :e1-tok     e1-tok\n            :e2-concept e2-concept\n            :e2-tok     e2-tok\n            :seed       (apply str seed)\n            :sentence   (str \&quot;\\\&quot;\&quot; sent \&quot;\\\&quot;\&quot;)}))\n\n       matches))\n\n(defn -&gt;csv\n  [f model matches patterns]\n  (let [formatted (format-matches model matches patterns)\n        cols [:doc :e1-concept :e1-tok :e2-concept :e2-tok :seed :sentence]\n        csv-form (str (apply str (interpose \&quot;,\&quot; cols)) \&quot;\\n\&quot; (apply str (map #(str (apply str (interpose \&quot;,\&quot; ((apply juxt cols) %))) \&quot;\\n\&quot;) formatted)))]\n    (spit f csv-form)))\n\n(defn sent-&gt;triple\n  [match]\n  (set (:entities match)))\n\n(defn edge-&gt;triple\n  [edge]\n  #{(:src edge) (:dest edge)})\n\n(defn cluster-sentences\n  [sentences]\n  (map\n    #(map :entities %)\n    (map :support\n         (filter\n           #(when (&lt; 1 (count (:support %)))\n              %)\n           (cluster-tools/single-pass-cluster sentences #{}\n             {:cluster-merge-fn re/add-to-pattern\n              :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                   (and (&lt; (or %3 0.75) score)\n                                        score))})))))\n\n(defn make-seeds\n  [sentences e1 e2]\n  (clojure.set/intersection\n    (set (sentence/sentences-with-ann sentences e1))\n    (set (sentence/sentences-with-ann sentences e2))))\n\n(defn predicted-true\n  [matches]\n  (set (map sent-&gt;triple matches)))\n\n(defn actual-true\n  [model property]\n  (-&gt;&gt; property\n       (k/edges-for-property (vals (:concept-graphs model)))\n       (map edge-&gt;triple)\n       (set)))\n\n(defn all-triples\n  [model]\n  (-&gt;&gt; model\n       :sentences\n       (map sent-&gt;triple)\n       (set)))\n\n(defn potential-seeds\n  [sentences actual-true]\n  (filter (fn [t] (some #(= t (:entities %)) sentences)) actual-true))\n\n(defn make-all-seeds\n  [model property]\n  (-&gt;&gt; (actual-true model property)\n       (potential-seeds (:sentences model))\n       (mapcat #(apply make-seeds (model :sentences) %))))\n\n(defn context-path-filter\n  [dep-filter coll]\n  (filter #(&lt;= (count (:context %)) dep-filter) coll))\n\n(defn frac-seeds\n  [model properties frac]\n  (-&gt;&gt; model\n       :sentences\n       (group-by properties)\n       (util/map-kv #(-&gt; %\n                         (count)\n                         (* frac)\n                         (take %)\n                         (set)))))\n\n(defn split-train-test\n  \&quot;Splits model into train and test sets\&quot;\n  [model properties frac]\n  (let [seeds (frac-seeds model properties frac)]\n    (assoc model :samples (remove (fn [s] (some #(% s) (vals seeds))))\n                 :seeds seeds)))\n\n\n(defn train-test\n  \&quot;Makes a model from a training model and a testing model\&quot;\n  [train-model test-model property frac]\n  (let [seeds (frac-seeds train-model property frac)]\n    (-&gt; train-model\n        (update :sentences remove seeds)\n        (assoc :actual-true (actual-true test-model property)\n               :all (all-triples test-model)\n               :test-sentences (:sentences test-model)\n               :seeds))))\n\n(defn calc-metrics\n  [model]\n  (let [metrics (try\n                  (math/calc-metrics model)\n                  (catch ArithmeticException _ {}))]\n    (log/info \&quot;Metrics:\&quot; metrics)\n    (merge model metrics)))\n\n(defn parameter-walk\n  [property model &amp; {:keys [context-match-fn pattern-update-fn terminate?\n                            context-path-length-cap\n                            context-thresh cluster-thresh\n                            min-seed-support min-match-support min-match-matches\n                            seed-frac]}]\n  (cp/upfor (dec (cp/ncpus)) [seed-frac seed-frac\n                              :let [split-model (split-train-test model property seed-frac)]\n                              context-path-length-cap context-path-length-cap\n                              context-thresh context-thresh\n                              cluster-thresh cluster-thresh\n                              min-seed-support min-seed-support\n                              min-match-support min-match-support\n                              min-match-matches min-match-matches]\n            (let [params {:seed-frac               seed-frac\n                          :context-path-length-cap context-path-length-cap\n                          :context-thresh          context-thresh\n                          :cluster-thresh          cluster-thresh\n                          :min-match-support       min-match-support\n                          :min-seed-support        min-seed-support\n                          :min-match-matches       min-match-matches}\n                  context-match-fn (partial context-match-fn params)\n                  pattern-update-fn (partial pattern-update-fn context-match-fn params)]\n              (-&gt; split-model\n                  (update :sentences context-path-filter context-path-length-cap)\n                  (re/bootstrap {:context-match-fn  context-match-fn\n                                 :pattern-update-fn pattern-update-fn\n                                 :terminate?        terminate?})\n                  (calc-metrics)\n                  (merge params)))))\n\n(defn pca-2\n  [data]\n  (let [X (incanter/to-matrix data)\n        pca (inc-stats/principal-components X)\n        components (:rotation pca)\n        pc1 (incanter/sel components :cols 0)\n        pc2 (incanter/sel components :cols 1)\n        x1 (incanter/mmult X pc1)\n        x2 (incanter/mmult X pc2)]\n    [x1 x2]))\n(defn triple-&gt;sent\n  [t sentences]\n  (-&gt;&gt; sentences\n       (filter #(= t (sent-&gt;triple %)))\n       (first)))\n\n(defn edge-&gt;sent\n  [g e sentences]\n  (let [t (edge-&gt;triple e)\n        property (:value (uber/attrs g e))]\n    (assoc (triple-&gt;sent t sentences) :property property)))\n\n(defn flatten-context-vector\n  [s]\n  (let [v (vec (seq (:context-vector s)))]\n    (apply assoc s (interleave (range (count v)) v))))\n\n(defn sentences-&gt;dataset\n  [sentences]\n  (-&gt;&gt; sentences\n       (filter #(identity (:context-vector %)))\n       (pmap flatten-context-vector)\n       (map #(dissoc % :context-vector :entities :concepts :context))\n       (vec)\n       (incanter/to-dataset)))\n\n(defn triples-&gt;dataset\n  [model]\n  (-&gt;&gt; model\n       :concept-graphs\n       (vals)\n       (mapcat\n         (fn [g]\n           (map #(edge-&gt;sent g % (:sentences model))\n                (ubergraph.core/find-edges g {}))))\n       (sentences-&gt;dataset)))\n\n(defn sent-property\n  [{:keys [concept-graphs]} [id1 id2]]\n  (some\n    (fn [g]\n      (when-let [e (uber/find-edge g id1 id2)]\n        (:value (uber/attrs g e))))\n    (vals concept-graphs)))\n\n(defn assign-property\n  \&quot;Assign the associated property with the sentence\&quot;\n  [model s]\n  (assoc s :property (sent-property model (vec (:entities s)))))&quot;, :offset 8533, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties [\&quot;INHIBITOR\&quot;])&quot;, :offset 30, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def y (incanter/sel triples-dataset :cols (range 0 200)))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:column-names y)&quot;, :offset 16, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :min-seed-support  0\n                           :min-match-matches 0}\n                   context-match-fn (partial concept-context-match params)\n                   pattern-update-fn (partial pattern-update context-match-fn params)]\n               (-&gt; split-training-model\n                   (update :samples #(evaluation/context-path-filter context-path-length-cap %))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn})\n                   (evaluation/calc-metrics))))&quot;, :offset 847, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def x (evaluation/pca-2 y))&quot;, :offset 28, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (incanter/view)\n      #_(inc-svg/save-svg \&quot;pca-all.svg\&quot;))&quot;, :offset 341, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def triples-dataset (-&gt; training-model\n                           :sentences\n                           (evaluation/sentences-&gt;dataset)\n                           (incanter/sel :filter-fn #(or (nil? (:property %))\n                                                         (properties (:property %))))))&quot;, :offset 302, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def groups (incanter/sel triples-dataset :cols :property))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def triples-dataset (-&gt; training-model\n                           :sentences\n                           (filter #(or (nil? (:property %))\n                                        (properties (:property %))))\n                           (evaluation/sentences-&gt;dataset)\n                           (incanter/sel)))&quot;, :offset 310, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def triples-dataset (-&gt;&gt; training-model\n                           :sentences\n                           (filter #(or (nil? (:property %))\n                                        (properties (:property %))))\n                           (evaluation/sentences-&gt;dataset)))&quot;, :offset 269, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:column-names triples-dataset)&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def groups (incanter/sel triples-dataset :cols :property))\n  (def y (incanter/sel triples-dataset :cols (range 0 200)))\n  (def x (evaluation/pca-2 y))\n  (-&gt; (inc-charts/scatter-plot (get x 0) (get x 1)\n                               :group-by groups\n                               :legend true\n                               :x-label \&quot;PC1\&quot;\n                               :y-label \&quot;PC2\&quot;\n                               :title \&quot;PCA\&quot;)\n      (incanter/view)\n      #_(inc-svg/save-svg \&quot;pca-all.svg\&quot;))&quot;, :offset 495, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (update training-model :sentences (fn [sentences]\n                                                        (map #(evaluation/assign-property training-model %)\n                                                             sentences))))&quot;, :offset 252, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn single-pass-cluster\n  \&quot;Occurs in O(N^2*M) time\&quot;\n  [samples clusters {:keys [cluster-merge-fn] :as params}]\n  (loop [samples samples\n         clusters clusters]\n    (let [best (nearest-sample-cluster-pair samples clusters params)]\n      (cond (:cluster best) (recur (disj samples (:sample best)) (update-cluster clusters (:cluster best) (:sample best) cluster-merge-fn))\n            (seq samples) (recur (set (rest samples)) (conj-cluster clusters (first samples) cluster-merge-fn))\n            :else clusters))))&quot;, :offset 518, :ns &quot;cluster-tools&quot;} {:command &quot;(defn nearest-sample-cluster-pair\n  [samples clusters {:keys [cluster-sim-fn cluster-thresh]}]\n  (-&gt;&gt; (cp/upfor (cp/ncpus) [sample samples\n                             cluster clusters]\n                 {:score (cluster-sim-fn sample cluster) :cluster cluster :sample sample})\n       (reduce\n         (fn [best new]\n           (if (&lt; (:score best) (:score new))\n             new\n             best))\n         {:score cluster-thresh})))&quot;, :offset 434, :ns &quot;cluster-tools&quot;} {:command &quot;(def split-training-model (let [seed-frac 0.2]\n                            (evaluation/split-train-test training-model properties seed-frac)))&quot;, :offset 142, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-metrics\n  [{:keys [matches properties samples]}]\n  (let [all (-&gt;&gt; samples\n                 (map :entities)\n                 (map set)\n                 (set))\n        metrics (map (fn [property]\n                       (let [actual-true (-&gt;&gt; samples\n                                              (filter #(= property (:property %)))\n                                              (map :entities)\n                                              (map set)\n                                              (set))\n                             predicted-true (-&gt;&gt; matches\n                                                 (filter #(= property (:predicted-property %)))\n                                                 (map :entities)\n                                                 (map set)\n                                                 (set))]\n                         (log/debug \&quot;ALL\&quot; (count all) \&quot;AT\&quot; (count actual-true) \&quot;PT\&quot; (count predicted-true))\n                         (assoc (try\n                                  (math/calc-metrics {:actual-true    actual-true\n                                                      :predicted-true predicted-true\n                                                      :all            all})\n                                  (catch ArithmeticException _ {}))\n                           :property property)))\n                     properties)]\n    (log/info \&quot;Metrics:\&quot; metrics)\n    metrics))&quot;, :offset 1433, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(keys (ns-publics 'scripts.bio-creative-relation-extraction))&quot;, :offset 61, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (mapcat #(ubergraph.core/find-edges % {}) (vals (:concept-graphs training-model))))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (keep :property training-sentences))&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first  (:seeds split-training-model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(last  (:seeds split-training-model))&quot;, :offset 37, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count  training-sentences)&quot;, :offset 27, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count  (keep :property training-sentences))&quot;, :offset 44, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first   (keep :property training-sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (filter :property training-sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (distinct (filter :property training-sentences)))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (set (filter :property training-sentences)))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second results)&quot;, :offset 16, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL 2">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" weight="0.18192919" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32864866" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32743362" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" weight="0.32" />
      <window_info anchor="bottom" id="Build" order="9" visible="true" weight="0.26378378" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.50061053" side_tool="true" weight="0.28324324" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" visible="true" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.20059524" />
      <window_info active="true" anchor="right" x="-1" y="419" width="1602" height="902" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4382622" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="PCA Evaluation fns" />
    <MESSAGE value="Functions are passed from script to eval script" />
    <MESSAGE value="Use pmap" />
    <MESSAGE value="PCA on clusters" />
    <MESSAGE value="Added termination criteria" />
    <MESSAGE value="Minor changes" />
    <MESSAGE value="Find property for sentence if it exists" />
    <MESSAGE value="Started adding training data" />
    <MESSAGE value="Updated knowtator jar with indent fix" />
    <MESSAGE value="Simplified startup. Keep structure conlls in sentences dir" />
    <MESSAGE value="minor fix" />
    <MESSAGE value="Warning to run dependency parser" />
    <MESSAGE value="Simplified assigning of sents, toks, and embeddings" />
    <MESSAGE value="Further simplified sentence creation" />
    <MESSAGE value="Reader for biocreative files" />
    <MESSAGE value="Remove view as model listener After load" />
    <MESSAGE value="Remove view as model listener before load" />
    <MESSAGE value="Added train-test eval fn" />
    <MESSAGE value="Simplified some functions" />
    <MESSAGE value="Updated notebook to match script" />
    <MESSAGE value="Updated knowtator so that it doesn't fire model events during load" />
    <MESSAGE value="Fixes to reading in model" />
    <MESSAGE value="Simplified intro slide" />
    <MESSAGE value="Added save to svg for incanter" />
    <MESSAGE value="Lots of changes adding multiple property matching" />
    <option name="LAST_COMMIT_MESSAGE" value="Lots of changes adding multiple property matching" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/17b59d2ae8bb15cf21b8ccb4c4a605fc5b18871f/src/math.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/github/vlsi/mxgraph/jgraphx/3.9.8.1/jgraphx-3.9.8.1.jar!/com/mxgraph/view/mxGraph.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/TextSource.class" />
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/collection/GraphSpaceCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="166">
          <caret line="46" selection-start-line="46" selection-end-line="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="279">
          <caret line="787" column="46" selection-start-line="787" selection-start-column="46" selection-end-line="787" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="550">
          <caret line="84" selection-start-line="84" selection-end-line="84" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="38" column="33" selection-start-line="38" selection-start-column="33" selection-end-line="38" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/build.boot" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.java" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.form" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="12" column="40" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="14" selection-start-line="8" selection-start-column="14" selection-end-line="8" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="https://github.com/gitpitch/in-60-seconds.git">
      <provider selected="true" editor-type-id="httpFileEditor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/README.md" />
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/PITCHME.md" />
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="658">
          <caret line="44" column="50" selection-start-line="44" selection-start-column="50" selection-end-line="44" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1210">
          <caret line="55" column="14" selection-start-line="55" selection-start-column="14" selection-end-line="55" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="467">
          <caret line="30" column="4" selection-start-line="30" selection-start-column="4" selection-end-line="30" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="7" lean-forward="true" selection-start-line="10" selection-start-column="7" selection-end-line="10" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/potemkin/potemkin/0.4.3/potemkin-0.4.3.jar!/potemkin/namespaces.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="76" column="10" selection-start-line="76" selection-start-column="10" selection-end-line="76" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/parallelcolt/parallelcolt/0.10.1/parallelcolt-0.10.1.jar!/cern/jet/stat/tdouble/DoubleDescriptive.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="207">
          <caret line="43" column="25" selection-start-line="43" selection-start-column="25" selection-end-line="43" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/stats.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-893">
          <caret line="1540" column="27" lean-forward="true" selection-start-line="1540" selection-start-column="27" selection-end-line="1540" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-123">
          <caret line="964" column="19" selection-start-line="964" selection-start-column="19" selection-end-line="964" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="39" column="42" selection-start-line="39" selection-start-column="42" selection-end-line="39" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/Profile.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="75" column="18" selection-start-line="75" selection-start-column="18" selection-end-line="75" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/knowtator/KnowtatorXmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="417">
          <caret line="430" column="29" selection-start-line="430" selection-start-column="29" selection-end-line="430" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/XmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="383">
          <caret line="83" column="51" lean-forward="true" selection-start-line="83" selection-start-column="51" selection-end-line="83" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1584">
          <caret line="36" column="51" selection-start-line="36" selection-start-column="51" selection-end-line="36" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="34" lean-forward="true" selection-start-line="4" selection-start-column="34" selection-end-line="4" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="291">
          <caret line="65" column="6" selection-start-line="65" selection-start-column="6" selection-end-line="65" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/BioCreative 2017 - Relation Extraction.ipynb">
      <provider selected="true" editor-type-id="jupyter-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.cpcache/752262307.cp">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="616">
          <caret line="28" column="27" selection-start-line="28" selection-start-column="27" selection-end-line="28" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="242">
          <caret line="11" column="6" selection-start-line="11" selection-start-column="6" selection-end-line="11" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="412">
          <caret line="46" column="6" selection-start-line="46" selection-start-column="6" selection-end-line="46" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="128" column="37" lean-forward="true" selection-start-line="128" selection-start-column="37" selection-end-line="128" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5f023e4927d1cb39c841b0e2b4918d107049c1e1/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="682">
          <caret line="31" column="13" lean-forward="true" selection-start-line="31" selection-start-column="13" selection-end-line="31" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7b5266fd00a7110791812564ff946cabbafa9a7c/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="15" selection-start-line="20" selection-start-column="15" selection-end-line="20" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="335">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="254">
          <caret line="81" column="115" selection-start-line="81" selection-start-column="115" selection-end-line="81" selection-end-column="115" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-3232">
          <caret line="8" column="58" selection-start-line="8" selection-start-column="58" selection-end-line="8" selection-end-column="58" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="101" selection-start-line="4" selection-start-column="101" selection-end-line="4" selection-end-column="101" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="462">
          <caret line="21" column="16" lean-forward="true" selection-start-line="21" selection-start-column="16" selection-end-line="21" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="616">
          <caret line="28" column="23" lean-forward="true" selection-start-line="28" selection-start-column="23" selection-end-line="28" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="371">
          <caret line="36" column="33" selection-start-line="36" selection-start-column="33" selection-end-line="36" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="474">
          <caret line="65" column="16" selection-start-line="65" selection-start-column="16" selection-end-line="65" selection-end-column="16" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Dep2Rel</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>