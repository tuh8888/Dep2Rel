<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BookmarkManager">
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="199" />
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="108" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Word2Vec-clj" />
              <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Word2Vec-clj" />
                <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$/../hpl-util" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$/../hpl-util" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4675246917000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="1520711068" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="4675026121000" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" value="3032155016" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="4670933584000" />
        <entry key="$PROJECT_DIR$/../hpl-util/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../Word2Vec-clj">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../hpl-util">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Dep2Rel" />
  </component>
  <component name="FileEditorManager">
    <splitter split-orientation="vertical" split-proportion="0.2633788">
      <split-first>
        <leaf>
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="85">
                  <caret line="179" column="45" selection-start-line="179" selection-start-column="45" selection-end-line="179" selection-end-column="45" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-first>
      <split-second>
        <leaf>
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="314">
                  <caret line="290" column="70" lean-forward="true" selection-start-line="290" selection-start-column="70" selection-end-line="290" selection-end-column="70" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-second>
    </splitter>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>edu.ucdenver.ccp.nlp.re-model :as sentence</find>
      <find>seed</find>
      <find>dr</find>
      <find>uncomplicate</find>
      <find>cosine-</find>
      <find>subvec</find>
      <find>comb</find>
      <find>word-embedding</find>
      <find>unc</find>
      <find>context/</find>
      <find>seed-thresh</find>
      <find>:samples</find>
      <find>samples</find>
      <find>context-path-f</find>
      <find>save</find>
      <find>to-da</find>
      <find>make-co</find>
      <find>run</find>
      <find>making con</find>
      <find>|</find>
      <find>make-con</find>
      <find>re/con</find>
      <find>chem</find>
      <find>unit-vec</find>
      <find>take</find>
      <find>structure-annot</find>
      <find>match-thresh</find>
      <find>vector-fn</find>
      <find>f1</find>
      <find>make-mo</find>
    </findStrings>
    <replaceStrings>
      <replace>&quot;</replace>
      <replace>let-release</replace>
      <replace>vec-remove</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="UPDATE_TYPE" value="REBASE" />
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="PUSH_UPDATE_ALL_ROOTS" value="false" />
    <option name="ROOT_SYNC" value="DONT_SYNC" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="nlm2019" />
      </map>
    </option>
    <option name="RESET_MODE" value="MIXED" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/run/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/../hpl-util/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/run/run_pitchme.sh" />
        <option value="$PROJECT_DIR$/assets/PITCHME.css" />
        <option value="$PROJECT_DIR$/assets/metrics.svg" />
        <option value="$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
        <option value="$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" />
        <option value="$PROJECT_DIR$/../hpl-util/src/math.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1600" />
    <option name="y" value="30" />
    <option name="width" value="1120" />
    <option name="height" value="680" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
              <item name="Scratches" type="d62648e6:ScratchProjectViewPane$MyRootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope">
        <subPane subId="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ccp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ccp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="nlp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
          </expand>
          <select />
        </subPane>
        <subPane subId="Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="~/Documents/Dep2Rel" type="442cc68d:ScopeViewTreeModel$RootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="$PROJECT_DIR$/run/run_on_tantor.sh&#10;/home/harrison/Documents/hpl-util/target/clojure/core.clj&#10;true&#10;/home/harrison/Documents/hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj&#10;/home/harrison/Documents/Dep2Rel/run/run_pitchme.sh&#10;/home/harrison/Documents/hpl-util/target/cluster_tools.clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Word2Vec-clj/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.smartKeys" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/assets" />
      <recent name="$PROJECT_DIR$/run" />
      <recent name="$PROJECT_DIR$/../hpl-util/src" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560736435346">{:repl-history {:ide [], :local [{:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width :data (incanter/get-dataset :iris) :group-by :Species))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(incanter/view (inc-charts/scatter-plot :Sepal.Length :Sepal.Width \n                             :data (incanter/get-dataset :iris) \n                             :group-by :Species))&quot;, :offset 10, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [uncomplicate-context-alg :as context]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]))&quot;, :offset 484, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 178, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.datasets/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 120, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.core/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 116, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(use '(incanter core datasets))\n(def iris (get-dataset :iris))\n(view iris)&quot;, :offset 74, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width                     :data (get-dataset :iris)                    :group-by :Species))&quot;, :offset 132, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width :data \n                    (get-dataset :iris) :group-by :Species))&quot;, :offset 23, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width \n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 106, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color)) \n           (view $data) \n           (view (inc-charts/bar-chart :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color))\n           (view (inc-charts/scatter-plot :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 97, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 111, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 35, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3]\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3] 2\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 161, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label :Species\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 160, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species 1}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label (sel (get-dataset :iris) :cols :Species)\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 301, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label 'x\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 153, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                              :legend true\n                              :series-label 'x\n                              :data (get-dataset :iris)\n                              :group-by :Species))&quot;, :offset 4, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def plot (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                   :legend true\n                                   :series-label 'x\n                                   :data (get-dataset :iris)\n                                   :group-by :Species))&quot;, :offset 9, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-categories plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 41, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 27, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10 10 10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 42, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(get (map identity [1 2 3]) 0)&quot;, :offset 26, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 59, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view plot)&quot;, :offset 11, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400\n                                                ] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 108, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;}], :remote [{:command &quot;(conj [1 2 3] 4)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(def prepared-model (-&gt; training-model\n                        (assoc :seed-frac 1\n                               :rng 0.022894\n                               :negative-cap 3000)\n                        (re-model/split-train-test)\n                        (re-model/train-test testing-model)\n                        (update :seeds #(take 10 %))))&quot;, :offset 345, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn log-starting-values\n  [{:keys [properties seeds all-samples]}]\n  (let [p1 (util/map-kv count (group-by :predicted seeds))]\n    (-&gt;&gt; properties\n         (map (fn [property]\n                {:seeds    (get p1 property)\n                 :property property\n                 :samples  (count all-samples)\n                 :actual-positive (count  (re-model/actual-positive property all-samples))}))\n         (incanter/to-dataset)\n         (log/info))))&quot;, :offset 453, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def training-model (update training-model\n                            :sentences (fn [sentences]\n                                         (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 185, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-model (update testing-model\n                           :sentences (fn [sentences]\n                                        (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 181, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; training-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; testing-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :testing)]))\n(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))&quot;, :offset 850, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def prepared-model (let [negatives (filter #(= re-model/NONE (:property %)) (:sentences training-model))\n                          others    (remove #(= re-model/NONE (:property %)) (:sentences training-model))\n                          seeds     (lazy-cat others (take 2000 negatives))]\n                      (-&gt; training-model\n                          (assoc :s 1\n                                 :rng 0.022894)\n                          (assoc :seeds (map #(assoc % :predicted (:property %)) seeds #_(:sentences training-model)))\n                          #_(re-model/split-train-test)\n                          (re-model/train-test testing-model))))\n\n(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :context-thresh 0.9\n                        :cluster-thresh 0.95\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 1061, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-overall-metrics\n  [{:keys [matches]}]\n  (let [predicted-positive (re-model/predicted-positive matches)\n        predicted-negative (re-model/predicted-negative matches)\n        tp (count (filter #(= (:predicted %) (:property %)) predicted-positive))\n        tn (count (filter #(= (:predicted %) (:property %)) predicted-negative))\n        fp (count (filter #(not= (:predicted %) (:property %)) predicted-positive))\n        fn (count (filter #(not= (:predicted %) (:property %)) predicted-negative))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Metrics\&quot; metrics)\n    metrics))&quot;, :offset 903, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :context-thresh 0.95\n                        :cluster-thresh 0.9\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 404, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :context-thresh 0.85\n                        :cluster-thresh 0.95\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 405, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-overall-metrics\n  [{:keys [matches] :as model}]\n  \n  (let [metrics (dissoc (calc-metrics model) re-model/NONE)\n        predicted-positive (re-model/predicted-positive matches)\n        predicted-negative (re-model/predicted-negative matches)\n        tp (reduce + (map :tp (dissoc re-model/NONE)))\n        tn (reduce + (map :tn (dissoc re-model/NONE)))\n        fp (reduce + (map :fp (dissoc re-model/NONE)))\n        fn (reduce + (map :fn (dissoc re-model/NONE)))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Metrics\&quot; metrics)\n    metrics))&quot;, :offset 866, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn calc-overall-metrics\n  [{:keys [matches] :as model}]\n\n  (let [metrics (filter #(= (:property %) re-model/NONE) (calc-metrics model))\n        predicted-positive (re-model/predicted-positive matches)\n        predicted-negative (re-model/predicted-negative matches)\n        tp (reduce + (map :tp (dissoc re-model/NONE)))\n        tn (reduce + (map :tn (dissoc re-model/NONE)))\n        fp (reduce + (map :fp (dissoc re-model/NONE)))\n        fn (reduce + (map :fn (dissoc re-model/NONE)))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Metrics\&quot; metrics)\n    metrics))&quot;, :offset 883, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn calc-overall-metrics\n  [{:keys [matches] :as model}]\n\n  (let [metrics (filter #(= (:property %) re-model/NONE) (calc-metrics model))\n        predicted-positive (re-model/predicted-positive matches)\n        predicted-negative (re-model/predicted-negative matches)\n        tp (reduce + (map :tp metrics))\n        tn (reduce + (map :tn metrics))\n        fp (reduce + (map :fp metrics))\n        fn (reduce + (map :fn metrics))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Metrics\&quot; metrics)\n    metrics))&quot;, :offset 823, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/calc-metrics results)&quot;, :offset 33, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-overall-metrics\n  [{:keys [matches] :as model}]\n\n  (let [metrics (remove #(= (:property %) re-model/NONE) (calc-metrics model))\n        predicted-positive (re-model/predicted-positive matches)\n        predicted-negative (re-model/predicted-negative matches)\n        tp (reduce + (map :tp metrics))\n        tn (reduce + (map :tn metrics))\n        fp (reduce + (map :fp metrics))\n        fn (reduce + (map :fn metrics))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Metrics\&quot; metrics)\n    metrics))&quot;, :offset 823, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/calc-overall-metrics results)&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [fn        (+ 892\n                   433\n                   139\n                   159\n                   540)\n      tp        (+ 757\n                   210\n                   47\n                   126\n                   119)\n      fp        (+ 1422\n                   700\n                   227\n                   409\n                   680)\n      precision (/ (float tp) (+ fp tp))\n      recall    (/ (float tp) (+ tp fn))\n      f1        (/ (* 2 precision recall)\n                   (+ precision recall))]\n  {:tp        tp\n   :fp        fp\n   :fn        fn\n   :precision precision\n   :recall    recall\n   :f1        f1})&quot;, :offset 628, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-overall-metrics\n  [model]\n  (let [metrics (remove #(= (:property %) re-model/NONE) (calc-metrics model))\n        tp (reduce + (map :tp metrics))\n        tn (reduce + (map :tn metrics))\n        fp (reduce + (map :fp metrics))\n        fn (reduce + (map :fn metrics))\n        precision (/ (float tp) (+ fp tp))\n        recall (/ (float tp) (+ tp fn))\n        f1 (/ (* 2 precision recall)\n              (+ precision recall))\n        metrics {:tp tp\n                 :tn tn\n                 :fp fp\n                 :fn fn\n                 :precision precision\n                 :recall recall\n                 :f1 f1}]\n    (log/info \&quot;Overall Metrics\&quot; metrics)\n    metrics))&quot;, :offset 678, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn bootstrap\n  [{:keys [seeds] :as model}]\n  (let [model (assoc model :samples (context-path-filter model)\n                           :matches #{}\n                           :new-matches seeds\n                           :iteration 0)]\n    (log/info (re-params model))\n    (log-starting-values model)\n    (loop [model model]\n      (let [model       (assoc model :patterns (pattern-update model))\n            unclustered (decluster model)\n            model       (update model :patterns (fn [patterns] (filter (fn [pattern] (support-filter model pattern)) patterns)))\n            model       (assoc model :new-matches (concept-context-match model))\n            model       (update model :samples (fn [samples] (let [new-matches (:new-matches model)]\n                                                               (if (seq new-matches)\n                                                                 (remove :predicted new-matches)\n                                                                 samples))))\n            model       (update model :new-matches (fn [new-matches] (filter :predicted new-matches)))\n            model       (update model :matches (fn [matches] (-&gt;&gt; model\n                                                                  :new-matches\n                                                                  (into matches))))]\n        (if-let [results (terminate? model)]\n          results\n          (do\n            (log-current-values model)\n            (let [model (update model :iteration inc)\n                  model (update model :new-matches (fn [new-matches] (-&gt;&gt; new-matches\n                                                                          (cap-nones)\n                                                                          (lazy-cat unclustered))))]\n              (recur model))))))))&quot;, :offset 1826, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    context-thresh\n                                                    cluster-thresh\n                                                    min-match-support\n                                                    seed-frac\n                                                    rng negative-cap]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)\n                prepared-model (assoc prepared-model :patterns (re/pattern-update prepared-model)\n                                                     :seeds nil)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          context-thresh\n          cluster-thresh          cluster-thresh\n          min-match-support       min-match-support]\n      (-&gt; prepared-model\n          (assoc :context-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :min-match-support min-match-support\n                 :max-iterations 100\n                 :max-matches 3000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap)\n          (run-model results-dir)))))&quot;, :offset 1789, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    context-thresh\n                                                    cluster-thresh\n                                                    min-match-support\n                                                    seed-frac\n                                                    rng negative-cap]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [cluster-thresh          cluster-thresh\n          seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)\n                prepared-model (assoc prepared-model :patterns (re/pattern-update (assoc prepared-model\n                                                                                    :cluster-thresh cluster-thresh\n                                                                                    :new-matches (:seeds prepared-model)))\n                                                     :seeds nil)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          context-thresh\n          min-match-support       min-match-support]\n      (-&gt; prepared-model\n          (assoc :context-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :min-match-support min-match-support\n                 :max-iterations 100\n                 :max-matches 3000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap)\n          (run-model results-dir)))))&quot;, :offset 2033, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    context-thresh\n                                                    cluster-thresh\n                                                    min-match-support\n                                                    seed-frac\n                                                    rng negative-cap]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [cluster-thresh          cluster-thresh\n          seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          context-thresh\n          min-match-support       min-match-support]\n      (-&gt; prepared-model\n          (assoc :context-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :min-match-support min-match-support\n                 :max-iterations 100\n                 :max-matches 3000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap)\n          (run-model results-dir)))))&quot;, :offset 1626, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    context-thresh\n                                                    cluster-thresh\n                                                    min-match-support\n                                                    seed-frac\n                                                    rng negative-cap]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          context-thresh\n          cluster-thresh          cluster-thresh\n          min-match-support       min-match-support]\n      (-&gt; prepared-model\n          (assoc :context-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :min-match-support min-match-support\n                 :max-iterations 100\n                 :max-matches 3000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap)\n          (run-model results-dir)))))&quot;, :offset 1626, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk training-model testing-model results-dir\n                                                   {:context-path-length-cap          [2 10 100] #_[2 3 5 10 20 35 100]\n                                                    :context-thresh          #_[0.95] [0.975 0.95 0.925 0.9 0.85]\n                                                    :cluster-thresh          #_[0.95] [0.95 0.9 0.75 0.5]\n                                                    :min-match-support                [0] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     2000}))&quot;, :offset 834, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk training-model testing-model results-dir\n                                                   {:context-path-length-cap          [10 20 100] #_[2 3 5 10 20 35 100]\n                                                    :context-thresh          #_[0.95] [0.975 0.95 0.925 0.9 0.85]\n                                                    :cluster-thresh          #_[0.95] [0.95 0.9 0.75 0.5]\n                                                    :min-match-support                [0] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     2000}))&quot;, :offset 835, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]\n            [taoensso.timbre :as log]\n            [taoensso.timbre.appenders.core :as appenders]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [uncomplicate.neanderthal.native :as thal-native]\n            [incanter.core :as incanter]\n            [incanter.io :as inc-io]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]))&quot;, :offset 602, :ns &quot;user&quot;} {:command &quot;(log/merge-config!\n  {:appenders {:spit   (appenders/spit-appender\n                         {:fname (-&gt;&gt; \&quot;biocreative.log\&quot;\n                                      (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot; \&quot;Dep2Rel.log\&quot;)\n                                      (.getAbsolutePath))})\n               :postal {:enabled? false} #_(postal-appender/postal-appender\n                                             {:from \&quot;me@draines.com\&quot; :to \&quot;pielkekid@gmail.com\&quot;})}})&quot;, :offset 442, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(spit (io/file testing-dir \&quot;sentences.edn\&quot;) (pr-str testing-sentences))\n(def testing-sentences-filtered (-&gt;&gt; testing-sentences\n                                     (filter (fn [s]\n                                               (-&gt;&gt; s\n                                                    :entities\n                                                    (map #(get-in base-testing-model [:concept-annotations % :concept]))\n                                                    (set)\n                                                    (allowed-concept-pairs))))\n                                     (map #(update % :property (fn [property] (or (get property-map property)\n                                                                                  re-model/NONE))))))\n(def testing-model (-&gt; base-testing-model\n                       (assoc :sentences testing-sentences-filtered)\n                       (assoc :properties properties)))\n\n;;; SENTENCE STATS ;;;\n\n(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; training-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; testing-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :testing)]))\n(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))\n\n#_(def training-context-paths-plot (evaluation/plot-context-lengths training-model results-dir \&quot;Training %s\&quot;))\n#_(incanter/view training-context-paths-plot)\n#_(def testing-context-paths-plot (evaluation/plot-context-lengths testing-model results-dir \&quot;Test %s\&quot;))\n#_(def testing-context-paths-plot-pos (-&gt; testing-model\n                                          (update :sentences (fn [sentences])\n                                                  (re-model/actual-positive sentences))\n                                          (evaluation/plot-context-lengths\n                                            results-dir \&quot;Pos Test %s\&quot;)))\n#_(def testing-context-paths-plot-neg (-&gt; testing-model\n                                          (update :sentences (fn [sentences]\n                                                               (re-model/actual-negative sentences)))\n                                          (evaluation/plot-context-lengths\n                                            results-dir \&quot;Neg Test %s\&quot;)))\n#_(incanter/view testing-context-paths-plot)\n#_(incanter/view testing-context-paths-plot-pos)\n#_(incanter/view testing-context-paths-plot-neg)\n\n;;; CLUSTERING ;;;\n\n(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :new-matches (:sentences training-model))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))\n(incanter/save (:sentences-dataset clusters-dataset) (str (io/file training-dir \&quot; clusters-dataset.csv \&quot;)))\n(def pca-plots (evaluation/pca-plots clusters-dataset\n                                     {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))\n\n;;; PCA ;;;\n\n#_(def sentences-dataset (evaluation/sentences-&gt;dataset training-model))\n#_(incanter/save (:sentences-dataset sentences-dataset) (str (io/file training-dir \&quot; sentences-dataset.csv \&quot;)))\n#_(def pca-plots (evaluation/pca-plots sentences-dataset\n                                       {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))\n\n\n;;; RELATION EXTRACTION ;;;\n\n(comment\n  ;; This allows me to reset sentences if they get reloaded\n  (def training-model (update training-model\n                              :sentences (fn [sentences]\n                                           (map #(re-model/map-&gt;Sentence %) sentences))))\n  (def testing-model (update testing-model\n                             :sentences (fn [sentences]\n                                          (map #(re-model/map-&gt;Sentence %) sentences)))))\n\n(def prepared-model (-&gt; training-model\n                        (assoc :seed-frac 1\n                               :rng 0.022894\n                               :negative-cap 2000)\n                        (re-model/split-train-test)\n                        (re-model/train-test testing-model)))\n\n(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.9\n                        :confidence-thresh 0\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 5203, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences-filtered (-&gt;&gt; training-sentences-filtered\n                                      (filter (fn [s]\n                                                (-&gt;&gt; s\n                                                     :entities\n                                                     (map #(get-in base-training-model [:concept-annotations % :concept]))\n                                                     (set)\n                                                     (allowed-concept-pairs))))\n                                      (map #(update % :property (fn [property] (or (get property-map property)\n                                                                                   re-model/NONE))))))&quot;, :offset 713, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first  training-sentences)&quot;, :offset 27, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences-filtered (-&gt;&gt; training-sentences\n                                      (filter (fn [s]\n                                                (-&gt;&gt; s\n                                                     :entities\n                                                     (map #(get-in base-training-model [:concept-annotations % :concept]))\n                                                     (set)\n                                                     (allowed-concept-pairs))))\n                                      (map #(update % :property (fn [property] (or (get property-map property)\n                                                                                   re-model/NONE))))))&quot;, :offset 704, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; training-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; testing-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :testing)]))&quot;, :offset 508, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))&quot;, :offset 341, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :new-matches (:sentences training-model))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))\n(incanter/save (:sentences-dataset clusters-dataset) (str (io/file training-dir \&quot; clusters-dataset.csv \&quot;)))\n(def pca-plots (evaluation/pca-plots clusters-dataset\n                                     {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))\n\n;;; PCA ;;;\n\n#_(def sentences-dataset (evaluation/sentences-&gt;dataset training-model))\n#_(incanter/save (:sentences-dataset sentences-dataset) (str (io/file training-dir \&quot; sentences-dataset.csv \&quot;)))\n#_(def pca-plots (evaluation/pca-plots sentences-dataset\n                                       {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))\n\n\n;;; RELATION EXTRACTION ;;;\n\n(comment\n  ;; This allows me to reset sentences if they get reloaded\n  (def training-model (update training-model\n                              :sentences (fn [sentences]\n                                           (map #(re-model/map-&gt;Sentence %) sentences))))\n  (def testing-model (update testing-model\n                             :sentences (fn [sentences]\n                                          (map #(re-model/map-&gt;Sentence %) sentences)))))\n\n(def prepared-model (-&gt; training-model\n                        (assoc :seed-frac 1\n                               :rng 0.022894\n                               :negative-cap 2000)\n                        (re-model/split-train-test)\n                        (re-model/train-test testing-model)))\n\n(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.9\n                        :confidence-thresh 0\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 2214, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :confidence-thresh 0\n                                                       :new-matches (:sentences training-model))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 482, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :confidence-thresh 0\n                                                       :new-matches (map #(assoc % :confidence 1) (:sentences training-model)))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 513, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :confidence-thresh 0\n                                                       :new-matches (map #(assoc % :confidence 1\n                                                                                   :predicted (:property %))\n                                                                         (:sentences training-model)))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))\n(incanter/save (:sentences-dataset clusters-dataset) (str (io/file training-dir \&quot; clusters-dataset.csv \&quot;)))\n(def pca-plots (evaluation/pca-plots clusters-dataset\n                                     {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))&quot;, :offset 938, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :confidence-thresh 0\n                                                       :new-matches (map #(assoc % :confidence 1\n                                                                                   :predicted (:property %))\n                                                                         (:sentences training-model)))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 694, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(vec nil)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :cluster-thresh 0.95\n                                                       :confidence-thresh 0\n                                                       :new-matches (map #(assoc % :confidence 1\n                                                                                   :predicted (:property %)\n                                                                                   :VEC (linear-algebra/unit-vec (:factory training-model)\n                                                                                                                 (:VEC %)))\n                                                                         (:sentences training-model)))\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 956, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (assoc training-model :sentences (-&gt; training-model\n                                                           (assoc :seed-frac 1\n                                                                  :rng 0.022894\n                                                                  :negative-cap 2000\n                                                                  :vector-fn #(re-model/context-vector % training-model))\n                                                           (re-model/split-train-test)\n                                                           (re/pattern-update))))&quot;, :offset 608, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (evaluation/sentences-&gt;dataset (assoc training-model :sentences (-&gt; training-model\n                                                                                          (assoc :seed-frac 1\n                                                                                                 :rng 0.022894\n                                                                                                 :negative-cap 2000\n                                                                                                 :vector-fn #(re-model/context-vector % training-model))\n                                                                                          (re-model/split-train-test)\n                                                                                          (re/pattern-update)))))&quot;, :offset 826, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :seed-frac 1\n                                                       :rng 0.022894\n                                                       :negative-cap 2000\n                                                       :vector-fn #(re-model/context-vector % training-model))\n                                                (re-model/split-train-test)\n                                                (re/pattern-update)\n                                                (doall)))\n                          #_(evaluation/sentences-&gt;dataset)))&quot;, :offset 689, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :seed-frac 1\n                                                       :rng 0.022894\n                                                       :negative-cap 2000\n                                                       :vector-fn #(re-model/context-vector % training-model))\n                                                (re-model/split-train-test)\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 631, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :seed-frac 1\n                                                       :rng 0.022894\n                                                       :negative-cap 2000\n                                                       :confidence-thresh 0\n                                                       :vector-fn #(re-model/context-vector % training-model))\n                                                (re-model/split-train-test)\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 707, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :seed-frac 1\n                                                       :rng 0.022894\n                                                       :negative-cap 2000\n                                                       :confidence-thresh 0\n                                                       :cluster-merge-fn re-model/add-to-pattern\n                                                       :vector-fn #(re-model/context-vector % training-model))\n                                                (re-model/split-train-test)\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 804, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (-&gt; training-model\n                                                (assoc :seed-frac 1\n                                                       :rng 0.022894\n                                                       :negative-cap 2000\n                                                       :confidence-thresh 0\n                                                       :cluster-thresh 0.95\n                                                       :cluster-merge-fn re-model/add-to-pattern\n                                                       :vector-fn #(re-model/context-vector % training-model))\n                                                (re-model/split-train-test)\n                                                (re/pattern-update)))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 880, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:sentences training-model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences (re-model/make-sentences base-training-model))&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn sentences-&gt;dataset\n  [{:keys [properties sentences word2vec-db] :as model}]\n  (word2vec/with-word2vec word2vec-db\n    (assoc model\n      :sentences-dataset (-&gt;&gt; sentences\n                              (filter #(contains? properties (:property %)))\n                              (filter #(re-model/context-vector % model))\n                              (pmap #(flatten-context-vector % model))\n                              (map #(dissoc % :VEC  :entities :concepts :context :support))\n                              (vec)\n                              (incanter/to-dataset)))))&quot;, :offset 582, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]\n            [taoensso.timbre :as log]\n            [taoensso.timbre.appenders.core :as appenders]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [uncomplicate.neanderthal.native :as thal-native]\n            [incanter.core :as incanter]\n            [incanter.io :as inc-io]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;;; FILES ;;;\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n(def results-dir (io/file training-dir \&quot;results\&quot;))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n\n(log/set-level! :info)\n\n(log/merge-config!\n  {:appenders {:spit   (appenders/spit-appender\n                         {:fname (-&gt;&gt; \&quot;biocreative.log\&quot;\n                                      (io/file home-dir)\n                                      (.getAbsolutePath))})\n               :postal {:enabled? false} #_(postal-appender/postal-appender\n                                             {:from \&quot;me@draines.com\&quot; :to \&quot;pielkekid@gmail.com\&quot;})}})\n\n(def factory thal-native/native-double)\n\n(def property-map {\n                   ;\&quot;PART-OF\&quot; \&quot;CPR:1\&quot;\n                   ;\&quot;REGULATOR\&quot; \&quot;CPR:2\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;CPR:2\&quot; \&quot;INDIRECT-REGULATOR\&quot; \&quot;CPR:2\&quot;\n                   \&quot;UPREGULATOR\&quot;   \&quot;CPR:3\&quot; \&quot;ACTIVATOR\&quot; \&quot;CPR:3\&quot; \&quot;INDIRECT-UPREGULATOR\&quot; \&quot;CPR:3\&quot;\n                   \&quot;DOWNREGULATOR\&quot; \&quot;CPR:4\&quot; \&quot;INHIBITOR\&quot; \&quot;CPR:4\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot; \&quot;CPR:4\&quot;\n                   \&quot;AGONIST\&quot;       \&quot;CPR:5\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;CPR:5\&quot; \&quot;AGONIST-INHIBITOR\&quot; \&quot;CPR:5\&quot;\n                   \&quot;ANTAGONIST\&quot;    \&quot;CPR:6\&quot;\n                   ;\&quot;MODULATOR\&quot; \&quot;CPR:7\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;CPR:7\&quot; \&quot;MODULATOR‐INHIBITOR\&quot; \&quot;CPR:7\&quot;\n                   ;\&quot;COFACTOR\&quot; \&quot;CPR:8\&quot;\n                   \&quot;SUBSTRATE\&quot;     \&quot;CPR:9\&quot; \&quot;PRODUCT-OF\&quot; \&quot;CPR:9\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot; \&quot;CPR:9\&quot;\n                   ;\&quot;NOT\&quot; \&quot;CPR:10\&quot;\n                   re-model/NONE   re-model/NONE})\n\n\n\n(def properties (set (vals property-map)))\n\n(def allowed-concept-pairs #{#{\&quot;CHEMICAL\&quot; \&quot;GENE-N\&quot;}\n                             #{\&quot;CHEMICAL\&quot; \&quot;GENE-Y\&quot;}})&quot;, :offset 2913, :ns &quot;user&quot;} {:command &quot;(def training-sentences (slurp (io/file training-dir \&quot;sentences.edn\&quot;)))&quot;, :offset 71, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defrecord Sentence [concepts entities context sent-id full-sentence-text context-text]\n  ContextVector\n  (context-vector [self {:keys [structure-annotations concept-annotations factory] :as model}]\n    (or (:VEC self)\n        (let [context-toks (-&gt;&gt; self\n                                :context\n                                (map #(get structure-annotations %)))\n              v            (-&gt;&gt; self\n                                :entities\n                                (map (fn [e] (get concept-annotations e)))\n                                (lazy-cat context-toks)\n                                (map #(context-vector % model))\n                                (doall)\n                                (apply linear-algebra/vec-sum))]\n          (when v (linear-algebra/unit-vec factory v))))))&quot;, :offset 804, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def training-sentences (clojure.edn/read-string (slurp (io/file training-dir \&quot;sentences.edn\&quot;))))&quot;, :offset 97, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences (clojure.edn/read (slurp (io/file training-dir \&quot;sentences.edn\&quot;))))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences (read-string (slurp (io/file training-dir \&quot;sentences.edn\&quot;))))&quot;, :offset 85, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count training-sentences)&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first training-sentences)&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (assoc {} :sentences training-sentences-filtered\n                                               :properties properties))&quot;, :offset 140, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (assoc {} :sentences training-sentences\n                              :properties properties))&quot;, :offset 114, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-knowtator-view (k/model training-dir nil))\n(rdr/read-biocreative-files training-dir training-pattern training-knowtator-view)\n(def base-training-model (re-model/make-model training-knowtator-view factory word2vec-db))&quot;, :offset 231, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences-filtered (-&gt;&gt; training-sentences\n                                      (filter (fn [s]\n                                                (-&gt;&gt; s\n                                                     :entities\n                                                     (map #(get-in base-training-model [:concept-annotations % :concept]))\n                                                     (set)\n                                                     (allowed-concept-pairs))))\n                                      (map #(update % :property (fn [property] (or (get property-map property) re-model/NONE))))))&quot;, :offset 621, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (assoc base-training-model :sentences training-sentences-filtered\n                                               :properties properties))&quot;, :offset 157, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; training-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :training)\n                                #_(assoc (-&gt;&gt; testing-model\n                                              (re-model/model-params)\n                                              (util/map-kv count))\n                                    :model :testing)]))&quot;, :offset 516, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn update-samples\n  [{:keys [factory]} clusters samples]\n  (log/info (count samples) (count clusters))\n  (uncomplicate/with-release [score-mat (linear-algebra/mdot factory (mapv :VEC samples) (mapv :VEC clusters))]\n    (map-indexed (fn [i sample]\n                   (update sample\n                           :clusters #(merge %\n                                             (-&gt;&gt; clusters\n                                                  (map-indexed (fn [j cluster]\n                                                                 [cluster (get score-mat i j)]))\n                                                  (into {})))))\n                 samples)))&quot;, :offset 657, :ns &quot;cluster-tools&quot;} {:command &quot;(def training-clusters (-&gt; training-model\n                           (assoc :seed-frac 1\n                                  :rng 0.022894\n                                  :negative-cap 2000\n                                  :confidence-thresh 0\n                                  :cluster-thresh 0.95\n                                  :cluster-merge-fn re-model/add-to-pattern\n                                  :vector-fn #(re-model/context-vector % training-model))\n                           (re-model/split-train-test)\n                           #_(re/pattern-update)))&quot;, :offset 571, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:seeds training-clusters))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-clusters (-&gt; training-model\n                           (assoc :seed-frac 1\n                                  :rng 0.022894\n                                  :negative-cap 2000\n                                  :confidence-thresh 0\n                                  :cluster-thresh 0.95\n                                  :cluster-merge-fn re-model/add-to-pattern\n                                  :vector-fn #(re-model/context-vector % training-model))\n                           (re-model/split-train-test)\n                           (re/pattern-update)))&quot;, :offset 569, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first training-clusters)&quot;, :offset 25, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count training-clusters)&quot;, :offset 25, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first training-clusters))&quot;, :offset 33, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (first training-clusters)))&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (first (first training-clusters))))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (first (first training-clusters)))&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (group-by :predicted)\n     (util/map-kv count))&quot;, :offset 75, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (second (first (first training-clusters))))&quot;, :offset 50, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (second (first (first training-clusters)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (:VEC training-clusters)))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (re-model/context-vector training-clusters)))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (first (re-model/context-vector training-model training-clusters)))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (first)\n     (re-model/context-vector training-model)\n     (count))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (first)\n     (keys)\n     #_(re-model/context-vector training-model)\n     #_(count))&quot;, :offset 111, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; training-clusters\n     (first)\n     (keys)\n     (re-model/context-vector training-model)\n     (count))&quot;, :offset 106, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; training-clusters\n    (first)\n    \n    (re-model/context-vector training-model)\n    (count))&quot;, :offset 96, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn sentences-&gt;dataset\n  [{:keys [properties sentences word2vec-db] :as model}]\n  (word2vec/with-word2vec word2vec-db\n    (assoc model\n      :sentences-dataset (-&gt;&gt; sentences\n                              (filter #(contains? properties (:property %)))\n                              (filter #(re-model/context-vector % model))\n                              (pmap #(flatten-context-vector % model))\n                              (map #(dissoc % :VEC  :entities :concepts :context :support :predicted))\n                              (vec)\n                              (incanter/to-dataset)))))&quot;, :offset 593, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences training-clusters)\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 163, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (map #(assoc % :property (:predicted %)))\n     (filter #(contains? properties (:property %)))\n     (filter #(re-model/context-vector % training-model))\n     #_(pmap #(flatten-context-vector % model))\n     (map #(dissoc % :VEC  :entities :concepts :context :support :predicted))\n     (count)\n     #_(vec)\n     #_(incanter/to-dataset))&quot;, :offset 361, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (map #(assoc % :property (:predicted %)))\n     (filter #(contains? properties (:property %)))\n     (filter #(re-model/context-vector % training-model))\n     (pmap #(evaluation/flatten-context-vector % training-model))\n     (map #(dissoc % :VEC  :entities :concepts :context :support :predicted))\n     (count)\n     #_(vec)\n     #_(incanter/to-dataset))&quot;, :offset 379, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; training-clusters\n     (map #(assoc % :property (:predicted %)))\n     (filter #(contains? properties (:property %)))\n     (filter #(re-model/context-vector % training-model))\n     (pmap #(evaluation/flatten-context-vector % training-model))\n     (map #(dissoc % :VEC  :entities :concepts :context :support :predicted))\n     (first)\n     #_(vec)\n     #_(incanter/to-dataset))&quot;, :offset 379, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (map #(assoc % :property (:predicted %)))\n                          (assoc :sentences training-clusters)\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 231, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def clusters-dataset (-&gt; training-model\n                          (assoc :sentences (map #(assoc % :property (:predicted %)) training-clusters))\n                          (evaluation/sentences-&gt;dataset)))&quot;, :offset 205, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/save (:sentences-dataset clusters-dataset) (str (io/file training-dir \&quot; clusters-dataset.csv \&quot;)))&quot;, :offset 107, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def pca-plots (evaluation/pca-plots clusters-dataset\n                                     {:save {:file (io/file results-dir \&quot;%s\&quot;)}}))&quot;, :offset 135, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/view (get pca-plots \&quot;ALL\&quot;))&quot;, :offset 37, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-model (update training-model\n                              :sentences (fn [sentences]\n                                           (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 189, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-model (update testing-model\n                             :sentences (fn [sentences]\n                                          (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 185, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk training-model testing-model results-dir\n                                                   {:context-path-length-cap          [10 100] #_[2 3 5 10 20 35 100]\n                                                    :match-thresh          #_[0.95]   [0.95 0.9 0.85]\n                                                    :cluster-thresh          #_[0.95] [0.95 0.9 0.85]\n                                                    :confidence-thresh                [0.95 0.9 0]\n                                                    :min-match-support                [0 2] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     3000}))&quot;, :offset 917, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(sort-by :score {:score 1} {:score 4} {:score 3})&quot;, :offset 47, :ns &quot;user&quot;} {:command &quot;(sort-by :score [{:score 1} {:score 4} {:score 3}])&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.9\n                        :cluster-thresh 0.95\n                        :confidence-thresh 0\n                        :min-match-support 0\n                        :max-iterations 100\n                        :max-matches 3000\n                        :re-clustering? true)\n                 (evaluation/run-model results-dir)))&quot;, :offset 447, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="Connect to Tantor" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_on_tantor.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="PITCHME" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_pitchme.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false" singleton="true">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2">
        <option name="RunConfigurationTask" enabled="true" run_configuration_name="Connect to Tantor" run_configuration_type="BashConfigurationType" />
      </method>
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Bash.PITCHME" />
      <item itemvalue="Bash.Connect to Tantor" />
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" internal_type="SLIDING" order="0" sideWeight="0.4988938" type="SLIDING" weight="0.1916972" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" sideWeight="0.5011062" side_tool="true" weight="0.1898657" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32843652" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.49880952" weight="0.28331584" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" sideWeight="0.4993895" weight="0.36283186" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.2623295" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.5011905" side_tool="true" weight="0.28331584" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32738718" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2" />
      <window_info active="true" anchor="right" x="0" y="442" width="1600" height="878" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="WINDOWED" visible="true" weight="0.43772894" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="2" />
                  <option value="1" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Readded presentation items" />
    <MESSAGE value="Fns for actual true and negative" />
    <MESSAGE value="Fns for actual positive and negative" />
    <MESSAGE value="minor changes" />
    <MESSAGE value="Cap the number of seeds" />
    <MESSAGE value="Cluster sentences and plot pca" />
    <MESSAGE value="Write sentences out to edn" />
    <MESSAGE value="Cache unit vectors before putting them through clustering" />
    <MESSAGE value="keep instead of map for metrics calculation" />
    <MESSAGE value="Added confidence filter before culstering" />
    <MESSAGE value="Added confidence filter before clustering" />
    <MESSAGE value="set seed confidence to 1" />
    <MESSAGE value="Consider the contribution of all previously added context vectors" />
    <MESSAGE value="Fixes to confidence implementation" />
    <MESSAGE value="Write metrics on each run" />
    <MESSAGE value="Cache pattern-cluster sim" />
    <MESSAGE value="Refactor new-matches to seeds. Calc unit vec in context-vector fn" />
    <MESSAGE value="Write/load model from file" />
    <MESSAGE value="Cluster PCA plotting" />
    <MESSAGE value="Faster clustering using caching and vectors" />
    <MESSAGE value="Don't save model (graphs don't save to edn nicely)" />
    <MESSAGE value="Parallelize pattern creation" />
    <MESSAGE value="Minor" />
    <MESSAGE value="Mostly logging changes" />
    <MESSAGE value="Updated deps" />
    <option name="LAST_COMMIT_MESSAGE" value="Updated deps" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar:///opt/graalvm/src.zip!/java/util/Collection.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="146" column="7" lean-forward="true" selection-start-line="146" selection-start-column="7" selection-end-line="146" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" column="42" selection-start-line="5" selection-start-column="42" selection-end-line="5" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-924" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" column="51" selection-start-line="5" selection-start-column="51" selection-end-line="5" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="61" selection-start-line="20" selection-start-column="61" selection-end-line="20" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="273">
          <caret line="246" column="10" selection-start-line="246" selection-start-column="8" selection-end-line="246" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="535">
          <caret line="30" column="46" selection-start-line="30" selection-start-column="46" selection-end-line="30" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="19" column="6" selection-start-line="19" selection-start-column="6" selection-end-line="19" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="260" selection-start-line="260" selection-end-line="260" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/78ad5ebd65aeff113410c6112bc1ec4c545d7f9d/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="447">
          <caret line="82" column="13" lean-forward="true" selection-start-line="82" selection-start-column="13" selection-end-line="82" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6982794c5919a5f2248ec87e3f72f08d21518e4e/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="49" column="6" selection-start-line="49" selection-start-column="6" selection-end-line="49" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="8" column="10" lean-forward="true" selection-start-line="8" selection-start-column="10" selection-end-line="8" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_pitchme.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="23" lean-forward="true" selection-start-line="2" selection-start-column="23" selection-end-line="2" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_on_tantor.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="55" selection-start-line="2" selection-start-column="55" selection-end-line="2" selection-end-column="55" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/metrics.svg" />
    <entry file="file://$PROJECT_DIR$/.attach_pid8189">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/101b1b52beb68ad4ee3c62a5ed8d68fec6f4f719/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="59" column="6" selection-start-line="59" selection-start-column="6" selection-end-line="59" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/google/inject/guice/4.0/guice-4.0.jar!/com/google/inject/internal/cglib/core/$CodeGenerationException.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="7" column="13" selection-start-line="7" selection-start-column="13" selection-end-line="7" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/lang/Exception.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="44" column="13" selection-start-line="44" selection-start-column="13" selection-end-line="44" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/a9ccf752bc5ff1231a0cbbcfe945eabe439d40d4/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/mikera/core.matrix/0.52.0/core.matrix-0.52.0.jar!/clojure/core/matrix/dataset.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-88">
          <caret line="23" column="6" selection-start-line="23" selection-start-column="6" selection-end-line="23" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-22">
          <caret line="38" column="48" selection-start-line="38" selection-start-column="48" selection-end-line="38" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/datasets.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="20" column="37" selection-start-line="20" selection-start-column="37" selection-end-line="20" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/io.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="182">
          <caret line="203" column="7" lean-forward="true" selection-start-line="203" selection-start-column="7" selection-end-line="203" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/io/File.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2288">
          <caret line="148" column="13" selection-start-line="148" selection-start-column="13" selection-end-line="148" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
    <entry file="file://$PROJECT_DIR$/PITCHME.md" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/b3a4a2eacc14d32386ce389845eba897615388ac/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="336">
          <caret line="39" column="62" lean-forward="true" selection-start-line="39" selection-start-column="62" selection-end-line="39" selection-end-column="62" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="10" column="15" selection-start-line="10" selection-start-column="15" selection-end-line="10" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" lean-forward="true" selection-start-line="5" selection-end-line="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-237">
          <caret line="30" column="21" lean-forward="true" selection-start-line="30" selection-start-column="21" selection-end-line="30" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/PITCHME.css">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="1510" selection-start-line="1510" selection-end-line="1510" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="61" selection-start-line="10" selection-start-column="61" selection-end-line="10" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="528">
          <caret line="30" selection-start-line="30" selection-end-line="30" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="4988" column="6" selection-start-line="4988" selection-start-column="6" selection-end-line="4988" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="257">
          <caret line="36" column="28" selection-start-line="36" selection-start-column="28" selection-end-line="36" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="700">
          <caret line="45" selection-start-line="45" selection-end-line="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="987" column="32" lean-forward="true" selection-start-line="987" selection-start-column="32" selection-end-line="987" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="43" column="6" selection-start-line="43" selection-start-column="6" selection-end-line="43" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/commons/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="129" selection-start-line="129" selection-end-line="129" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="164">
          <caret line="103" lean-forward="true" selection-start-line="103" selection-end-line="103" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="24" column="43" selection-start-line="24" selection-start-column="2" selection-end-line="24" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="66">
          <caret line="3" column="43" selection-start-line="3" selection-start-column="43" selection-end-line="3" selection-end-column="43" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="222" column="25" lean-forward="true" selection-start-line="222" selection-start-column="25" selection-end-line="222" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="85">
          <caret line="179" column="45" selection-start-line="179" selection-start-column="45" selection-end-line="179" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="125">
          <caret line="128" column="46" lean-forward="true" selection-start-line="128" selection-start-column="46" selection-end-line="128" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="314">
          <caret line="290" column="70" lean-forward="true" selection-start-line="290" selection-start-column="70" selection-end-line="290" selection-end-column="70" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Word2Vec-clj</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>