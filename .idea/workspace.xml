<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BookmarkManager">
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="236" />
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="110" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="Make patterns with spec">
      <change afterPath="$PROJECT_DIR$/.idea/git_toolbox_prj.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dictionaries/harrison.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dictionaries/harrison.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/seeds.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/seeds.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Word2Vec-clj" />
              <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Word2Vec-clj" />
                <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$/../hpl-util" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$/../hpl-util" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4675345987000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="2640623760" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="4675026121000" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" value="3032155016" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="4670933584000" />
        <entry key="$PROJECT_DIR$/../hpl-util/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../Word2Vec-clj">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../hpl-util">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Dep2Rel" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="506">
              <caret line="201" column="69" lean-forward="true" selection-start-line="201" selection-start-column="69" selection-end-line="201" selection-end-column="69" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>context-path-f</find>
      <find>save</find>
      <find>to-da</find>
      <find>make-co</find>
      <find>run</find>
      <find>making con</find>
      <find>|</find>
      <find>make-con</find>
      <find>re/con</find>
      <find>chem</find>
      <find>unit-vec</find>
      <find>take</find>
      <find>structure-annot</find>
      <find>match-thresh</find>
      <find>make-mo</find>
      <find>(update prepared-model :seeds (fn [seeds] (take 100 seeds)))</find>
      <find>incan</find>
      <find>sent-id</find>
      <find>info sent-id</find>
      <find>log</find>
      <find>log/</find>
      <find>f1</find>
      <find>12</find>
      <find>1218 12</find>
      <find>:property</find>
      <find>| NONE |</find>
      <find>| CPR:4 |</find>
      <find>| CPR:4 |</find>
      <find>prepared-model</find>
      <find>vector-fn</find>
    </findStrings>
    <replaceStrings>
      <replace>&quot;</replace>
      <replace>let-release</replace>
      <replace>vec-remove</replace>
      <replace>model</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="UPDATE_TYPE" value="REBASE" />
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="PUSH_UPDATE_ALL_ROOTS" value="false" />
    <option name="ROOT_SYNC" value="DONT_SYNC" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="nlm2019" />
      </map>
    </option>
    <option name="RESET_MODE" value="MIXED" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/run/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/../hpl-util/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/run/run_pitchme.sh" />
        <option value="$PROJECT_DIR$/assets/PITCHME.css" />
        <option value="$PROJECT_DIR$/assets/metrics.svg" />
        <option value="$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" />
        <option value="$PROJECT_DIR$/../hpl-util/src/util.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
        <option value="$PROJECT_DIR$/../hpl-util/src/math.clj" />
        <option value="$APPLICATION_CONFIG_DIR$/scratches/scratch.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/seeds.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1600" />
    <option name="y" value="30" />
    <option name="width" value="1120" />
    <option name="height" value="680" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator currentView="Scope" currentSubView="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope" proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="run" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
              <item name="Scratches" type="d62648e6:ScratchProjectViewPane$MyRootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope">
        <subPane subId="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
          </expand>
          <select />
        </subPane>
        <subPane subId="Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="~/Documents/Dep2Rel" type="442cc68d:ScopeViewTreeModel$RootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="$PROJECT_DIR$/run/run_on_tantor.sh&#10;/home/harrison/Documents/hpl-util/target/clojure/core.clj&#10;true&#10;/home/harrison/Documents/hpl-util/target/math.clj&#10;/home/harrison/Documents/hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj&#10;/home/harrison/Documents/Dep2Rel/run/run_pitchme.sh&#10;/home/harrison/Documents/hpl-util/target/cluster_tools.clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Word2Vec-clj/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="zielu.svntoolbox.prj.config" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/lib" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/assets" />
      <recent name="$PROJECT_DIR$/run" />
      <recent name="$PROJECT_DIR$/../hpl-util/src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1561119992658">{:repl-history {:ide [], :local [{:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width :data (incanter/get-dataset :iris) :group-by :Species))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(incanter/view (inc-charts/scatter-plot :Sepal.Length :Sepal.Width \n                             :data (incanter/get-dataset :iris) \n                             :group-by :Species))&quot;, :offset 10, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [uncomplicate-context-alg :as context]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]))&quot;, :offset 484, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 178, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.datasets/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 120, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.core/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 116, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(use '(incanter core datasets))\n(def iris (get-dataset :iris))\n(view iris)&quot;, :offset 74, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width                     :data (get-dataset :iris)                    :group-by :Species))&quot;, :offset 132, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width :data \n                    (get-dataset :iris) :group-by :Species))&quot;, :offset 23, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width \n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 106, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color)) \n           (view $data) \n           (view (inc-charts/bar-chart :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color))\n           (view (inc-charts/scatter-plot :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 97, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 111, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 35, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3]\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3] 2\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 161, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label :Species\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 160, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species 1}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label (sel (get-dataset :iris) :cols :Species)\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 301, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label 'x\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 153, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                              :legend true\n                              :series-label 'x\n                              :data (get-dataset :iris)\n                              :group-by :Species))&quot;, :offset 4, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def plot (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                   :legend true\n                                   :series-label 'x\n                                   :data (get-dataset :iris)\n                                   :group-by :Species))&quot;, :offset 9, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-categories plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 41, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 27, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10 10 10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 42, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(get (map identity [1 2 3]) 0)&quot;, :offset 26, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 59, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view plot)&quot;, :offset 11, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400\n                                                ] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 108, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tB\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tB\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :TB\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tb\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir \&quot;TB\&quot;\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 215, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;assets/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 203, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;assets/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 203, :ns &quot;scripts.examples&quot;} {:command &quot;(defn make-sentence\n  \&quot;Make a sentence using the sentence graph and entities\&quot;\n  [model undirected-sent sent-id [ann1 ann2 :as anns]]\n  ;; TODO: Remove context toks that are part of the entities\n  (let [concepts           (-&gt;&gt; anns\n                                (map :concept)\n                                (map #(conj #{} %))\n                                (set))\n        entities           (-&gt;&gt; anns\n                                (map :id)\n                                (set))\n        context (apply min-key count (for [tok1 (:toks ann1)\n                                           tok2 (:toks ann2)]\n                                       (make-context-path model undirected-sent sent-id tok1 tok2)))\n        full-sentence-text (pprint-sent-text model sent-id)\n        context-text       (pprint-toks-text model context)]\n    (-&gt;Sentence concepts entities context sent-id full-sentence-text context-text)))&quot;, :offset 916, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;}], :remote [{:command &quot;(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))&quot;, :offset 341, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count))&quot;, :offset 288, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] nil #_(-&gt;&gt; with-seed-scores\n                                                       (filter #(&lt; 3 (:seed-match %)))\n                                                       (remove #(= (:predicted %) re-model/NONE))\n                                                       #_(take 500))))\n                 (assoc :patterns (-&gt;&gt; with-selectivity\n                                       (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                                       (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                       (filter (fn [{:keys [f1]}] (&lt; 0.4 f1))))\n                        :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 2\n                        :max-iterations 0\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/concept-context-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 1146, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.3 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count))&quot;, :offset 288, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] nil #_(-&gt;&gt; with-seed-scores\n                                                       (filter #(&lt; 3 (:seed-match %)))\n                                                       (remove #(= (:predicted %) re-model/NONE))\n                                                       #_(take 500))))\n                 (assoc :patterns (-&gt;&gt; with-selectivity\n                                       (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                                       (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                       (filter (fn [{:keys [f1]}] (&lt; 0.3 f1))))\n                        :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 2\n                        :max-iterations 0\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/concept-context-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 1146, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(range 1 0 0.5)&quot;, :offset 15, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(range  1 0 0.05)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(range 1 0 -0.05)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def with-selectivity (some (fn [match-thresh]\n                              (let [ps (-&gt; prepared-model\n                                           (assoc :patterns with-seed-scores-nones\n                                                  :match-thresh match-thresh\n                                                  :pattern-seed-matches 1\n                                                  :vector-fn #(re-model/context-vector % prepared-model))\n                                           (re/pattern-seed-match-ratio))]\n                                (when (-&gt;&gt; ps\n                                           (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                           (filter (fn [{:keys [recall]}] (&lt; 0.5 recall)))\n                                           #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                           (group-by :predicted)\n                                           (util/map-kv count)\n                                           (map second)\n                                           (filter #(&lt; 10 %))\n                                           (count)\n                                           (= (count properties)))\n                                  ps)))\n                            (range 0.95 0 -0.05)))&quot;, :offset 1291, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def with-selectivity (some (fn [match-thresh]\n                              (let [ps (-&gt; prepared-model\n                                           (assoc :patterns with-seed-scores-nones\n                                                  :match-thresh match-thresh\n                                                  :pattern-seed-matches 1\n                                                  :vector-fn #(re-model/context-vector % prepared-model))\n                                           (re/pattern-seed-match-ratio))]\n                                (when (-&gt;&gt; ps\n                                           (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                           (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                                           #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                           (group-by :predicted)\n                                           (util/map-kv count)\n                                           (map second)\n                                           (filter #(&lt; 10 %))\n                                           (count)\n                                           (= (count properties)))\n                                  ps)))\n                            (range 0.95 0 -0.05)))&quot;, :offset 1291, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(seq with-selectivity)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def with-selectivity (-&gt;&gt; (for [cluster-thresh (range 0.9 0.5 -0.05)\n                                 :let [ps (re/pattern-update (-&gt; prepared-model\n                                                                 (assoc :pattern-seed-matches 1\n                                                                        :cluster-thresh cluster-thresh\n                                                                        :confidence-thresh 0\n                                                                        :cluster-merge-fn re-model/add-to-pattern\n                                                                        :vector-fn #(re-model/context-vector % prepared-model))))]\n                                 match-thresh   (range 0.95 0.5 -0.05)]\n                             (-&gt; prepared-model\n                                 (assoc :patterns ps\n                                        :match-thresh match-thresh\n                                        :pattern-seed-matches 1\n                                        :vector-fn #(re-model/context-vector % prepared-model))\n                                 (re/pattern-seed-match-ratio)))\n                           #_(filter (fn [ps]\n                                       (-&gt;&gt; ps\n                                            (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                            (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                                            #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                            (group-by :predicted)\n                                            (util/map-kv count)\n                                            (map second)\n                                            (filter #(&lt; 10 %))\n                                            (count)\n                                            (= (count properties)))))\n                           (first)))&quot;, :offset 1927, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.25 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     (= (count properties)))&quot;, :offset 371, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.25 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     #_(= (count properties)))&quot;, :offset 373, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.25 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     #_(map second)\n     #_(filter #(&lt; 0 %))\n     #_(count)\n     #_(= (count properties)))&quot;, :offset 379, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     #_(map second)\n     #_(filter #(&lt; 0 %))\n     #_(count)\n     #_(= (count properties)))&quot;, :offset 376, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def with-selectivity (-&gt;&gt; #_(for [cluster-thresh (range 0.9 0.5 -0.05)\n                                   :let [ps (re/pattern-update (-&gt; prepared-model\n                                                                   (assoc :pattern-seed-matches 1\n                                                                          :cluster-thresh cluster-thresh\n                                                                          :confidence-thresh 0\n                                                                          :cluster-merge-fn re-model/add-to-pattern\n                                                                          :vector-fn #(re-model/context-vector % prepared-model))))]\n                                   match-thresh   (range 0.95 0.5 -0.05)]\n                               (-&gt; prepared-model\n                                   (assoc :patterns ps\n                                          :match-thresh match-thresh\n                                          :pattern-seed-matches 1\n                                          :vector-fn #(re-model/context-vector % prepared-model))\n                                   (re/pattern-seed-match-ratio)))\n                        with-selectivity\n                        (filter (fn [ps]\n                                  (-&gt;&gt; ps\n                                       (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                       (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                                       #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                       (group-by :predicted)\n                                       (util/map-kv count)\n                                       (map second)\n                                       (filter #(&lt; 10 %))\n                                       (count)\n                                       (= (count properties)))))\n                        (first)))&quot;, :offset 1938, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(dissoc (first with-selectivity) :VEC)&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:f1 (first with-selectivity))&quot;, :offset 30, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :f1 (first with-selectivity))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :f1 with-selectivity)&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(remove seq (map :f1 with-selectivity))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(filter nil?  (map :f1 with-selectivity))&quot;, :offset 41, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (filter nil?  (map :f1 with-selectivity)))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-seed-match-ratio\n  [{:keys [seeds match-thresh] :as model}]\n  (let [patterns (pattern-seed-match-scores model)\n        seeds-m  (-&gt;&gt; seeds\n                      (map-indexed vector)\n                      (group-by #(:predicted (second %)))\n                      (util/map-kv #(map first %)))]\n    (map (fn [p]\n           (let [predicted-positive (-&gt;&gt; p\n                                         :seed-match-scores\n                                         (filter #(&lt; match-thresh %))\n                                         (count))]\n             (if (= 0 predicted-positive)\n               (assoc p :recall 0\n                        :precision 0\n                        :f1 0)\n               (let [tp              (-&gt;&gt; p\n                                          :predicted\n                                          (get seeds-m)\n                                          (select-keys (:seed-match-scores p))\n                                          (vals)\n                                          (filter #(&lt; match-thresh %))\n                                          (count))\n                     actual-positive (count (get seeds-m (:predicted p)))\n                     fp              (- predicted-positive tp)\n                     fn              (- actual-positive tp)\n                     precision       (/ tp predicted-positive)\n                     recall          (/ tp actual-positive)]\n                 (assoc p :precision precision\n                          :recall recall\n                          :f1 (/ (* 2 precision recall)\n                                 (+ precision recall))\n                          :tp tp\n                          :fp fp\n                          :fn fn\n                          :fn (- (count seeds) tp fp fn))))))\n\n         patterns)))&quot;, :offset 1797, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0.4 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     #_(map second)\n     #_(filter #(&lt; 0 %))\n     #_(count)\n     #_(= (count properties)))&quot;, :offset 380, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-seed-match-ratio\n  [{:keys [seeds match-thresh] :as model}]\n  (let [patterns (pattern-seed-match-scores model)\n        seeds-m  (-&gt;&gt; seeds\n                      (map-indexed vector)\n                      (group-by #(:predicted (second %)))\n                      (util/map-kv #(map first %)))]\n    (map (fn [p]\n           (let [predicted-positive (-&gt;&gt; p\n                                         :seed-match-scores\n                                         (filter #(&lt; match-thresh %))\n                                         (count))]\n             (if (= 0 predicted-positive)\n               (assoc p :recall 0\n                        :precision 0\n                        :f1 0)\n               (let [tp              (-&gt;&gt; p\n                                          :predicted\n                                          (get seeds-m)\n                                          (select-keys (:seed-match-scores p))\n                                          (vals)\n                                          (filter #(&lt; match-thresh %))\n                                          (count))\n                     actual-positive (count (get seeds-m (:predicted p)))\n                     fp              (- predicted-positive tp)\n                     fn              (- actual-positive tp)\n                     precision       (/ tp predicted-positive)\n                     recall          (/ tp actual-positive)]\n                 (assoc p\n                   :tp tp\n                   :fp fp\n                   :fn fn\n                   :fn (- (count seeds) tp fp fn)\n                   :recall recall\n                   :precision precision\n                   :f1 (if (or (= 0 precision) (= 0 recall))\n                         (assoc p :f1 0)\n                         (assoc p :f1 (/ (* 2 precision recall)\n                                         (+ precision recall)))))))))\n\n         patterns)))&quot;, :offset 1901, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def with-selectivity (-&gt;&gt; (for [cluster-thresh (range 0.9 0.5 -0.05)\n                                 :let [ps (re/pattern-update (-&gt; prepared-model\n                                                                 (assoc :pattern-seed-matches 1\n                                                                        :cluster-thresh cluster-thresh\n                                                                        :confidence-thresh 0\n                                                                        :cluster-merge-fn re-model/add-to-pattern\n                                                                        :vector-fn #(re-model/context-vector % prepared-model))))]\n                                 match-thresh   (range 0.95 0.5 -0.05)]\n                             (-&gt; prepared-model\n                                 (assoc :patterns ps\n                                        :match-thresh match-thresh\n                                        :pattern-seed-matches 1\n                                        :vector-fn #(re-model/context-vector % prepared-model))\n                                 (re/pattern-seed-match-ratio)))\n                           (filter (fn [ps]\n                                     (-&gt;&gt; ps\n                                          (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                          (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                                          #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                          (group-by :predicted)\n                                          (util/map-kv count)\n                                          (map second)\n                                          (filter #(&lt; 10 %))\n                                          (count)\n                                          (= (count properties)))))\n                           (first)))&quot;, :offset 1905, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 523, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [with-selectivity]\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 525, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove #(nil? (:f1 %)))\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 553, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove #(nil? (:f1 %)))\n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 568, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove #(nil? (:f1 %)))\n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 570, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove #(nil? (:f1 %)))\n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 572, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(remove #(nil? (:f1 %)))\n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 574, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(remove #(nil? (:f1 %)))\n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 576, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 10 %))\n                    (count)\n                    (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 578, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 577, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 604, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 626, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     (util/map-kv count)\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 651, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     (= (count properties))\n     \n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 739, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 735, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 736, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 838, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 836, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 834, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(remove #(nil? (:f1 %)))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 832, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     #_(remove #(nil? (:f1 %)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 832, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [f1]}] (not (nil? f1))))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 850, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 844, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n    \n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 590, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n    \n     (into [])\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 821, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n    \n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 849, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n    \n     #_(into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(count))&quot;, :offset 847, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (remove (fn [{:keys [f1]}] (nil? f1)))\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n    \n     (into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     #_(count))&quot;, :offset 843, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n    \n     (into [])\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     #_(count))&quot;, :offset 870, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     \n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     #_(count))&quot;, :offset 856, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 10 %))\n     (count)\n     (= (count properties))\n     \n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_first\n     #_(count))&quot;, :offset 856, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     #first\n     #_(count))&quot;, :offset 842, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)))\n               (= (count properties)))\n     #_first\n     #_(count))&quot;, :offset 858, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 841, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     (first)\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 843, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     (count))&quot;, :offset 852, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; 0 %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 850, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 828, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 824, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [(-&gt;&gt; with-selectivity\n           (remove (fn [{:keys [f1]}] (nil? f1))))]\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 820, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; (for [x [(-&gt;&gt; with-selectivity\n                   (remove (fn [{:keys [f1]}] (nil? f1))))]]\n       x)\n     ;(filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n     ;(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     ;(group-by :predicted)\n     ;(util/map-kv count)\n     ;(map second)\n     ;(filter #(&lt; 10 %))\n     ;(count)\n     ;(= (count properties))\n     ;\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    (filter (fn [{:keys [f1]}] (&lt; 0 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (count))&quot;, :offset 847, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn pattern-seed-match-ratio\n  [{:keys [seeds match-thresh] :as model}]\n  (let [patterns (pattern-seed-match-scores model)\n        seeds-m  (-&gt;&gt; seeds\n                      (map-indexed vector)\n                      (group-by #(:predicted (second %)))\n                      (util/map-kv #(map first %)))]\n    (map (fn [p]\n           (let [predicted-positive (-&gt;&gt; p\n                                         :seed-match-scores\n                                         (filter #(&lt; match-thresh %))\n                                         (count))]\n             (if (= 0 predicted-positive)\n               (assoc p :recall 0\n                        :precision 0\n                        :f1 0)\n               (let [tp              (-&gt;&gt; p\n                                          :predicted\n                                          (get seeds-m)\n                                          (select-keys (:seed-match-scores p))\n                                          (vals)\n                                          (filter #(&lt; match-thresh %))\n                                          (count))\n                     actual-positive (count (get seeds-m (:predicted p)))\n                     fp              (- predicted-positive tp)\n                     fn              (- actual-positive tp)\n                     precision       (/ tp predicted-positive)\n                     recall          (/ tp actual-positive)]\n                 (assoc p\n                   :tp tp\n                   :fp fp\n                   :fn fn\n                   :fn (- (count seeds) tp fp fn)\n                   :recall recall\n                   :precision precision\n                   :f1 (if (or (= 0 precision) (= 0 recall))\n                         0\n                         (/ (* 2 precision recall)\n                            (+ precision recall))))))))\n\n         patterns)))&quot;, :offset 1860, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def with-selectivity (-&gt;&gt; (for [cluster-thresh (range 0.9 0.5 -0.05)\n                                 :let [ps (re/pattern-update (-&gt; prepared-model\n                                                                 (assoc :pattern-seed-matches 1\n                                                                        :cluster-thresh cluster-thresh\n                                                                        :confidence-thresh 0\n                                                                        :cluster-merge-fn re-model/add-to-pattern\n                                                                        :vector-fn #(re-model/context-vector % prepared-model))))]\n                                 match-thresh   (range 0.95 0.5 -0.05)]\n                             (-&gt; prepared-model\n                                 (assoc :patterns ps\n                                        :match-thresh match-thresh\n                                        :pattern-seed-matches 1\n                                        :vector-fn #(re-model/context-vector % prepared-model))\n                                 (re/pattern-seed-match-ratio)))\n                           (filter (fn [ps]\n                                     (-&gt;&gt; ps\n                                          (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                          (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n                                          #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                          (group-by :predicted)\n                                          (util/map-kv count)\n                                          (map second)\n                                          (filter #(&lt; 0 %))\n                                          (count)\n                                          (= (count properties)))))\n                           (first)))&quot;, :offset 1904, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; with-selectivity\n     (filter (fn [{:keys [recall]}] (&lt; 0.3 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [support]}] (&lt; 0 (count support))))\n     (group-by :predicted)\n     (util/map-kv count)\n     #_(map second)\n     #_(filter #(&lt; 0 %))\n     #_(count)\n     #_(= (count properties)))&quot;, :offset 380, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count with-selectivity)&quot;, :offset 24, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def with-selectivity (-&gt;&gt; (for [cluster-thresh (range 0.9 0.5 -0.05)\n                                 :let [ps (re/pattern-update (-&gt; prepared-model\n                                                                 (assoc :pattern-seed-matches 1\n                                                                        :cluster-thresh cluster-thresh\n                                                                        :confidence-thresh 0\n                                                                        :cluster-merge-fn re-model/add-to-pattern\n                                                                        :vector-fn #(re-model/context-vector % prepared-model))))]\n                                 match-thresh   (range 0.95 0.5 -0.05)]\n                             (-&gt; prepared-model\n                                 (assoc :patterns ps\n                                        :match-thresh match-thresh\n                                        :pattern-seed-matches 1\n                                        :vector-fn #(re-model/context-vector % prepared-model))\n                                 (re/pattern-seed-match-ratio)))\n                           (filter (fn [ps]\n                                     (-&gt;&gt; ps\n                                          (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                                          (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                                          #_(filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                                          (group-by :predicted)\n                                          (util/map-kv count)\n                                          (map second)\n                                          (filter #(&lt; 0 %))\n                                          (count)\n                                          (= (count properties)))))\n                           (first)))&quot;, :offset 1902, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def prepared-model (assoc split-model\n                      :all-seed-patterns (seeds/all-seed-patterns split-model\n                                                                  {:cluster-thresh (range 0.9 0.5 -0.05)\n                                                                   :match-thresh   (range 0.9 0.5 -0.05)})))\n\n(def results (-&gt; prepared-model\n                 #_(update :seeds (fn [seeds] (-&gt;&gt; seeds\n                                                   (remove #(= (:predicted %) re-model/NONE))\n                                                   (take 500))))\n                 (assoc :patterns (-&gt; prepared-model\n                                      :all-seed-patterns\n                                      (seeds/seed-patterns-with-selectivity {:f1 0.4}))\n                        :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 0\n                        :max-iterations 0 `\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/concept-context-match\n                        re/support-weighted-sim-pattern-distribution-context-match\n                        re/sim-to-support-in-pattern-match)\n\n                 (evaluation/run-model results-dir)))\n\n(evaluation/calc-metrics results)\n(count (:matches results))&quot;, :offset 1459, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; prepared-model\n    :all-seed-patterns\n    (seeds/seed-patterns-with-selectivity {:f1 0.4})\n    (group-by :predicted)\n    (util/map-kv count))&quot;, :offset 145, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn seed-patterns-with-selectivity\n  [{:keys                          [min-f1 min-recall min-precision]\n    {:keys [min-count properties]} :min-patterns-per-property\n    :or                            {min-f1        0\n                                    min-recall    0\n                                    min-precision 0\n                                    min-count     0\n                                    properties    nil}} \n   seed-patterns]\n  (let [patterns (-&gt;&gt; seed-patterns\n                      (filter (fn [ps]\n                                (-&gt;&gt; ps\n                                     (filter (fn [{:keys [f1]}] (&lt; min-f1 f1)))\n                                     (filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                                     (filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                                     (group-by :predicted)\n                                     (util/map-kv count)\n                                     (map second)\n                                     (filter #(&lt; min-count %))\n                                     (count)\n                                     (= (count properties)))))\n                      (first))]\n    (log/info (-&gt;&gt; seed-patterns\n                   (group-by :predicted)\n                   (util/map-kv count)))\n    patterns))&quot;, :offset 1337, :ns &quot;edu.ucdenver.ccp.nlp.seeds&quot;} {:command &quot;(defn seed-patterns-with-selectivity\n  [{:keys                          [min-f1 min-recall min-precision]\n    {:keys [min-count properties]} :min-patterns-per-property\n    :or                            {min-f1        0\n                                    min-recall    0\n                                    min-precision 0\n                                    min-count     0\n                                    properties    nil}} \n   seed-patterns]\n  (let [patterns (-&gt;&gt; seed-patterns\n                      (filter (fn [ps]\n                                (-&gt;&gt; ps\n                                     (filter (fn [{:keys [f1]}] (&lt; min-f1 f1)))\n                                     (filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                                     (filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                                     (group-by :predicted)\n                                     (util/map-kv count)\n                                     (map second)\n                                     (filter #(&lt; min-count %))\n                                     (count)\n                                     (= (count properties)))))\n                      (first))]\n    (log/info (-&gt;&gt; patterns\n                   (group-by :predicted)\n                   (util/map-kv count)))\n    patterns))&quot;, :offset 1332, :ns &quot;edu.ucdenver.ccp.nlp.seeds&quot;} {:command &quot;(-&gt;&gt; prepared-model\n    :all-seed-patterns\n    (seeds/seed-patterns-with-selectivity {:f1 0.4})\n    (group-by :predicted)\n    (util/map-kv count))&quot;, :offset 146, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n    :all-seed-patterns\n    (seeds/seed-patterns-with-selectivity {:f1 0.4})\n    (first)\n    #_(group-by :predicted)\n    #_(util/map-kv count))&quot;, :offset 162, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n    :all-seed-patterns\n    (seeds/seed-patterns-with-selectivity {:f1 0.4})\n    (first)\n     :f1\n    #_(group-by :predicted)\n    #_(util/map-kv count))&quot;, :offset 171, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (seeds/seed-patterns-with-selectivity {:f1 0.4})\n     (first)\n\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     (= (count properties))\n     #_(group-by :predicted)\n     #_(util/map-kv count))&quot;, :offset 455, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (seeds/seed-patterns-with-selectivity {:f1 0.4})\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (group-by :predicted)\n     (util/map-kv count)\n     (map second)\n     (filter #(&lt; 0 %))\n     (count)\n     (= (count properties))\n     #_(group-by :predicted)\n     #_(util/map-kv count))&quot;, :offset 441, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (seeds/seed-patterns-with-selectivity {:f1 0.4})\n     (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n     (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n     (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n     (first)\n     #_(group-by :predicted)\n     #_(util/map-kv count)\n     #_(map second)\n     #_(filter #(&lt; 0 %))\n     #_(count)\n     #_(= (count properties))\n     #_(group-by :predicted)\n     #_(util/map-kv count))&quot;, :offset 466, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (count)\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     #_(first)\n     #_(first))&quot;, :offset 612, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (count)\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (first)\n     :f1)&quot;, :offset 617, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (first)\n     :f1)&quot;, :offset 604, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (first)\n     :precision)&quot;, :offset 611, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (first)\n     :recall)&quot;, :offset 608, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (map :f1))&quot;, :offset 597, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      (filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; min-recall recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      (group-by :predicted)\n                      (util/map-kv count)\n                      (map second)\n                      (filter #(&lt; min-count %))\n                      (count)\n                      (= (count properties)))))\n     (first)\n     (map :precision))&quot;, :offset 604, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                    (group-by :predicted)\n                    (util/map-kv count)\n                    (map second)\n                    (filter #(&lt; 0 %))\n                    (count)\n                    (= (count properties)))))\n     (first)\n     (map :recall))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                    #_(group-by :predicted)\n                    #_(util/map-kv count)\n                    #_(map second)\n                    #_(filter #(&lt; 0 %))\n                    (seq)\n                    #_(count)\n                    #_(= (count properties)))))\n     (first)\n     (map :recall))&quot;, :offset 602, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                    #_(group-by :predicted)\n                    #_(util/map-kv count)\n                    #_(map second)\n                    #_(filter #(&lt; 0 %))\n                    (seq)\n                    #_(count)\n                    #_(= (count properties)))))\n     (first)\n     (map :recall))&quot;, :offset 600, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      (filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                      #_(filter (fn [{:keys [precision]}] (&lt; min-precision precision)))\n                      #_(group-by :predicted)\n                      #_(util/map-kv count)\n                      #_(map second)\n                      #_(filter #(&lt; 0 %))\n                      (seq)\n                      #_(count)\n                      #_(= (count properties)))))\n     (last)\n     (map :recall))&quot;, :offset 623, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (filter (fn [ps]\n               (-&gt;&gt; ps\n                    #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                    #_(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                    (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                    #_(group-by :predicted)\n                    #_(util/map-kv count)\n                    #_(map second)\n                    #_(filter #(&lt; 0 %))\n                    (seq)\n                    #_(count)\n                    #_(= (count properties)))))\n     (first)\n     (map :precision))&quot;, :offset 591, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (first)\n     (seeds/pattern-seed-match-ratio)\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                      (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      #_(group-by :predicted)\n                      #_(util/map-kv count)\n                      #_(map second)\n                      #_(filter #(&lt; 0 %))\n                      (seq)\n                      #_(count)\n                      #_(= (count properties)))))\n     #_(first)\n     (map :precision))&quot;, :offset 668, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; prepared-model\n     :all-seed-patterns\n     (first)\n     (count)\n     #_(seeds/pattern-seed-match-ratio)\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                      (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      #_(group-by :predicted)\n                      #_(util/map-kv count)\n                      #_(map second)\n                      #_(filter #(&lt; 0 %))\n                      (seq)\n                      #_(count)\n                      #_(= (count properties)))))\n     #_(first)\n     #_(map :precision))&quot;, :offset 685, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; (assoc prepared-model :patterns (:all-seed-patterns prepared-model))\n     (seeds/pattern-seed-match-ratio)\n     (count)\n     #_(filter (fn [ps]\n                 (-&gt;&gt; ps\n                      #_(filter (fn [{:keys [f1]}] (&lt; 0.4 f1)))\n                      #_(filter (fn [{:keys [recall]}] (&lt; 0 recall)))\n                      (filter (fn [{:keys [precision]}] (&lt; 0 precision)))\n                      #_(group-by :predicted)\n                      #_(util/map-kv count)\n                      #_(map second)\n                      #_(filter #(&lt; 0 %))\n                      (seq)\n                      #_(count)\n                      #_(= (count properties)))))\n     #_(first)\n     #_(map :precision))&quot;, :offset 700, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:all-seed-patterns prepared-model))&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="Connect to Tantor" type="BashConfigurationType" factoryName="Bash" activateToolWindowBeforeRun="false">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_on_tantor.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="PITCHME" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_pitchme.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false" singleton="true">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Bash.PITCHME" />
      <item itemvalue="Bash.Connect to Tantor" />
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" internal_type="SLIDING" order="0" sideWeight="0.4988938" type="SLIDING" weight="0.1916972" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" sideWeight="0.5011062" side_tool="true" weight="0.1898657" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32832617" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.49880952" weight="0.28331584" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" sideWeight="0.4993895" weight="0.4921301" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.2623295" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.5011905" side_tool="true" weight="0.28176796" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32738718" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" show_stripe_button="false" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2" />
      <window_info active="true" anchor="right" x="1" y="443" width="1598" height="876" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="WINDOWED" visible="true" weight="0.43772894" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="COLUMN_ORDER">
      <list>
        <option value="0" />
        <option value="2" />
        <option value="3" />
        <option value="1" />
      </list>
    </option>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="2" />
                  <option value="1" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="More general score caching fn" />
    <MESSAGE value="Find matches using score distribution" />
    <MESSAGE value="Improved speed of distribution based match fh" />
    <MESSAGE value="Improved speed of distribution based match fn" />
    <MESSAGE value="Clean up" />
    <MESSAGE value="Match by sim to all support" />
    <MESSAGE value="fixed offset" />
    <MESSAGE value="Changes and horizontal dep example" />
    <MESSAGE value="Trying to assign more accurate tokens to entities" />
    <MESSAGE value="Changes" />
    <MESSAGE value="Biocreative dir for results" />
    <MESSAGE value="Just try and catch statistical exceptions (e.g. 0 variance due to all the same word)" />
    <MESSAGE value="Updated table" />
    <MESSAGE value="Log current values before termination" />
    <MESSAGE value="Fixed concept context match fn" />
    <MESSAGE value="Fixed sim to support in pattern when there are no scores with bad &lt; good" />
    <MESSAGE value="Fixed overall metrics so it works even if a class isn't matches" />
    <MESSAGE value="Check for valid values during evaluation metrics calc" />
    <MESSAGE value="Filter patterns by number of matches to seeds" />
    <MESSAGE value="Final for NLM 2019 slides" />
    <MESSAGE value="Fixed f1 not set correctly" />
    <MESSAGE value="Not using generic vector fn in bootstrapping anymore" />
    <MESSAGE value="Separate seed filter (by confidence) step" />
    <MESSAGE value="Seed filtering steps" />
    <MESSAGE value="Seed filtering fns" />
    <option name="LAST_COMMIT_MESSAGE" value="Seed filtering fns" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/run/run_pitchme.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="23" lean-forward="true" selection-start-line="2" selection-start-column="23" selection-end-line="2" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/metrics.svg" />
    <entry file="file://$PROJECT_DIR$/.attach_pid8189">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/101b1b52beb68ad4ee3c62a5ed8d68fec6f4f719/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="59" column="6" selection-start-line="59" selection-start-column="6" selection-end-line="59" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/google/inject/guice/4.0/guice-4.0.jar!/com/google/inject/internal/cglib/core/$CodeGenerationException.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="7" column="13" selection-start-line="7" selection-start-column="13" selection-end-line="7" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/lang/Exception.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="44" column="13" selection-start-line="44" selection-start-column="13" selection-end-line="44" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/a9ccf752bc5ff1231a0cbbcfe945eabe439d40d4/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/mikera/core.matrix/0.52.0/core.matrix-0.52.0.jar!/clojure/core/matrix/dataset.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-88">
          <caret line="23" column="6" selection-start-line="23" selection-start-column="6" selection-end-line="23" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-22">
          <caret line="38" column="48" selection-start-line="38" selection-start-column="48" selection-end-line="38" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/datasets.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="20" column="37" selection-start-line="20" selection-start-column="37" selection-end-line="20" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/io.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="182">
          <caret line="203" column="7" lean-forward="true" selection-start-line="203" selection-start-column="7" selection-end-line="203" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/io/File.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2288">
          <caret line="148" column="13" selection-start-line="148" selection-start-column="13" selection-end-line="148" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/b3a4a2eacc14d32386ce389845eba897615388ac/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="336">
          <caret line="39" column="62" lean-forward="true" selection-start-line="39" selection-start-column="62" selection-end-line="39" selection-end-column="62" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" lean-forward="true" selection-start-line="5" selection-end-line="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/PITCHME.css" />
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="61" selection-start-line="10" selection-start-column="61" selection-end-line="10" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="528">
          <caret line="30" selection-start-line="30" selection-end-line="30" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="4988" column="6" selection-start-line="4988" selection-start-column="6" selection-end-line="4988" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="257">
          <caret line="36" column="28" selection-start-line="36" selection-start-column="28" selection-end-line="36" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="987" column="32" lean-forward="true" selection-start-line="987" selection-start-column="32" selection-end-line="987" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="43" column="6" selection-start-line="43" selection-start-column="6" selection-end-line="43" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/commons/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="129" selection-start-line="129" selection-end-line="129" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5af4d2a82910c4972c929cf26f1312bc41a320a4/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="208">
          <caret line="15" column="59" selection-start-line="15" selection-start-column="42" selection-end-line="15" selection-end-column="102" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5af4d2a82910c4972c929cf26f1312bc41a320a4/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="142">
          <caret line="27" column="6" selection-start-line="27" selection-start-column="6" selection-end-line="27" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/clojure/core_deftype.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="582" selection-start-line="582" selection-end-line="582" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/ubergraph/alg.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="187" selection-start-line="187" selection-end-line="187" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="295">
          <caret line="64" column="37" selection-start-line="64" selection-start-column="37" selection-end-line="64" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="748">
          <caret line="34" column="39" selection-start-line="34" selection-start-column="39" selection-end-line="34" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="213">
          <caret line="88" column="38" selection-start-line="88" selection-start-column="38" selection-end-line="88" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_on_tantor.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="29" lean-forward="true" selection-start-line="2" selection-start-column="29" selection-end-line="2" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="4997" selection-start-line="4997" selection-end-line="4997" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="101" selection-start-line="4" selection-start-column="101" selection-end-line="4" selection-end-column="101" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="507">
          <caret line="45" column="12" selection-start-line="45" selection-start-column="6" selection-end-line="46" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/taoensso/timbre/appenders/example.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="653">
          <caret line="48" column="73" selection-start-line="48" selection-start-column="73" selection-end-line="48" selection-end-column="73" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/PITCHME.md" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/700f544f03fea43dca541628e3f2e528e7e26233/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="486">
          <caret line="57" column="16" selection-start-line="57" selection-start-column="16" selection-end-line="57" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1-beta2/clojure-1.10.1-beta2.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="208">
          <caret line="54" column="1" selection-start-line="54" selection-start-column="1" selection-end-line="54" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="310">
          <caret line="98" column="6" selection-start-line="98" selection-start-column="6" selection-end-line="98" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret lean-forward="true" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="405">
          <caret line="40" column="30" selection-start-line="40" selection-start-column="30" selection-end-line="40" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="301">
          <caret line="40" selection-start-line="40" selection-end-line="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/seeds.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="563">
          <caret line="92" column="25" selection-start-line="92" selection-start-column="19" selection-end-line="97" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="7347">
          <caret line="237" column="39" lean-forward="true" selection-start-line="237" selection-start-column="39" selection-end-line="237" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="403">
          <caret line="13" column="42" selection-start-line="13" selection-start-column="42" selection-end-line="13" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="506">
          <caret line="201" column="69" lean-forward="true" selection-start-line="201" selection-start-column="69" selection-end-line="201" selection-end-column="69" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Word2Vec-clj</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>