<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BookmarkManager">
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="104" />
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="43" />
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="47" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/PITCHME.md" beforeDir="false" afterPath="$PROJECT_DIR$/PITCHME.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/assets/PITCHME.css" beforeDir="false" afterPath="$PROJECT_DIR$/assets/PITCHME.css" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/resources/metrics.svg" beforeDir="false" afterPath="$PROJECT_DIR$/assets/metrics.svg" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/resources/pca-all.png" beforeDir="false" afterPath="$PROJECT_DIR$/assets/pca-all.png" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Word2Vec-clj" />
              <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Word2Vec-clj" />
                <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$/../hpl-util" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$/../hpl-util" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4674889260000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="3390841315" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="4674728943000" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" value="2071936696" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="4670933584000" />
        <entry key="$PROJECT_DIR$/../hpl-util/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../Word2Vec-clj">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../hpl-util">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Dep2Rel" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/assets/PITCHME.css">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="286">
              <caret line="13" column="16" selection-start-line="13" selection-start-column="16" selection-end-line="13" selection-end-column="16" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/PITCHME.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
            <state split_layout="SPLIT">
              <first_editor relative-caret-position="132">
                <caret line="57" lean-forward="true" selection-start-line="57" selection-end-line="57" />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="198">
              <caret line="30" column="31" selection-start-line="30" selection-start-column="31" selection-end-line="30" selection-end-column="31" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>context-th</find>
      <find>save</find>
      <find>str</find>
      <find>warn</find>
      <find>:sentences</find>
      <find>&quot;</find>
      <find>ann:</find>
      <find>:wor</find>
      <find>:context-v</find>
      <find>(first training-sentences)</find>
      <find>:</find>
      <find>uncomplicat</find>
      <find>sum-</find>
      <find>con</find>
      <find>context</find>
      <find>unit-v</find>
      <find>pmap</find>
      <find>with-release</find>
      <find>context/</find>
      <find>unit-vec-sum</find>
      <find>r =</find>
      <find>Random</find>
      <find>sentence</find>
      <find>edu.ucdenver.ccp.nlp.re-model :as sentence</find>
      <find>seed</find>
      <find>dr</find>
      <find>uncomplicate</find>
      <find>cosine-</find>
      <find>subvec</find>
      <find>comb</find>
    </findStrings>
    <replaceStrings>
      <replace>&quot;</replace>
      <replace>let-release</replace>
      <replace>vec-remove</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="UPDATE_TYPE" value="REBASE" />
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="PUSH_UPDATE_ALL_ROOTS" value="false" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="6e27e1ded932cb991ca419ac5ffdd882e7430b2c" />
      </map>
    </option>
    <option name="RESET_MODE" value="MIXED" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" />
        <option value="$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/util.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/run/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/math.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/run/run_pitchme.sh" />
        <option value="$PROJECT_DIR$/assets/PITCHME.css" />
        <option value="$PROJECT_DIR$/assets/metrics.svg" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1599" />
    <option name="y" value="29" />
    <option name="width" value="1682" />
    <option name="height" value="1022" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="assets" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="run" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope">
        <subPane subId="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
          </expand>
          <select />
        </subPane>
        <subPane subId="Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="~/Documents/Dep2Rel" type="442cc68d:ScopeViewTreeModel$RootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="$PROJECT_DIR$/run/run_on_tantor.sh&#10;true&#10;/home/harrison/Documents/Dep2Rel/run/run_pitchme.sh" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="/opt/graalvm/bin/jvisualvm" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/lib" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/assets" />
      <recent name="$PROJECT_DIR$/run" />
      <recent name="$PROJECT_DIR$/../hpl-util/src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560375095489">{:repl-history {:ide [], :local [{:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width :data (incanter/get-dataset :iris) :group-by :Species))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(incanter/view (inc-charts/scatter-plot :Sepal.Length :Sepal.Width \n                             :data (incanter/get-dataset :iris) \n                             :group-by :Species))&quot;, :offset 10, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [uncomplicate-context-alg :as context]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]))&quot;, :offset 484, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 178, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.datasets/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 120, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.core/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 116, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(use '(incanter core datasets))\n(def iris (get-dataset :iris))\n(view iris)&quot;, :offset 74, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width                     :data (get-dataset :iris)                    :group-by :Species))&quot;, :offset 132, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width :data \n                    (get-dataset :iris) :group-by :Species))&quot;, :offset 23, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width \n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 106, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color)) \n           (view $data) \n           (view (inc-charts/bar-chart :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color))\n           (view (inc-charts/scatter-plot :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 97, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 111, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 35, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3]\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3] 2\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 161, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label :Species\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 160, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species 1}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label (sel (get-dataset :iris) :cols :Species)\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 301, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label 'x\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 153, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                              :legend true\n                              :series-label 'x\n                              :data (get-dataset :iris)\n                              :group-by :Species))&quot;, :offset 4, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def plot (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                   :legend true\n                                   :series-label 'x\n                                   :data (get-dataset :iris)\n                                   :group-by :Species))&quot;, :offset 9, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-categories plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 41, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 27, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10 10 10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 42, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(get (map identity [1 2 3]) 0)&quot;, :offset 26, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 59, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view plot)&quot;, :offset 11, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400\n                                                ] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 108, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;}], :remote [{:command &quot;(uncomplicate/with-release [a (uncomplicate.neanderthal.native/dtr 3 (range 1 7) {:layout :row :diag :unit :uplo :lower})\n                            b (uncomplicate.neanderthal.native/dge 3 4 (range 1 13))\n                            result (thal/mm a b)]\n  (thal/imax result))&quot;, :offset 270, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [a (uncomplicate.neanderthal.native/dtr 3 (range 1 7) {:layout :row :diag :unit :uplo :lower})\n                            b (uncomplicate.neanderthal.native/dge 3 4 (range 1 13))\n                            result (thal/mm a b)]\n  (reduce max-key result))&quot;, :offset 274, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [a (uncomplicate.neanderthal.native/dtr 3 (range 1 7) {:layout :row :diag :unit :uplo :lower})\n                            b (uncomplicate.neanderthal.native/dge 3 4 (range 1 13))\n                            result (thal/mm a b)]\n  (reduce max-key (reduce max-key result)))&quot;, :offset 275, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (seq m))&quot;, :offset 129, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (reduce max-key m))&quot;, :offset 137, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (reduce max-key (flatten m)))&quot;, :offset 146, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (max-key m))&quot;, :offset 122, :ns &quot;linear-algebra&quot;} {:command &quot;y m&quot;, :offset 0} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  m)&quot;, :offset 123, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (map thal/imax m))&quot;, :offset 135, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])]\n  (thal-real/entry m 0 0))&quot;, :offset 145, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate/with-release [m (thal/ge uncomplicate.neanderthal.native/native-double 3 3 [[1 0 -1] [3 -2 3] [4 1 1]])\n                            result (thal-real/entry m 0 0)]\n  result)&quot;, :offset 176, :ns &quot;linear-algebra&quot;} {:command &quot;(def properties #{\&quot;INHIBITOR\&quot; #_re-model/NONE} #_#{\&quot;PART-OF\&quot;\n                                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                                   \&quot;ANTAGONIST\&quot;\n                                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                                   \&quot;COFACTOR\&quot;\n                                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                                   \&quot;NOT\&quot;\n                                                   re-model/NONE})\n\n;;; PCA ;;;\n(comment\n  (def sentences-dataset (word2vec/with-word2vec word2vec-db\n                           (-&gt;&gt; training-sentences\n                                (filter #(contains? properties (:property %)))\n                                (evaluation/sentences-&gt;dataset training-model))))\n\n  (def groups (map keyword (incanter/sel sentences-dataset :cols :property)))\n\n  (evaluation/pca-plot sentences-dataset groups\n                       {:save {:file (io/file results-dir \&quot;pca-all.svg\&quot;)}\n                        :view true}))\n\n;;; RELATION EXTRACTION ;;;\n\n;; This allows me to reset sentences if they get reloaded\n#_(def training-sentences (map #(re-model/map-&gt;Sentence %) training-sentences))\n\n(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 1\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))\n(incanter/data-table metrics)\n(evaluation/plot-metrics metrics (incanter/sel metrics :cols :property)\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 3670, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh vector-fn] :as params} samples patterns]\n  (log/info (count (remove vector-fn samples)) (count (remove vector-fn patterns)))\n  (when (and (seq samples) (seq patterns))\n    (let [sample-vectors (map vector-fn samples)]\n      (-&gt;&gt; patterns\n           (map vector-fn)\n           (linear-algebra/find-best-row-matches params sample-vectors)\n           (update :sample #(get samples %))\n           (update :match #(get samples %))\n           (map (fn [{:keys [score] :as best}] (if (&lt; context-thresh score)\n                                                 best\n                                                 (dissoc best :match))))\n           (map (fn [{:keys [sample match] :as best}] (if (sent-pattern-concepts-match? sample match)\n                                                        best\n                                                        (dissoc best :match))))\n           (map (fn [{:keys [sample match]}]\n                  (assoc sample :predicted (:predicted match))))))))&quot;, :offset 1039, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(count (remove #(context/context-vector % split-training-model) (:samples split-training-model)))&quot;, :offset 97, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(remove #(context/context-vector % split-training-model) (:samples split-training-model))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in split-training-model [:concept-annotations \&quot;23532634-T27\&quot;])&quot;, :offset 67, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn split-train-test\n  \&quot;Splits model into train and test sets\&quot;\n  [sentences model frac properties seed]\n  (let [seeds (-&gt;&gt; (group-by :property sentences)\n                   (filter #(properties (first %)))\n                   (map (fn [[property sentences]] (frac-seeds property sentences frac seed)))\n                   (apply clojure.set/union))]\n\n    (-&gt; model\n        (assoc :samples (remove seeds sentences)\n               :seeds (-&gt;&gt; seeds\n                           (map #(assoc % :predicted (:property %)))\n                           (set)))\n        (update :samples (fn [samples] (-&gt;&gt; samples\n                                            (map #(assign-embedding model %))\n                                            (keep :VEC)\n                                            (doall))))\n        (update :seeds (fn [seeds] (-&gt;&gt; seeds\n                                        (map #(assign-embedding model %))\n                                        (keep :VEC)\n                                        (doall))))\n        (assoc :properties properties))))&quot;, :offset 1056, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n(remove #(context/context-vector % split-training-model) (:samples split-training-model))\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 1\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1843, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn unit-vec-sum\n  [factory &amp; vectors]\n  (let [vectors (keep seq vectors)]\n    (when (seq vectors)\n      (-&gt;&gt; vectors\n           (apply map +)\n           (unit-vec factory)))))&quot;, :offset 178, :ns &quot;linear-algebra&quot;} {:command &quot;(defn add-to-pattern\n  [{:keys [factory] :as model} p s]\n  (-&gt;Pattern (conj (set (:support p)) s)\n             (if p\n               (linear-algebra/unit-vec-sum factory\n                                            (context/context-vector p model)\n                                            (context/context-vector s model))\n               (context/context-vector s model))))&quot;, :offset 374, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn vectors-&gt;matrix\n  [{:keys [factory]} vectors]\n  (let [d (some #(thal/dim %) vectors)]\n    (-&gt;&gt; vectors\n         (flatten)\n         (thal/ge factory d (count vectors)))))&quot;, :offset 175, :ns &quot;linear-algebra&quot;} {:command &quot;(thal/dim (uncomplicate.neanderthal.native/dv [1 2 3]))&quot;, :offset 53, :ns &quot;linear-algebra&quot;} {:command &quot;(defn vectors-&gt;matrix\n  [{:keys [factory]} vectors]\n  (let [m (thal/dim (first vectors))\n        n (count vectors)]\n    (log/warn m n (seq vectors))\n    (-&gt;&gt; vectors\n         (flatten)\n         (thal/ge factory m n))))&quot;, :offset 218, :ns &quot;linear-algebra&quot;} {:command &quot;(defn vectors-&gt;matrix\n  [{:keys [factory]} vectors]\n  (let [m (thal/dim (first vectors))\n        n (count vectors)]\n    (log/warn m n (seq vectors))\n    (-&gt;&gt; vectors\n         (map seq)\n         (flatten)\n         (thal/ge factory m n))))&quot;, :offset 237, :ns &quot;linear-algebra&quot;} {:command &quot;(def training-model (word2vec/with-word2vec word2vec-db\n                      (re-model/make-model training-knowtator-view factory)))\n(def training-sentences (re-model/make-sentences training-model))&quot;, :offset 199, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties #{\&quot;INHIBITOR\&quot; #_re-model/NONE} #_#{\&quot;PART-OF\&quot;\n                                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                                   \&quot;ANTAGONIST\&quot;\n                                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                                   \&quot;COFACTOR\&quot;\n                                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                                   \&quot;NOT\&quot;\n                                                   re-model/NONE})\n\n;;; PCA ;;;\n(comment\n  (def sentences-dataset (word2vec/with-word2vec word2vec-db\n                           (-&gt;&gt; training-sentences\n                                (filter #(contains? properties (:property %)))\n                                (evaluation/sentences-&gt;dataset training-model))))\n\n  (def groups (map keyword (incanter/sel sentences-dataset :cols :property)))\n\n  (evaluation/pca-plot sentences-dataset groups\n                       {:save {:file (io/file results-dir \&quot;pca-all.svg\&quot;)}\n                        :view true}))\n\n;;; RELATION EXTRACTION ;;;\n\n;; This allows me to reset sentences if they get reloaded\n#_(def training-sentences (map #(re-model/map-&gt;Sentence %) training-sentences))\n\n(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n#_(remove #(context/context-vector % split-training-model) (:samples split-training-model))\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 1\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))\n(incanter/data-table metrics)\n(evaluation/plot-metrics metrics (incanter/sel metrics :cols :property)\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 3762, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh vector-fn] :as params} samples patterns]\n  (log/info (count (remove vector-fn samples)) (count (remove vector-fn patterns)))\n  (when (and (seq samples) (seq patterns))\n    (let [sample-vectors (map vector-fn samples)]\n      (-&gt;&gt; patterns\n           (map vector-fn)\n           (linear-algebra/find-best-row-matches params sample-vectors)\n           (map #(update % :sample (fn [i] (get samples i))))\n           (map #(update % :match (fn [j] (get samples j))))\n           (map (fn [{:keys [score] :as best}] (if (&lt; context-thresh score)\n                                                 best\n                                                 (dissoc best :match))))\n           (map (fn [{:keys [sample match] :as best}] (if (sent-pattern-concepts-match? sample match)\n                                                        best\n                                                        (dissoc best :match))))\n           (map (fn [{:keys [sample match]}]\n                  (assoc sample :predicted (:predicted match))))))))&quot;, :offset 1073, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(count (:matches results))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:matches results)&quot;, :offset 18, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 1\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1417, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n#_(remove #(context/context-vector % split-training-model) (:samples split-training-model))\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 1\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))\n(incanter/data-table metrics)\n(evaluation/plot-metrics metrics (incanter/sel metrics :cols :property)\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 2133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))\n(incanter/data-table metrics)\n(evaluation/plot-metrics metrics (incanter/sel metrics :cols :property)\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 1705, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(util/map-kv count (group-by :predicted (:matches results)))&quot;, :offset 60, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (set (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;)))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:entities (first (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;)))&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:entities (second (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;)))&quot;, :offset 79, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:entities (nth (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot; 3)))&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(:entities (nth (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;) 3))&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn calc-metrics\n  [{:keys [matches properties samples]}]\n  (let [all (sentences-&gt;entities samples)\n        metrics (map (fn [property]\n                       (let [actual-true (-&gt;&gt; samples\n                                              (filter #(= property (:property %)))\n                                              (sentences-&gt;entities))\n                             predicted-true (-&gt;&gt; matches\n                                                 (filter #(= property (:predicted %)))\n                                                 (sentences-&gt;entities))]\n                         (log/debug property \&quot;ALL\&quot; (count all) \&quot;AT\&quot; (count actual-true) \&quot;PT\&quot; (count predicted-true))\n                         (-&gt; (try\n                               (math/calc-metrics {:actual-true    actual-true\n                                                   :predicted-true predicted-true\n                                                   :all            all})\n                               (catch ArithmeticException _ {}))\n                             (assoc :property property))))\n                     properties)]\n    (-&gt;&gt; metrics\n         (incanter/to-dataset)\n         (log/info))\n    metrics))&quot;, :offset 1186, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn calc-metrics\n  [{:keys [matches properties samples]}]\n  (let [all (sentences-&gt;entities samples)\n        metrics (map (fn [property]\n                       (let [actual-true (-&gt;&gt; samples\n                                              (filter #(= property (:property %)))\n                                              (sentences-&gt;entities))\n                             predicted-true (-&gt;&gt; matches\n                                                 (filter #(= property (:predicted %)))\n                                                 (sentences-&gt;entities))]\n                         (log/info property \&quot;ALL\&quot; (count all) \&quot;AT\&quot; (count actual-true) \&quot;PT\&quot; (count predicted-true))\n                         (-&gt; (try\n                               (math/calc-metrics {:actual-true    actual-true\n                                                   :predicted-true predicted-true\n                                                   :all            all})\n                               (catch ArithmeticException _ {}))\n                             (assoc :property property))))\n                     properties)]\n    (-&gt;&gt; metrics\n         (incanter/to-dataset)\n         (log/info))\n    metrics))&quot;, :offset 1185, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(count (set (map :entities (get (group-by :predicted (:matches results)) \&quot;INHIBITOR\&quot;))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;]\n  (count (evaluation/predicted-true property (:matches results))))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;]\n  (count (evaluation/actual-true property (:samples results))))&quot;, :offset 91, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true property (:matches results))\n                      :actual-true (evaluation/actual-true property (:samples results))}))&quot;, :offset 212, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true property (:matches results))\n                      :actual-true (evaluation/actual-true property (:samples results))\n                      :all (evaluation/sentences-&gt;entities (:samples results))}))&quot;, :offset 291, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  ;(clojure.set/intersection)\n  (math/calc-metrics {:predicted-true predicted-true\n                      :actual-true actual-true\n                      :all all}))&quot;, :offset 401, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true actual-true\n                        :all all}))&quot;, :offset 433, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (count (clojure.set/difference all actual-true))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true actual-true\n                        :all all}))&quot;, :offset 486, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (count actual-true)\n  #_(count (clojure.set/difference all actual-true))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true actual-true\n                        :all all}))&quot;, :offset 510, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (count all)\n  #_(count (clojure.set/difference all actual-true))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true actual-true\n                        :all all}))&quot;, :offset 502, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (count (clojure.set/intersection predicted-true\n                                   (clojure.set/difference all actual-true)))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 577, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count predicted-true))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 634, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count predicted-true))\n  (log/info (clojure.set/difference predicted-true\n                                    actual-true))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 735, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count predicted-true))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 750, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count actual-true))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 747, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count actual-true))\n  (log/info (clojure.set/intersection actual-true all))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 803, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count actual-true))\n  (log/info (count (clojure.set/intersection actual-true all)))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 811, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))]\n  (log/info (count actual-true))\n  (log/info (count (clojure.set/intersection predicted-true all)))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 814, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))\n      seeds (evaluation/sentences-&gt;entities (filter #(= property (:property %))(:seeds results)))]\n  (log/info (count actual-true))\n  (log/info (count (clojure.set/intersection predicted-true seeds)))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 914, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh vector-fn] :as params} samples patterns]\n  #_(log/info (count (remove vector-fn samples)) (count (remove vector-fn patterns)))\n  (when (and (seq samples) (seq patterns))\n    (let [samples (vec samples)\n          patterns (vec patterns)\n          sample-vectors (-&gt;&gt; samples\n                              (map vector-fn)\n                              (map #(linear-algebra/unit-vec params %))\n                              (vec))\n          pattern-vectors (-&gt;&gt; patterns\n                               (map vector-fn)\n                               (map #(linear-algebra/unit-vec params %))\n                               (vec))]\n      (-&gt;&gt; pattern-vectors\n           (linear-algebra/find-best-row-matches params sample-vectors)\n           (map #(assoc % :match (get samples (:i %))))\n           (map #(assoc % :sample (get patterns (:j %))))\n           (map (fn [{:keys [score] :as best}] (if (&lt; context-thresh score)\n                                                 best\n                                                 (dissoc best :match))))\n           (map (fn [{:keys [sample match] :as best}] (if (sent-pattern-concepts-match? sample match)\n                                                        best\n                                                        (dissoc best :match))))\n           (map (fn [{:keys [sample match]}]\n                  (assoc sample :predicted (:predicted match))))))))&quot;, :offset 1454, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn concept-context-match\n  [{:keys [context-thresh vector-fn] :as params} samples patterns]\n  #_(log/info (count (remove vector-fn samples)) (count (remove vector-fn patterns)))\n  (when (and (seq samples) (seq patterns))\n    (let [samples (vec samples)\n          patterns (vec patterns)\n          sample-vectors (-&gt;&gt; samples\n                              (map vector-fn)\n                              (map #(linear-algebra/unit-vec params %))\n                              (vec))\n          pattern-vectors (-&gt;&gt; patterns\n                               (map vector-fn)\n                               (map #(linear-algebra/unit-vec params %))\n                               (vec))]\n      (-&gt;&gt; pattern-vectors\n           (linear-algebra/find-best-row-matches params sample-vectors)\n           (map #(assoc % :sample (get samples (:i %))))\n           (map #(assoc % :match (get patterns (:j %))))\n           (map (fn [{:keys [score] :as best}] (if (&lt; context-thresh score)\n                                                 best\n                                                 (dissoc best :match))))\n           (map (fn [{:keys [sample match] :as best}] (if (sent-pattern-concepts-match? sample match)\n                                                        best\n                                                        (dissoc best :match))))\n           (map (fn [{:keys [sample match]}]\n                  (assoc sample :predicted (:predicted match))))))))&quot;, :offset 1454, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [property \&quot;INHIBITOR\&quot;\n      predicted-true (evaluation/predicted-true property (:matches results))\n      actual-true (evaluation/actual-true property (:samples results))\n      all (evaluation/sentences-&gt;entities (:samples results))\n      seeds (evaluation/sentences-&gt;entities (filter #(= property (:property %))(:seeds results)))]\n  (log/info (count actual-true))\n  (log/info (count (clojure.set/difference predicted-true seeds)))\n  (log/info (count (clojure.set/difference predicted-true\n                                           actual-true)))\n  (log/info (count (clojure.set/intersection predicted-true\n                                             (clojure.set/difference all actual-true))))\n  #_(clojure.set/intersection predicted-true actual-true)\n  #_(math/calc-metrics {:predicted-true predicted-true\n                        :actual-true    actual-true\n                        :all            all}))&quot;, :offset 912, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties #{\&quot;INHIBITOR\&quot; #_re-model/NONE} #_#{\&quot;PART-OF\&quot;\n                                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                                   \&quot;ANTAGONIST\&quot;\n                                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                                   \&quot;COFACTOR\&quot;\n                                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                                   \&quot;NOT\&quot;\n                                                   #_re-model/NONE})&quot;, :offset 926, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))&quot;, :offset 334, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.9\n                           :min-match-support 3\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1416, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.9\n                           :cluster-thresh    0.9\n                           :min-match-support 3\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1415, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn unit-vec\n  [{:keys [factory]} v]\n  (uncomplicate/with-release [v (thal/vctr factory v)\n                              alpha-1 (thal/nrm2 v)\n                              alpha (/ alpha-1)\n                              result (thal/scal alpha v)]\n    (doall (vec (seq result)))))&quot;, :offset 283, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate.neanderthal.native/dge 2 3 [[1 2] [3 4] [5 6]])&quot;, :offset 58, :ns &quot;linear-algebra&quot;} {:command &quot;(uncomplicate.neanderthal.native/dge 2 3 [[1 2] [3 4] [5 6]] {:layout :row})&quot;, :offset 74, :ns &quot;linear-algebra&quot;} {:command &quot;(seq (uncomplicate.neanderthal.native/dge 2 3 [[1 2] [3 4] [5 6]] {:layout :row}))&quot;, :offset 5, :ns &quot;linear-algebra&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1417, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties #_#{\&quot;INHIBITOR\&quot; #_re-model/NONE} #{\&quot;PART-OF\&quot;\n                                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                                   \&quot;ANTAGONIST\&quot;\n                                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                                   \&quot;COFACTOR\&quot;\n                                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                                   \&quot;NOT\&quot;\n                                                   #_re-model/NONE})&quot;, :offset 926, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n#_(remove #(context/context-vector % split-training-model) (:samples split-training-model))\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 3\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))&quot;, :offset 1916, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))&quot;, :offset 1417, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def properties #_#{\&quot;INHIBITOR\&quot; #_re-model/NONE} #{\&quot;PART-OF\&quot;\n                                                   \&quot;REGULATOR\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;INDIRECT-REGULATOR\&quot;\n                                                   \&quot;UPREGULATOR\&quot; \&quot;ACTIVATOR\&quot; \&quot;INDIRECT-UPREGULATOR\&quot;\n                                                   \&quot;DOWNREGULATOR\&quot; \&quot;INHIBITOR\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot;\n                                                   \&quot;AGONIST\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;AGONIST-INHIBITOR\&quot;\n                                                   \&quot;ANTAGONIST\&quot;\n                                                   \&quot;MODULATOR\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;MODULATOR‐INHIBITOR\&quot;\n                                                   \&quot;COFACTOR\&quot;\n                                                   \&quot;SUBSTRATE\&quot; \&quot;PRODUCT-OF\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot;\n                                                   \&quot;NOT\&quot;\n                                                   re-model/NONE})&quot;, :offset 924, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-training-model (word2vec/with-word2vec word2vec-db\n                            (let [seed-frac 0.2\n                                  rng 0.022894]\n                              (re-model/split-train-test training-sentences training-model\n                                                         seed-frac properties rng))))\n\n#_(remove #(context/context-vector % split-training-model) (:samples split-training-model))\n(def results (let [context-path-length-cap 100\n                   params {:context-thresh    0.95\n                           :cluster-thresh    0.95\n                           :min-match-support 0\n                           :max-iterations    100\n                           :max-matches       3000\n                           :re-clustering?    true\n                           :factory           (:factory split-training-model)\n                           :vector-fn         #(context/context-vector % split-training-model)}\n                   context-match-fn (partial re/concept-context-match params)\n                   pattern-update-fn (partial re/pattern-update params training-model)\n                   terminate? (partial re/terminate? params)\n                   support-filter (partial re/support-filter params)\n                   decluster (partial re/decluster params support-filter)]\n               (-&gt; split-training-model\n                   (update :samples (fn [samples] (evaluation/context-path-filter context-path-length-cap samples)))\n                   (re/bootstrap {:terminate?        terminate?\n                                  :context-match-fn  context-match-fn\n                                  :pattern-update-fn pattern-update-fn\n                                  :support-filter    support-filter\n                                  :decluster         decluster})\n                   (doall))))\n\n(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))&quot;, :offset 1916, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn terminate?\n  [{:keys [max-iterations max-matches]} model\n   {:keys [iteration seeds new-matches matches patterns samples]}]\n  (let [success-model (assoc model :matches matches\n                                   :patterns patterns)]\n    (cond (&lt;= max-iterations iteration)\n          (do (log/info \&quot;Max iteration reached\&quot;)\n              success-model)\n          (empty? new-matches)\n          (do (log/info \&quot;No new matches\&quot;)\n              success-model)\n          (empty? samples)\n          (do (log/info \&quot;No more samples\&quot;)\n              success-model)\n          (&lt;= max-matches (count (remove #(= re-model/NONE (:property %)) matches)))\n          (do (log/info \&quot;Too many matches\&quot;)\n              model)\n          (empty? seeds)\n          (do (log/info \&quot;No seeds\&quot;)\n              model)\n          (empty? (remove #(= re-model/NONE %) (map :property samples)))\n          (do (log/info \&quot;Only negative examples left\&quot;)\n              success-model))))&quot;, :offset 948, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def metrics (incanter/to-dataset (evaluation/calc-metrics results)))&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn add-property-series\n  [plot dataset x y properties]\n  (let [groups (map-indexed vector (incanter/sel dataset :cols :property))]\n    (doseq [property properties]\n      (keep (fn [[i p]] (when (= p property)\n                          (get x i)))\n            groups)\n      #_(inc-charts/add-points plot\n                               (keep (fn [[i p]] (when (= p property)\n                                                   (get x i)))\n                                     groups)\n                               (keep (fn [[j p]] (when (= p property)\n                                                   (get-in y j)))\n                                     groups)\n                               :series-label property))))&quot;, :offset 722, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn add-property-series\n  [plot dataset x y properties]\n  (let [groups (map-indexed vector (incanter/sel dataset :cols :property))]\n    (doseq [property properties]\n      (log/info (seq (keep (fn [[i p]] (when (= p property)\n                                         (get x i)))\n                           groups)))\n      #_(inc-charts/add-points plot\n                               (keep (fn [[i p]] (when (= p property)\n                                                   (get x i)))\n                                     groups)\n                               (keep (fn [[j p]] (when (= p property)\n                                                   (get-in y j)))\n                                     groups)\n                               :series-label property))))&quot;, :offset 769, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(evaluation/plot-metrics metrics (incanter/sel metrics :cols :property)\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 186, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (run-model {:seed-frac 0.2\n                         :rng 0.022894\n                         :context-path-length-cap 100\n                         :context-thresh          0.95\n                         :cluster-thresh          0.95\n                         :min-match-support       0\n                         :max-iterations          100\n                         :max-matches             3000\n                         :re-clustering?          true}\n                        training-sentences training-model split-training-model))&quot;, :offset 540, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/plot-metrics metrics properties\n                         {:view true\n                          :save {:file (io/file results-dir \&quot;metrics.svg\&quot;)}})&quot;, :offset 158, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def numerical-data (incanter/sel sentences-dataset :cols (range 0 200)))\n(def pca-components (evaluation/pca-2 numerical-data))\n(def plot (inc-charts/scatter-plot [] []\n                                   :legend true\n                                   :x-label \&quot;PC1\&quot;\n                                   :y-label \&quot;PC2\&quot;\n                                   :title \&quot;PCA\&quot;))\n(def x (get pca-components 0))\n(def y (get pca-components 1))&quot;, :offset 429, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.core :as incanter]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [uncomplicate-context-alg :as context]\n            [uncomplicate.neanderthal.native :as thal-native]\n            [incanter.svg :as inc-svg]\n            [incanter.charts :as inc-charts]))&quot;, :offset 641, :ns &quot;linear-algebra&quot;} {:command &quot;(def plot (inc-charts/scatter-plot [] []\n                                   :legend true\n                                   :x-label \&quot;PC1\&quot;\n                                   :y-label \&quot;PC2\&quot;\n                                   :title \&quot;PCA\&quot;))\n(def x (get pca-components 0))\n(def y (get pca-components 1))&quot;, :offset 300, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first x)&quot;, :offset 9, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;x&quot;, :offset 1, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/add-property-series plot sentences-dataset x y properties)&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/view plot)&quot;, :offset 20, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(inc-charts/add-points [1] [1] :series-label 'n)&quot;, :offset 48, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(inc-charts/add-points plot [1] [1] :series-label 'n)&quot;, :offset 53, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(inc-charts/add-points plot [(first x)] [(first y)] :series-label 'n)&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (map-indexed vector (incanter/sel sentences-dataset :cols :property)))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn parameter-walk\n  [word2vec-db results-dir properties sentences model\n   {:keys [context-path-length-cap\n           context-thresh\n           cluster-thresh\n           min-match-support\n           seed-frac\n           rng]}]\n  ;; parallelize with\n  #_(cp/upfor (dec (cp/ncpus)))\n  (for [seed-frac [0.05 0.25 0.5 0.75]\n        :let [split-model (re-model/split-train-test sentences model seed-frac properties rng)]\n        context-path-length-cap [100]\n        context-thresh [0.95]\n        cluster-thresh [0.95]\n        min-match-support [0]]\n    (let [params {:context-thresh          context-thresh\n                  :cluster-thresh          cluster-thresh\n                  :min-match-support       min-match-support\n                  :max-iterations          100\n                  :max-matches             3000\n                  :re-clustering?          true\n                  :context-path-length-cap context-path-length-cap\n                  :seed-frac               seed-frac\n                  :rng                     rng}]\n      (log/warn params)\n      (run-model params model word2vec-db sentences results-dir split-model))))&quot;, :offset 1140, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [word2vec-db results-dir properties sentences model\n   {:keys [context-path-length-cap\n           context-thresh\n           cluster-thresh\n           min-match-support\n           seed-frac\n           rng]}]\n  ;; parallelize with\n  #_(cp/upfor (dec (cp/ncpus)))\n  (doall\n    (for [seed-frac [0.05 0.25 0.5 0.75]\n          :let [split-model (re-model/split-train-test sentences model seed-frac properties rng)]\n          context-path-length-cap [100]\n          context-thresh [0.95]\n          cluster-thresh [0.95]\n          min-match-support [0]]\n      (let [params {:context-thresh          context-thresh\n                    :cluster-thresh          cluster-thresh\n                    :min-match-support       min-match-support\n                    :max-iterations          100\n                    :max-matches             3000\n                    :re-clustering?          true\n                    :context-path-length-cap context-path-length-cap\n                    :seed-frac               seed-frac\n                    :rng                     rng}]\n        (log/warn params)\n        (run-model params model word2vec-db sentences results-dir split-model)))))&quot;, :offset 1184, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk word2vec-db results-dir\n                                                   properties training-sentences training-model\n                                                   {:context-path-length-cap [100] #_[2 3 5 10 20 35 100]\n                                                    :context-thresh          [0.95] #_[0.975 0.95 0.925 0.9 0.85]\n                                                    :cluster-thresh          [0.95] #_[0.95 0.9 0.75 0.5]\n                                                    :min-match-support       [0] #_[0 5 25]\n                                                    :seed-frac #_[0.2]       [0.05 0.25 0.5 0.75]\n                                                    :rng                     0.022894}))&quot;, :offset 775, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences-dataset (word2vec/with-word2vec word2vec-db\n                           (-&gt;&gt; training-sentences\n                                (filter #(contains? properties (:property %)))\n                                (evaluation/sentences-&gt;dataset training-model))))\n\n  (def pca-pot (evaluation/pca-plot properties sentences-dataset (count (context/context-vector (first training-sentences) training-model))\n                                    {:save {:file (io/file results-dir \&quot;pca-all.svg\&quot;)}\n                                     :view true}))&quot;, :offset 549, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="Connect to Tantor" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_on_tantor.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="PITCHME" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_pitchme.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false" singleton="true">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2">
        <option name="RunConfigurationTask" enabled="true" run_configuration_name="Connect to Tantor" run_configuration_type="BashConfigurationType" />
      </method>
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Bash.PITCHME" />
      <item itemvalue="Bash.Connect to Tantor" />
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" sideWeight="0.4988938" visible="true" weight="0.1898657" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" sideWeight="0.5011062" side_tool="true" weight="0.1898657" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32853982" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.4993895" visible="true" weight="0.32743362" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" sideWeight="0.4993895" weight="0.36283186" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.26327434" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.50061053" side_tool="true" weight="0.36283186" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2002442" />
      <window_info active="true" anchor="right" x="0" y="442" width="1600" height="878" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="WINDOWED" visible="true" weight="0.43772894" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="2" />
                  <option value="1" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Multiple properties cluster" />
    <MESSAGE value="Refactored functions into ns's" />
    <MESSAGE value="Cleaning up the last big refactoring. Corrected dupilcate name" />
    <MESSAGE value="Use incanter to output metrics as tables and plots" />
    <MESSAGE value="use knowtator model instead of view" />
    <MESSAGE value="minor" />
    <MESSAGE value="Allow nil results in calculations. Save charts with files" />
    <MESSAGE value="Vectors handled and released by linear algebra" />
    <MESSAGE value="updated deps" />
    <MESSAGE value="Use vectors to track groups" />
    <MESSAGE value="Fixed linear algebra running out of memory" />
    <MESSAGE value="For some" />
    <MESSAGE value="For some reason, I have to iterate over the second vector group before the first" />
    <MESSAGE value="Minor performance improvements" />
    <MESSAGE value="Plot series labels in legend. Contains one extra entry &quot;[][]&quot;" />
    <MESSAGE value="Special considerations for NONE case to prevent model training taking too long" />
    <MESSAGE value="Updated deps" />
    <MESSAGE value="cap nones" />
    <MESSAGE value="some results" />
    <MESSAGE value="pca results" />
    <MESSAGE value="Minor correction to cap-nones" />
    <MESSAGE value="Run model encapsulates metric calculation and plot creation" />
    <MESSAGE value="Parameter walk needed doall to execute" />
    <MESSAGE value="pca-plot needed vec around x and y to &quot;get&quot;" />
    <MESSAGE value="needed to add file parameter" />
    <option name="LAST_COMMIT_MESSAGE" value="needed to add file parameter" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="335">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="462">
          <caret line="21" column="16" lean-forward="true" selection-start-line="21" selection-start-column="16" selection-end-line="21" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="22" column="12" selection-start-line="22" selection-start-column="12" selection-end-line="22" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="9" column="4" selection-start-line="9" selection-start-column="4" selection-end-line="9" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="291">
          <caret line="22" column="32" selection-start-line="22" selection-start-column="32" selection-end-line="22" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="946">
          <caret line="43" column="51" selection-start-line="43" selection-start-column="51" selection-end-line="43" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="588">
          <caret line="33" column="27" lean-forward="true" selection-start-line="18" selection-end-line="37" selection-end-column="43" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="826">
          <caret line="50" column="42" lean-forward="true" selection-start-line="50" selection-start-column="42" selection-end-line="50" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="325">
          <caret line="28" column="19" selection-start-line="28" selection-start-column="19" selection-end-line="28" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="264">
          <caret line="12" column="49" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="70" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/edu/ucdenver/ccp/nlp/relation_extraction/core_test.clj" />
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="1" column="4" selection-start-line="1" selection-start-column="4" selection-end-line="1" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/native.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="308">
          <caret line="14" column="69" selection-start-line="14" selection-start-column="69" selection-end-line="14" selection-end-column="69" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/neanderthal/0.22.0/neanderthal-0.22.0.jar!/uncomplicate/neanderthal/internal/host/mkl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="4242" column="7" selection-start-line="4242" selection-start-column="7" selection-end-line="4242" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.cljx">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/uncomplicate/commons/0.7.2/commons-0.7.2.jar!/uncomplicate/commons/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-5">
          <caret line="109" column="10" selection-start-line="109" selection-start-column="10" selection-end-line="109" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/a036390c6a2e6ba86de07bb3eff690992817617a/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="655">
          <caret line="73" column="6" selection-start-line="73" selection-start-column="6" selection-end-line="73" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1-beta2/clojure-1.10.1-beta2.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="325">
          <caret line="7279" column="32" selection-start-line="7279" selection-start-column="32" selection-end-line="7279" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/util/Collections.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="184">
          <caret line="427" column="25" selection-start-line="427" selection-start-column="19" selection-end-line="427" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/util/Collection.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="259">
          <caret line="146" column="7" lean-forward="true" selection-start-line="146" selection-start-column="7" selection-end-line="146" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="11" selection-start-line="7" selection-start-column="6" selection-end-line="7" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" selection-start-line="4" selection-end-line="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" column="42" selection-start-line="5" selection-start-column="42" selection-end-line="5" selection-end-column="42" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-924" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" column="51" selection-start-line="5" selection-start-column="51" selection-end-line="5" selection-end-column="51" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="61" selection-start-line="20" selection-start-column="61" selection-end-line="20" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="273">
          <caret line="246" column="10" selection-start-line="246" selection-start-column="8" selection-end-line="246" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="535">
          <caret line="114" column="40" selection-start-line="114" selection-start-column="40" selection-end-line="114" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="535">
          <caret line="30" column="46" selection-start-line="30" selection-start-column="46" selection-end-line="30" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="19" column="6" selection-start-line="19" selection-start-column="6" selection-end-line="19" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="260" selection-start-line="260" selection-end-line="260" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="2219" selection-start-line="2219" selection-end-line="2219" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" selection-start-line="8" selection-end-line="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/78ad5ebd65aeff113410c6112bc1ec4c545d7f9d/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="447">
          <caret line="82" column="13" lean-forward="true" selection-start-line="82" selection-start-column="13" selection-end-line="82" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6982794c5919a5f2248ec87e3f72f08d21518e4e/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="49" column="6" selection-start-line="49" selection-start-column="6" selection-end-line="49" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="858">
          <caret line="51" column="27" selection-start-line="51" selection-start-column="27" selection-end-line="51" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="352">
          <caret line="49" column="22" selection-start-line="49" selection-start-column="22" selection-end-line="49" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="50" lean-forward="true" selection-start-line="10" selection-start-column="50" selection-end-line="10" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="237">
          <caret line="28" column="31" selection-start-line="28" selection-start-column="31" selection-end-line="28" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="753">
          <caret line="66" column="15" lean-forward="true" selection-start-line="66" selection-start-column="15" selection-end-line="66" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="8" column="10" lean-forward="true" selection-start-line="8" selection-start-column="10" selection-end-line="8" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="26" selection-start-line="7" selection-start-column="26" selection-end-line="7" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_pitchme.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="23" lean-forward="true" selection-start-line="2" selection-start-column="23" selection-end-line="2" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_on_tantor.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="55" selection-start-line="2" selection-start-column="55" selection-end-line="2" selection-end-column="55" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="101">
          <caret line="141" column="31" lean-forward="true" selection-start-line="141" selection-start-column="31" selection-end-line="141" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/metrics.svg">
      <provider selected="true" editor-type-id="images" />
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/PITCHME.css">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="286">
          <caret line="13" column="16" selection-start-line="13" selection-start-column="16" selection-end-line="13" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/PITCHME.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="132">
            <caret line="57" lean-forward="true" selection-start-line="57" selection-end-line="57" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="30" column="31" selection-start-line="30" selection-start-column="31" selection-end-line="30" selection-end-column="31" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Word2Vec-clj</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>