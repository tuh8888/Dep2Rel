<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4674309152000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="2282379144" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="401">
              <caret line="135" column="6" selection-start-line="135" selection-start-column="6" selection-end-line="135" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="2491">
              <caret line="207" column="7" selection-start-line="207" selection-start-column="7" selection-end-line="207" selection-end-column="7" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="490">
              <caret line="100" column="35" selection-start-line="100" selection-start-column="35" selection-end-line="100" selection-end-column="35" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="292">
              <caret line="78" column="36" lean-forward="true" selection-start-line="78" selection-start-column="36" selection-end-line="78" selection-end-column="36" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="401">
              <caret line="87" column="57" selection-start-line="87" selection-start-column="57" selection-end-line="87" selection-end-column="57" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>lower</find>
      <find>word</find>
      <find>/</find>
      <find>:doc</find>
      <find>loading</find>
      <find>log</find>
      <find>2340</find>
      <find>23402364-T37</find>
      <find>context-th</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1679" />
    <option name="y" value="82" />
    <option name="width" value="1602" />
    <option name="height" value="894" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/lib" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/lib" />
    </key>
  </component>
  <component name="ReplState" timestamp="1559793210516">{:repl-history {:ide [], :local [{:command &quot;(.save model)&quot;, :offset 13, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations model)&quot;, :offset 23, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 501, :ns &quot;user&quot;} {:command &quot;(def model (k/simple-model annotations))\n\n(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1408, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (group-by :doc (:concept-annotations model)))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :doc (:concept-annotations model))))&quot;, :offset 59, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(type (:concept-annotations model))&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (:concept-annotations model))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(map :doc (vals (:concept-annotations model)))&quot;, :offset 46, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(set (map :doc (vals (:concept-annotations model))))&quot;, :offset 52, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations model))&quot;, :offset 6, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(k/display annotations)&quot;, :offset 22, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn simple-model\n  [v]\n  (let [text-sources (map bean (:textSources (bean (model v))))\n        text-sources (zipmap (map :id text-sources)\n                             text-sources)]\n    {:structure-annotations (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureAnnotations doc)\n                                                            simple-concept-annotation)))\n                                     text-sources))\n     :concept-annotations   (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:conceptAnnotations doc)\n                                                            simple-concept-annotation\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :concept-graphs        (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:graphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))\n     :structure-graphs      (apply merge\n                                   (map\n                                     (fn [[id doc]]\n                                       (util/map-kv\n                                         #(assoc % :doc id)\n                                         (simple-collection (:structureGraphSpaces doc)\n                                                            simple-graph-space\n                                                            :key-fn #(str id (:id %)))))\n                                     text-sources))}))&quot;, :offset 2316, :ns &quot;edu.ucdenver.ccp.knowtator-clj&quot;} {:command &quot;(count (:concept-annotations model))&quot;, :offset 36, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:structure-annotations model))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def structures-annotations-with-embeddings\n  (zipmap (keys (:structure-annotations model))\n          (word2vec/with-word2vec word2vec-db\n            (doall\n              (pmap sentence/assign-word-embedding\n                    (vals (:structure-annotations model)))))))\n\n(def concepts-with-toks\n  (zipmap (keys (:concept-annotations model))\n          (pmap\n            #(let [tok-id (sentence/annotation-tok-id model %)\n                   sent-id (sentence/tok-sent-id model tok-id)]\n               (assoc % :tok tok-id\n                        :sent sent-id))\n            (vals (:concept-annotations model)))))\n\n(def reasoner (k/reasoner annotations))\n\n(def mem-descs\n  (memoize\n    (fn [c]\n      (log/info c)\n      (k/get-owl-descendants reasoner c))))\n\n(def model (assoc model\n             :concept-annotations concepts-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n\n(def sentences (-&gt;&gt;\n                 (sentence/concept-annotations-&gt;sentences model)\n                 (map\n                   #(update % :concepts\n                            (fn [concepts]\n                              (map\n                                (fn [concept-set]\n                                  (into concept-set (mem-descs (first concept-set))))\n                                concepts))))))\n\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 1366, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def sentences (sentence/concept-annotations-&gt;sentences model))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model KnowtatorModel)\n           (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 562, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first sentences)&quot;, :offset 17, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))&quot;, :offset 77, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-relations\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id _ property source target]]\n           (let [text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 graph-space (GraphSpace. text-source nil)\n                 source (second (s/split source #\&quot;:\&quot;))\n\n                 source (AnnotationNode. (str source \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     source))\n                                         0\n                                         0\n                                         graph-space)\n                 target (second (s/split target #\&quot;:\&quot;))\n                 target (AnnotationNode. (str target \&quot;Node\&quot;)\n                                         (.get (.get (.getConceptAnnotations text-source)\n                                                     target))\n                                         0\n                                         0\n                                         graph-space)]\n             (.removeModelListener annotations text-source)\n             (.addCellToGraph graph-space source)\n             (.addCellToGraph graph-space target)\n             (.addTriple graph-space\n                         source\n                         target\n                         id\n                         (.getDefaultProfile annotations)\n                         nil\n                         (Quantifier/some)\n                         \&quot;\&quot;\n                         false\n                         \&quot;\&quot;)\n             (.setValue ^RelationAnnotation (first (filter #(= (.getId %) id) (.getRelationAnnotations graph-space)))\n                        property)\n             (.addModelListener annotations text-source))))))&quot;, :offset 1885, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(rdr/biocreative-read-relations (.get (.getModel annotations)) relations-file)&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [clojure.string :as s]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))\n\n(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n(rdr/biocreative-read-relations (k/model annotations) relations-file)&quot;, :offset 1084, :ns &quot;user&quot;} {:command &quot;(count (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-graphs model))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(second (:concept-graphs model))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(.save (k/model annotations))&quot;, :offset 29, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 466, :ns &quot;user&quot;} {:command &quot;(def structures-annotations-with-embeddings (word2vec/with-word2vec word2vec-db\n                                              (sentence/structures-annotations-with-embeddings model)))&quot;, :offset 183, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def concept-annotations-with-toks (sentence/concept-annotations-with-toks model))\n\n(def model (assoc model\n             :concept-annotations concept-annotations-with-toks\n             :structure-annotations structures-annotations-with-embeddings))\n\n(def sentences (sentence/concept-annotations-&gt;sentences model))\n(log/info \&quot;Num sentences:\&quot; (count sentences))&quot;, :offset 359, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def property \&quot;INHIBITOR\&quot;)\n\n(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))\n\n(def all-triples (set (map evaluation/sent-&gt;triple sentences)))&quot;, :offset 211, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Num actual true:\&quot; (count actual-true))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:textSources (bean (k/model annotations))))&quot;, :offset 51, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:textSources (bean (k/model annotations)))))&quot;, :offset 58, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(bean (first (:graphSpaces (bean (first (:textSources (bean (k/model annotations))))))))&quot;, :offset 88, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces) \n     (first))&quot;, :offset 129, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean) \n     (:graphSpaces))&quot;, :offset 115, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations \n     (k/model) \n     (bean) \n     (:textSources) \n     (first) \n     (bean))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (first)\n     (bean))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean))&quot;, :offset 90, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;}], :remote [{:command &quot;(-&gt; (:sentences model)\n    (cluster-tools/single-pass-cluster #{}\n      {:cluster-merge-fn re/add-to-pattern\n       :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                            (and (&lt; (or %3 0.75) score)\n                                 score))})\n    (show-pca))&quot;, :offset 299, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   seed-frac 0.2\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 1\n                   [model seeds] (evaluation/frac-seeds model property seed-frac)\n                   sentences (evaluation/context-path-filter context-path-length-cap (:sentences model))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-filter-fn #(filter (fn [p] (&lt;= min-support (count (:support p)))) %)\n                           :pattern-update-fn #(filter (fn [p] (&lt;= min-support (count (:support p)))) %)}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns seeds sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true model property)\n                                                        :all            (evaluation/all-triples model)}))\n               [matches patterns]))&quot;, :offset 1639, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   seed-frac 0.2\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   [model seeds] (evaluation/frac-seeds model property seed-frac)\n                   sentences (evaluation/context-path-filter context-path-length-cap (:sentences model))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-filter-fn #(filter (fn [p] (&lt;= min-support (count (:support p)))) %)\n                           :pattern-update-fn #(filter (fn [p] (&lt;= min-support (count (:support p)))) %)}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns seeds sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true model property)\n                                                        :all            (evaluation/all-triples model)}))\n               [matches patterns]))&quot;, :offset 1639, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   seed-frac 0.2\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   [model seeds] (evaluation/frac-seeds model property seed-frac)\n                   sentences (evaluation/context-path-filter context-path-length-cap (:sentences model))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _] (filter (fn [p] (&lt;= min-support (count (:support p)))) patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns seeds sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true model property)\n                                                        :all            (evaluation/all-triples model)}))\n               [matches patterns]))&quot;, :offset 1558, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   seed-frac 0.2\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   [model seeds] (evaluation/frac-seeds model property seed-frac)\n                   sentences (evaluation/context-path-filter context-path-length-cap (:sentences model))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _] (filter (fn [p] (&lt;= min-support (count (:support p)))) patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns seeds sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true model property)\n                                                        :all            (evaluation/all-triples model)}))\n               [matches patterns]))&quot;, :offset 1557, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-model (let [seed-frac 0.2] \n                   (evaluation/frac-seeds model property seed-frac)))&quot;, :offset 108, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [1 :sentences]))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _] (filter (fn [p] (&lt;= min-support (count (:support p)))) patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [2]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [1]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [1]))}))\n               [matches patterns]))&quot;, :offset 1516, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count split-model)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (get-in split-model [2]))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (get-in split-model [1]))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _] (filter (fn [p] (&lt;= min-support (count (:support p)))) patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 1516, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _] (filter (fn [p] (&lt;= min-support (count (:support p)))) patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 1517, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   params {:context-match-fn  (fn [s p]\n                                                (and (re/sent-pattern-concepts-match? s p)\n                                                     (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns _]\n                                                (filter (fn [{:keys [support]}]\n                                                          (&lt;= min-support (count support)))\n                                                        patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 1690, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (some #(context-match-fn % p) seeds)))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2073, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 10\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds \n                                                                                         (filter #(context-match-fn % p)) \n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2330, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 1\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2327, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2327, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-model (let [seed-frac 0.4]\n                   (evaluation/frac-seeds model property seed-frac)))&quot;, :offset 107, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.9\n                   min-support 3\n                   min-seed-matches 5\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2326, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n    [incanter.stats :as stats]\n    #_[incanter.core :as incanter]\n    #_[incanter.charts :as charts]))&quot;, :offset 453, :ns &quot;user&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.8\n                   min-support 3\n                   min-seed-matches 10\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2326, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.8\n                   min-support 3\n                   min-seed-matches 20\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2326, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.8\n                   min-support 3\n                   min-seed-matches 5\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2325, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.8\n                   min-support 3\n                   min-seed-matches 5\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2326, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-model (let [seed-frac 0.8]\n                   (evaluation/frac-seeds model property seed-frac)))&quot;, :offset 107, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.75\n                   min-support 3\n                   min-seed-matches 5\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2327, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 5\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2327, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2328, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 30\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2328, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 25\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2328, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.9\n                   min-support 3\n                   min-seed-matches 25\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2327, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 10\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (filter (fn [{:keys [support] :as p}]\n                                                          (and (&lt;= min-support (count support))\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                        patterns))\n                           #_(fn [patterns _]\n                               (filter (fn [{:keys [support]}]\n                                         (&lt;= min-support (count support)))\n                                       patterns))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2328, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :cluster-merge-fn  re/add-to-pattern\n                           :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                 (and (&lt; (or %3 cluster-thresh) score)\n                                                      score))\n                           :pattern-update-fn (fn [patterns seeds]\n                                                (-&gt;&gt; patterns\n                                                     (filter (fn [{:keys [support]}]\n                                                               (&lt;= min-support (count support))))\n                                                     (filter (fn [p]\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2160, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (filter (fn [{:keys [support]}]\n                                                               (&lt;= min-support (count support))))\n                                                     (filter (fn [p]\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))))}\n                   [matches patterns] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2432, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (filter (fn [{:keys [support]}]\n                                                               (&lt;= min-support (count support))))\n                                                     (filter (fn [p]\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2406, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (filter (fn [{:keys [support]}]\n                                                               (&lt;= min-support (count support))))\n                                                     (filter (fn [p]\n                                                               (&lt;= min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (filter (fn [p]\n                                                               (if (empty? matches)\n                                                                 true\n                                                                 (&lt;= min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2998, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 3\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 10\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 15\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 20\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 30\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 3\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2931, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 10\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (-&gt;&gt; patterns\n                                                     (remove (fn [{:keys [support]}]\n                                                               (&gt; min-support (count support))))\n                                                     (remove (fn [p]\n                                                               (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                         (filter #(context-match-fn % p))\n                                                                                         (count)))))\n                                                     (remove (fn [p]\n                                                               (when-not (empty? matches)\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2932, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-support 10\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n                                                (if (empty? matches)\n                                                  patterns\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; min-support (count support))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                          (filter #(context-match-fn % p))\n                                                                                          (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 2982, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-matches 0\n                   min-seed-support 10\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 3252, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 10\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 3252, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 0\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                                                        :actual-true    (evaluation/actual-true (get-in split-model [0]) property)\n                                                        :all            (evaluation/all-triples (get-in split-model [0]))}))\n               [matches patterns]))&quot;, :offset 3251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn frac-seeds\n  [model property frac]\n  (let [actual-true (actual-true model property)\n        num-seeds (-&gt; actual-true\n                      (count)\n                      (* frac))\n        seeds (set (take num-seeds (make-all-seeds model property)))\n        model (update model :sentences #(remove seeds %))\n        model (assoc model :actual-true actual-true\n                           :all (all-triples model))]\n    [model seeds]))&quot;, :offset 438, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)\n          metrics {:actual-true (actual-true (get-in split-model [0]) property)\n                   :all         (all-triples (get-in split-model [0]))}]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; metrics\n                          (assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2242, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics nil #_(-&gt; model\n                          (assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2094, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (assoc :predicted-true 1#_(predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2091, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2088, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; \n                          (assoc model :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2089, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;:predicted-true&quot;, :offset 15, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (assoc :predicted-true 1 #_(predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2092, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model \n                          (update :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2090, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model \n                          (update :predicted-true #(predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2091, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model \n                          (update :predicted-true #(predicted-true matche %))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2092, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (assoc :x 1)\n                          #_(assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2129, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (+ 1)\n                          #_(assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2122, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          #_(assoc :predicted-true (predicted-true matches))\n                          #(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2090, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          #_(assoc :predicted-true (predicted-true matches))\n                          #_#(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2092, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn parameter-walk\n  [property model &amp; {:keys [context-path-length-cap context-thresh cluster-thresh min-support seed-frac]}]\n  (for [seed-frac seed-frac]\n    (let [split-model (frac-seeds model property seed-frac)]\n      (for [context-path-length-cap context-path-length-cap\n            context-thresh context-thresh\n            cluster-thresh cluster-thresh\n            min-support min-support]\n        (let [sentences (context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n              params {:context-match-fn  (fn [s p]\n                                           (and (re/sent-pattern-concepts-match? s p)\n                                                (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                      :cluster-merge-fn  re/add-to-pattern\n                      :cluster-match-fn  #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                            (and (&lt; (or %3 cluster-thresh) score)\n                                                 score))\n                      :pattern-update-fn (fn [patterns _]\n                                           (filter (fn [{:keys [support]}]\n                                                     (&lt;= min-support (count support)))\n                                                   patterns))}\n              [matches _] (re/cluster-bootstrap-extract-relations-persistent-patterns (get-in split-model [1]) sentences params)\n              metrics (-&gt; model\n                          (assoc :predicted-true (predicted-true matches))\n                          #_#(try\n                             (math/calc-metrics %)\n                             (catch ArithmeticException _ %))\n\n                          (assoc :context-path-length-cap context-path-length-cap\n                                 :context-thresh context-thresh\n                                 :cluster-thresh cluster-thresh\n                                 :min-support min-support\n                                 :seed-frac seed-frac))]\n          (log/info \&quot;Metrics:\&quot; metrics)\n          metrics)))))&quot;, :offset 2090, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 0\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (math/calc-metrics (assoc model :predicted-true (evaluation/predicted-true matches))))\n               [matches patterns]))&quot;, :offset 3010, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.9\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 0\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; model \n                                        (assoc :predicted-true (evaluation/predicted-true matches)) \n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3097, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; model\n    (assoc :predicted-true #{})\n    (math/calc-metrics))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; model\n    (assoc :predicted-true #{})\n    (math/precision))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; model\n    (assoc :predicted-true #{})\n    (math/true-pos))&quot;, :offset 62, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; model\n    (assoc :predicted-true #{})\n    (math/false-pos))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; split-model\n    (assoc :predicted-true #{})\n    (math/false-pos))&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; (get-in split-model [0])\n    (assoc :predicted-true #{})\n    (math/false-pos))&quot;, :offset 82, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; (get-in split-model [0])\n    (assoc :predicted-true #{})\n    (math/true-neg)\n    (count))&quot;, :offset 93, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt; (get-in split-model [0])\n    (assoc :predicted-true #{})\n    (math/false-neg)\n    (count))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 0\n                   min-seed-matches 0\n                   min-match-matches 50\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support min-seed-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; model\n                                        (assoc :predicted-true (evaluation/predicted-true matches))\n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3096, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-match-support 3\n                   min-seed-support 3\n                   min-seed-matches 0\n                   min-match-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; (get-in split-model [0])\n                                        (assoc :predicted-true (evaluation/predicted-true matches))\n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3096, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; model\n            :sentences\n            (map :context-vector)\n            (filter identity)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            (incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 267, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/to-dataset [[1 2] [1 2]])&quot;, :offset 35, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;X&quot;, :offset 1, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; model\n            :sentences\n            (map :context-vector)\n            (filter identity)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            #_(incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 269, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; model\n            :sentences\n            (map :context-vector)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            #_(incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 239, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(vec (take 2 X))&quot;, :offset 16, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences model))&quot;, :offset 26, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences (get split-model 0)))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; (get split-model 0)\n            :sentences\n            (map :context-vector)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            #_(incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 253, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; (get split-model 0)\n            :sentences\n            (map :context-vector)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            (incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; (get split-model 0)\n            :sentences\n            (map :context-vector)\n            (filter identity)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            (incanter/to-dataset)\n            #_(incanter/to-matrix)))&quot;, :offset 281, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/to-dataset (vec (take 2 X)))&quot;, :offset 38, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/to-matrix (vec (take 2 X)))&quot;, :offset 37, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def X (-&gt;&gt; (get split-model 0)\n            :sentences\n            (map :context-vector)\n            (filter identity)\n            (map seq)\n            (map #(take 2 %))\n            (map vec)\n            (vec)\n            (incanter/to-dataset)\n            (incanter/to-matrix)))&quot;, :offset 279, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def pca (stats/principal-components X))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def components (:rotation pca))&quot;, :offset 32, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def pc1 (incanter/sel components :cols 0))&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def pc2 (incanter/sel components :cols 1))&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def x1 (incanter/mmult X pc1))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def x2 (incanter/mmult X pc2))&quot;, :offset 31, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/view (charts/scatter-plot x1 x2\n                                      :x-label \&quot;PC1\&quot;\n                                      :y-label \&quot;PC2\&quot;\n                                      :title \&quot;PCA\&quot;))&quot;, :offset 200, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 3\n                   min-seed-matches 0\n                   min-match-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; (get-in split-model [0])\n                                        (assoc :predicted-true (evaluation/predicted-true matches))\n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3097, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.95\n                   cluster-thresh 0.95\n                   min-match-support 20\n                   min-seed-support 3\n                   min-seed-matches 0\n                   min-match-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; (get-in split-model [0])\n                                        (assoc :predicted-true (evaluation/predicted-true matches))\n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3097, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (let [context-path-length-cap 100\n                   context-thresh 0.94\n                   cluster-thresh 0.95\n                   min-match-support 10\n                   min-seed-support 3\n                   min-seed-matches 0\n                   min-match-matches 0\n                   sentences (evaluation/context-path-filter context-path-length-cap (get-in split-model [0 :sentences]))\n                   context-match-fn (fn [s p]\n                                      (and (re/sent-pattern-concepts-match? s p)\n                                           (&lt; context-thresh (re/context-vector-cosine-sim s p))))\n                   params {:context-match-fn  context-match-fn\n                           :make-pattern-fn   (fn [samples clusters]\n                                                (cluster-tools/single-pass-cluster samples clusters\n                                                  {:cluster-merge-fn re/add-to-pattern\n                                                   :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                        (and (&lt; (or %3 cluster-thresh) score)\n                                                                             score))}))\n                           :pattern-update-fn (fn [patterns seeds matches]\n\n                                                (if (empty? matches)\n                                                  (remove (fn [{:keys [support]}]\n                                                            (&gt; min-seed-support (count support)))\n                                                          patterns)\n                                                  (-&gt;&gt; patterns\n                                                       (remove (fn [{:keys [support]}]\n                                                                 (&gt; (+ min-match-support) (count support))))\n                                                       #_(remove (fn [p]\n                                                                   (&gt; min-seed-matches (-&gt;&gt; seeds\n                                                                                            (filter #(context-match-fn % p))\n                                                                                            (count)))))\n                                                       (remove (fn [p]\n                                                                 (&gt; min-match-matches (-&gt;&gt; matches\n                                                                                           (filter #(context-match-fn % p))\n                                                                                           (count))))))))}\n                   [matches patterns] (re/bootstrap-persistent-patterns (get-in split-model [1]) sentences params)]\n               (log/info \&quot;Metrics:\&quot; (-&gt; (get-in split-model [0])\n                                        (assoc :predicted-true (evaluation/predicted-true matches))\n                                        (math/calc-metrics)))\n               [matches patterns]))&quot;, :offset 3097, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def split-model (let [seed-frac 0.2]\n                   (evaluation/frac-seeds model property seed-frac)))&quot;, :offset 107, :ns &quot;scripts.bio-creative-relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.25335777" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32964602" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.32805908" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.33026317" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" />
      <window_info anchor="bottom" id="Build" order="8" weight="0.26476794" />
      <window_info anchor="bottom" id="Docker" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="10" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="11" side_tool="true" />
      <window_info anchor="bottom" id="Database Changes" order="12" />
      <window_info anchor="bottom" id="Version Control" order="13" weight="0.21460177" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" id="Terminal" order="16" visible="true" weight="0.28429204" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32743362" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2014652" />
      <window_info active="true" anchor="right" x="3279" y="551" width="1362" height="770" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="FLOATING" visible="true" weight="0.4382622" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Allow for custom pattern filtering" />
    <MESSAGE value="Minor fixes" />
    <MESSAGE value="Added functions that allow patterns to persist" />
    <MESSAGE value="{:tp 452, :tn 43870, :fp 181, :fn 1190, :precision 0.71406, :recall 0.27527407, :f1 0.39736265}" />
    <MESSAGE value="Minor changes" />
    <MESSAGE value="{:tp 88, :tn 44047, :fp 4, :fn 1225, :precision 0.95652175, :recall 0.067022085, :f1 0.1252669}" />
    <MESSAGE value="Planted seeds for PCA" />
    <MESSAGE value="{:tp 9, :tn 44051, :fp 0, :fn 1304, :precision 1.0, :recall 0.006854532, :f1 0.013615734}" />
    <MESSAGE value="{:tp 24, :tn 44041, :fp 10, :fn 1289, :precision 0.7058824, :recall 0.018278752, :f1 0.035634745}" />
    <MESSAGE value="{:tp 368, :tn 39538, :fp 4513, :fn 945, :precision 0.075394385, :recall 0.28027418, :f1 0.11882467}" />
    <MESSAGE value="Parameter walk" />
    <MESSAGE value="Removed extra for loop iterations" />
    <MESSAGE value="Readded" />
    <MESSAGE value="Provide parameter ranges as inputs" />
    <MESSAGE value="Seed creation handled outside running model" />
    <MESSAGE value="log info now debug" />
    <MESSAGE value="Patterns and context matching handled separately in bootstrap fn" />
    <MESSAGE value="{:tp 88, :tn 44050, :fp 1, :fn 1225, :precision 0.98876405, :recall 0.067022085, :f1 0.12553495}" />
    <MESSAGE value="Split model design pattern" />
    <MESSAGE value="Removed items which should be in nlm branch" />
    <MESSAGE value="Added util to requires" />
    <MESSAGE value="Simple fix" />
    <MESSAGE value="Simple fixes" />
    <MESSAGE value="PCA ar function" />
    <MESSAGE value="Letfn for functions" />
    <option name="LAST_COMMIT_MESSAGE" value="Letfn for functions" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/word2vec.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/protocols.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="159">
          <caret line="38" column="3" selection-start-line="38" selection-start-column="3" selection-end-line="38" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/OwlModel.class" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/kabob-mops/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj" />
    <entry file="file://$PROJECT_DIR$/src/util.clj" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/SocketInputStream.java" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/jdk/internal/misc/Unsafe.java" />
    <entry file="jar:///usr/lib/jvm/jdk-11.0.2/lib/src.zip!/java.base/java/net/PlainSocketImpl.java" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/util.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/OWLNamedObject.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/net/sourceforge/owlapi/owlapi-distribution/4.1.3/owlapi-distribution-4.1.3.jar!/org/semanticweb/owlapi/model/HasIRI.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="244">
          <caret line="136" selection-start-line="136" selection-end-line="136" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/e0868a96300a64867e50046a865befc98c819e54/src/math.clj" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
    <entry file="file://$USER_HOME$/.clojure/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="302">
          <caret line="35" column="15" lean-forward="true" selection-start-line="35" selection-start-column="15" selection-end-line="35" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.boot/profile.boot" />
    <entry file="file://$PROJECT_DIR$/replay_pid6356.log" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/17b59d2ae8bb15cf21b8ccb4c4a605fc5b18871f/src/math.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/conll/ConllUtil.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class" />
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/biostacks.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/github/vlsi/mxgraph/jgraphx/3.9.8.1/jgraphx-3.9.8.1.jar!/com/mxgraph/view/mxGraph.class" />
    <entry file="jar://$MAVEN_REPOSITORY$/edu/ucdenver/ccp/knowtator/2.1.6/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/object/TextSource.class" />
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2244">
          <caret line="102" column="11" selection-start-line="102" selection-start-column="2" selection-end-line="127" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/io/knowtator/KnowtatorXmlUtil.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="242" column="68" selection-start-line="242" selection-start-column="68" selection-end-line="242" selection-end-column="68" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/collection/GraphSpaceCollection.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="166">
          <caret line="46" selection-start-line="46" selection-end-line="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/view/KnowtatorView.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="279">
          <caret line="787" column="46" selection-start-line="787" selection-start-column="46" selection-end-line="787" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/KnowtatorModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="28" column="11" selection-start-line="28" selection-start-column="11" selection-end-line="28" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/knowtator-2.1.6.jar!/edu/ucdenver/ccp/knowtator/model/BaseModel.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="550">
          <caret line="84" selection-start-line="84" selection-end-line="84" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="129">
          <caret line="38" column="33" selection-start-line="38" selection-start-column="33" selection-end-line="38" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/build.boot" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.java" />
    <entry file="file://$PROJECT_DIR$/src/ClusterViewer.form" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/dc457f16a25b60a2984b3240c956e040d8303141/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="12" column="40" selection-start-line="12" selection-start-column="40" selection-end-line="12" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="176">
          <caret line="8" column="14" selection-start-line="8" selection-start-column="14" selection-end-line="8" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="814">
          <caret line="37" column="31" selection-start-line="37" selection-start-column="31" selection-end-line="37" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="https://github.com/gitpitch/in-60-seconds.git">
      <provider selected="true" editor-type-id="httpFileEditor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/README.md" />
    <entry file="file://$PROJECT_DIR$/presentations/nlm_2019/PITCHME.md" />
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="658">
          <caret line="44" column="50" selection-start-line="44" selection-start-column="50" selection-end-line="44" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1210">
          <caret line="55" column="14" selection-start-line="55" selection-start-column="14" selection-end-line="55" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="467">
          <caret line="30" column="4" selection-start-line="30" selection-start-column="4" selection-end-line="30" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/7a6424a2fa027ba75696809601befccf70d4ca25/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="72" selection-start-line="10" selection-start-column="72" selection-end-line="10" selection-end-column="72" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="401">
          <caret line="135" column="6" selection-start-line="135" selection-start-column="6" selection-end-line="135" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="490">
          <caret line="100" column="35" selection-start-line="100" selection-start-column="35" selection-end-line="100" selection-end-column="35" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/ubergraph/ubergraph/0.5.2/ubergraph-0.5.2.jar!/ubergraph/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="7" lean-forward="true" selection-start-line="10" selection-start-column="7" selection-end-line="10" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/potemkin/potemkin/0.4.3/potemkin-0.4.3.jar!/potemkin/namespaces.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="76" column="10" selection-start-line="76" selection-start-column="10" selection-end-line="76" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="292">
          <caret line="78" column="36" lean-forward="true" selection-start-line="78" selection-start-column="36" selection-end-line="78" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2491">
          <caret line="207" column="7" selection-start-line="207" selection-start-column="7" selection-end-line="207" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="401">
          <caret line="87" column="57" selection-start-line="87" selection-start-column="57" selection-end-line="87" selection-end-column="57" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Dep2Rel</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: github-tuh8888/hpl-utl:17b59d</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>