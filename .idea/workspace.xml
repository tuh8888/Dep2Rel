<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BookmarkManager">
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="202" />
    <bookmark url="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" line="109" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd68d31a-9ca3-4dbc-9e5f-186ec0e5f744" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/classes/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Dep2Rel" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Dep2Rel" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="Word2Vec-clj" />
              <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="Word2Vec-clj" />
                <option name="path" value="$PROJECT_DIR$/../Word2Vec-clj" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$/../hpl-util" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$/../hpl-util" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4675345987000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="4281492506" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="4675026121000" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" value="3032155016" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="4670933584000" />
        <entry key="$PROJECT_DIR$/../hpl-util/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../Word2Vec-clj" value="RE_IMPORT" />
        <entry key="$PROJECT_DIR$/../hpl-util" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../Word2Vec-clj">
      <ProjectState />
    </projectState>
    <projectState path="$PROJECT_DIR$/../hpl-util">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Aliases" type="d57c182a:AliasesNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Dep2Rel" type="f1a62948:ProjectNode" />
                <item name="Dep2Rel" type="2d1252cf:ModuleNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Dep2Rel" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="456">
              <caret line="179" column="49" lean-forward="true" selection-start-line="179" selection-start-column="49" selection-end-line="179" selection-end-column="49" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>:samples</find>
      <find>samples</find>
      <find>context-path-f</find>
      <find>save</find>
      <find>to-da</find>
      <find>make-co</find>
      <find>run</find>
      <find>making con</find>
      <find>|</find>
      <find>make-con</find>
      <find>re/con</find>
      <find>chem</find>
      <find>unit-vec</find>
      <find>take</find>
      <find>structure-annot</find>
      <find>match-thresh</find>
      <find>vector-fn</find>
      <find>make-mo</find>
      <find>(update prepared-model :seeds (fn [seeds] (take 100 seeds)))</find>
      <find>incan</find>
      <find>sent-id</find>
      <find>info sent-id</find>
      <find>log</find>
      <find>log/</find>
      <find>f1</find>
      <find>12</find>
      <find>1218 12</find>
      <find>:property</find>
      <find>| NONE |</find>
      <find>| CPR:4 |</find>
    </findStrings>
    <replaceStrings>
      <replace>&quot;</replace>
      <replace>let-release</replace>
      <replace>vec-remove</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="UPDATE_TYPE" value="REBASE" />
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="PUSH_UPDATE_ALL_ROOTS" value="false" />
    <option name="ROOT_SYNC" value="DONT_SYNC" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="nlm2019" />
      </map>
    </option>
    <option name="RESET_MODE" value="MIXED" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/conll.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/clustering.clj" />
        <option value="$USER_HOME$/.clojure/deps.edn" />
        <option value="$USER_HOME$/.boot/profile.boot" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/src/ClusterViewer.form" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/08d7ef3ab583522a3883e50f7142e9ca7cc8f636/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6baafa8f8309fc0aca5703bafb43362c32848ed7/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/48c291f6cf3c251d20c1d7d9544cca8748dd2ee6/src/word2vec.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/math.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/742e803cecdb975b90750cc634ccc155c820b6dc/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5ec12679e0daee9329b90d65f2a544afcbfa6f56/src/cluster_tools.clj" />
        <option value="$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/d0ddfda9271d11a2ba467cdb1ecacf5d2669c8b5/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/sentence.clj" />
        <option value="$PROJECT_DIR$/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/knowtator_clj.clj" />
        <option value="$PROJECT_DIR$/run/run_on_tantor.sh" />
        <option value="$PROJECT_DIR$/../hpl-util/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/run/run_pitchme.sh" />
        <option value="$PROJECT_DIR$/assets/PITCHME.css" />
        <option value="$PROJECT_DIR$/assets/metrics.svg" />
        <option value="$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj" />
        <option value="$PROJECT_DIR$/../Word2Vec-clj/deps.edn" />
        <option value="$PROJECT_DIR$/../hpl-util/src/math.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/util.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj" />
        <option value="$PROJECT_DIR$/src/scripts/relation_extraction_script.clj" />
        <option value="$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj" />
        <option value="$PROJECT_DIR$/src/scripts/examples.clj" />
        <option value="$PROJECT_DIR$/PITCHME.md" />
        <option value="$APPLICATION_CONFIG_DIR$/scratches/scratch.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj" />
        <option value="$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj" />
        <option value="$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1600" />
    <option name="y" value="30" />
    <option name="width" value="1120" />
    <option name="height" value="680" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="ccp" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="nlp" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="resources" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Dep2Rel" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="run" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="b2602c69:ProjectViewProjectNode" />
              <item name="Scratches and Consoles" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
              <item name="Scratches" type="d62648e6:ScratchProjectViewPane$MyRootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope">
        <subPane subId="Scope 'Production'; set:Production; class com.intellij.psi.search.scope.ProjectProductionScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ccp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Dep2Rel" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="edu" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ucdenver" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="ccp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
              <item name="nlp" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="hpl-util" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
            </path>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="Word2Vec-clj" type="2674bda8:ScopeViewTreeModel$GroupNode" />
              <item name="src" type="9f88c78c:ScopeViewTreeModel$FileNode" />
            </path>
          </expand>
          <select />
        </subPane>
        <subPane subId="Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope">
          <expand>
            <path>
              <item name="Dep2Rel" type="3d21c010:ScopeViewTreeModel$ProjectNode" />
              <item name="~/Documents/Dep2Rel" type="442cc68d:ScopeViewTreeModel$RootNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="$PROJECT_DIR$/run/run_on_tantor.sh&#10;/home/harrison/Documents/hpl-util/target/clojure/core.clj&#10;true&#10;/home/harrison/Documents/hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj&#10;/home/harrison/Documents/Dep2Rel/run/run_pitchme.sh&#10;/home/harrison/Documents/hpl-util/target/cluster_tools.clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Dep2Rel/src" value="clj" />
    <property name="cursive.last.file.extension./home/harrison/Documents/Word2Vec-clj/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
  </component>
  <component name="RecentsManager">
    <key name="OPEN_URL_DIALOG">
      <recent name="https://github.com/gitpitch/in-60-seconds.git" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/lib" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/assets" />
      <recent name="$PROJECT_DIR$/run" />
      <recent name="$PROJECT_DIR$/../hpl-util/src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1560843082896">{:repl-history {:ide [], :local [{:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean))&quot;, :offset 133, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 150, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations)&quot;, :offset 159, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean))&quot;, :offset 184, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource)&quot;, :offset 201, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; annotations\n     (k/model)\n     (bean)\n     (:textSources)\n     (second)\n     (bean)\n     :graphSpaces\n     (first)\n     (bean)\n     :relationAnnotations\n     (first)\n     (bean)\n     :textSource\n     (bean)\n     :id)&quot;, :offset 222, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def model (k/simple-model annotations))&quot;, :offset 40, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def actual-true (set (map evaluation/edge-&gt;triple\n                           (k/edges-for-property model property))))&quot;, :offset 118, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first actual-true)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn c-metrics\n  [matches]\n  (math/calc-metrics {:predicted-true (evaluation/predicted-true matches)\n                      :actual-true    actual-true\n                      :all            all-triples}))&quot;, :offset 204, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def matches (let [seeds (clojure.set/union\n                             (evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)\n                             #_(evaluation/make-seeds sentences\n                               \&quot;CRAFT_aggregate_ontology_Instance_21365\&quot;\n                               \&quot;CRAFT_aggregate_ontology_Instance_22495\&quot;))\n                     seed-thresh 0.95\n                     context-thresh 0.95\n                     cluster-thresh 0.7\n                     min-support 10\n                     params {:seed             (first seeds)\n                             :seed-thresh      seed-thresh\n                             :context-thresh   context-thresh\n                             :seed-match-fn    #(and (re/concepts-match? %1 %2)\n                                                     (&lt; seed-thresh (re/context-vector-cosine-sim %1 %2)))\n                             :context-match-fn #(&lt; context-thresh (re/context-vector-cosine-sim %1 %2))\n                             :cluster-merge-fn re/add-to-pattern\n                             :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                  (and (&lt; (or %3 cluster-thresh) score)\n                                                       score))\n                             :min-support      min-support}\n                     matches (-&gt;&gt; (re/cluster-bootstrap-extract-relations seeds sentences params)\n                                  (map #(merge % params)))]\n                 (log/info \&quot;Metrics\&quot; (c-metrics matches))\n                 matches))&quot;, :offset 1624, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(evaluation/make-seeds sentences\n                               \&quot;17429625-T19\&quot; \&quot;17429625-T32\&quot;)&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))&quot;, :offset 528, :ns &quot;user&quot;} {:command &quot;(def home-dir \&quot;~/\&quot;)&quot;, :offset 19, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))&quot;, :offset 81, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))&quot;, :offset 56, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))&quot;, :offset 95, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (-&gt;&gt; (io/reader f)\n       (line-seq)\n       (map #(s/split % #\&quot;\\t\&quot;))\n       (map\n         (fn [[doc id concept start end _]]\n           (let [start (Integer/parseInt start)\n                 end (Integer/parseInt end)\n                 text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                 concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                 span (Span. concept-annotation nil start end)]\n             (.removeModelListener annotations text-source)\n             (.add ^ConceptAnnotation concept-annotation span)\n             (.add (.getConceptAnnotations text-source) concept-annotation)\n             (.addModelListener annotations text-source))))))&quot;, :offset 819, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation])\n  (:import (edu.ucdenver.ccp.knowtator.model.object GraphSpace TextSource ConceptAnnotation Span AnnotationNode Quantifier)))\n\n(def home-dir \&quot;~/\&quot;)\n\n(def home-dir\n  (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;tuh8888\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n\n(def biocreative-dir\n  (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n\n(def training-dir\n  (io/file biocreative-dir \&quot;chemprot_training\&quot;))\n(def word-vector-dir\n  (io/file home-dir \&quot;WordVectors\&quot;))\n\n(def word2vec-db\n  (.getAbsolutePath\n    (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;)))\n\n(def annotations (k/view training-dir))&quot;, :offset 983, :ns &quot;user&quot;} {:command &quot;(defn biocreative-read-abstracts\n  [^KnowtatorModel annotations f]\n  (let [lines (-&gt;&gt; (io/reader f)\n                   (line-seq)\n                   (map #(s/split % #\&quot;\\t\&quot;)))]\n    (doall\n      (map\n       (fn [[id title abstract]]\n         (let [article-f (io/file (.getArticlesLocation annotations) (str id \&quot;.txt\&quot;))]\n           (spit article-f (str title \&quot;\\n\&quot; abstract))\n           (let [text-sources (.getTextSources annotations)\n                 text-source (TextSource. annotations\n                                          (io/file (.getAnnotationsLocation annotations)\n                                                   (str id \&quot;.xml\&quot;))\n                                          (.getName article-f))]\n             (.add text-sources\n                   text-source))))\n       lines))\n    (log/info \&quot;Done\&quot;)))&quot;, :offset 813, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(defn biocreative-read-entities\n  [^KnowtatorModel annotations f]\n  (doall\n    (-&gt;&gt; (io/reader f)\n        (line-seq)\n        (map #(s/split % #\&quot;\\t\&quot;))\n        (map\n          (fn [[doc id concept start end _]]\n            (let [start (Integer/parseInt start)\n                  end (Integer/parseInt end)\n                  text-source ^TextSource (.get (.get (.getTextSources annotations) doc))\n                  concept-annotation (ConceptAnnotation. text-source id nil (.getDefaultProfile annotations) concept nil)\n                  span (Span. concept-annotation nil start end)]\n              (.removeModelListener annotations text-source)\n              (.add ^ConceptAnnotation concept-annotation span)\n              (.add (.getConceptAnnotations text-source) concept-annotation)\n              (.addModelListener annotations text-source))))))\n  (log/info \&quot;Done\&quot;))&quot;, :offset 864, :ns &quot;edu.ucdenver.ccp.nlp.readers&quot;} {:command &quot;(def annotations (k/view training-dir))&quot;, :offset 39, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))&quot;, :offset 74, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)&quot;, :offset 66, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))&quot;, :offset 72, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(rdr/biocreative-read-entities (k/model annotations) entities-f)&quot;, :offset 64, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def annotations (k/view training-dir))\n\n;(def relations-file (io/file training-dir \&quot;chemprot_training_relations.tsv\&quot;))\n;(rdr/biocreative-read-relations (k/model annotations) relations-file)\n\n\n\n(def abstracts-f (io/file training-dir \&quot;chemprot_training_abstracts.tsv\&quot;))\n(rdr/biocreative-read-abstracts (k/model annotations) abstracts-f)\n\n\n(def entities-f (io/file training-dir \&quot;chemprot_training_entities.tsv\&quot;))\n(rdr/biocreative-read-entities (k/model annotations) entities-f)\n&quot;, :offset 476, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(require '[clojure.tools.deps.alpha :as deps])&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(use '(incanter core stats charts))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(view (histogram (sample-normal 1000)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;3\n4\n\n(let [x (range -3 3 0.1)]\n  (view (dynamic-xy-plot [mean (range -3 3 0.1)\n                          std-dev (range 0.1 10 0.1)]\n                         [x (pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 202, :ns &quot;user&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.sentence :as sentence]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [incanter.stats :as stats]\n            [incanter.core :as incanter]\n            [incanter.charts :as charts]))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-xy-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 251, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [mean (range -3 3 0.1)\n                                          std-dev (range 0.1 10 0.1)]\n                                         [x (stats/pdf-normal x :mean mean :sd std-dev)])))&quot;, :offset 256, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(let [x (range -3 3 0.1)]\n  (incanter/view (charts/dynamic-scatter-plot [cluster-similarity-score-threshold (range 0 1 0.01)]\n                                              [x (cluster-tools/single-pass-cluster sentences #{}\n                                                                                    {:cluster-merge-fn re/add-to-pattern\n                                                                                     :cluster-match-fn #(let [score (re/context-vector-cosine-sim %1 %2)]\n                                                                                                          (and (&lt; (or %3 cluster-similarity-score-threshold) score)\n                                                                                                               score))})])))&quot;, :offset 787, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(take nil '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(doseq )&quot;, :offset 8, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;resources/dep_example.png\&quot; :format :png}})&quot;, :offset 79, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color :red}]))&quot;, :offset 691, :ns &quot;scripts.examples&quot;} {:command &quot;(def output-color :blue)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def input-color :green)&quot;, :offset 24, :ns &quot;scripts.examples&quot;} {:command &quot;(def important-color :red)&quot;, :offset 26, :ns &quot;scripts.examples&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources {:color input-color}]\n                             [:patterns {:color output-color}]\n                             [:matches {:color output-color}]\n                             [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds {:label :bootstrapping :color important-color}]))&quot;, :offset 893, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:save {:filename \&quot;resources/algorithm.png\&quot; :format :png}})&quot;, :offset 85, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.png\&quot;\n                                  :format   :png}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.png\&quot; \n                          :format :png}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svgz\&quot;\n                                  :format   :svgz}})&quot;, :offset 172, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparentp\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 147, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :save {:filename \&quot;resources/dep_example.gif\&quot;\n                          :format :gif}})&quot;, :offset 146, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 2\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :scale 4\n                           #_:save #_{:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 210, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 174, :ns &quot;scripts.examples&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width :data (incanter/get-dataset :iris) :group-by :Species))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(incanter/view (inc-charts/scatter-plot :Sepal.Length :Sepal.Width \n                             :data (incanter/get-dataset :iris) \n                             :group-by :Species))&quot;, :offset 10, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(ns edu.ucdenver.ccp.nlp.evaluation\n  (:require [cluster-tools]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]\n            [taoensso.timbre :as log]\n            [incanter.core :as incanter]\n            [incanter.stats :as inc-stats]\n            [com.climate.claypoole :as cp]\n            [uncomplicate-context-alg :as context]\n            [incanter.charts :as inc-charts]\n            [incanter.svg :as inc-svg]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]))&quot;, :offset 484, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 178, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.datasets/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 120, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter/view\n  (inc-charts/scatter-plot :Sepal.Length :Sepal.Width\n                           :data (incanter.core/get-dataset :iris)\n                           :group-by :Species))&quot;, :offset 116, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(use '(incanter core datasets))\n(def iris (get-dataset :iris))\n(view iris)&quot;, :offset 74, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (scatter-plot :Sepal.Length :Sepal.Width                     :data (get-dataset :iris)                    :group-by :Species))&quot;, :offset 132, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width :data \n                    (get-dataset :iris) :group-by :Species))&quot;, :offset 23, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width \n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 106, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color)) \n           (view $data) \n           (view (inc-charts/bar-chart :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 271, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(with-data ($rollup :mean :count [:hair :eye] \n                    (get-dataset :hair-eye-color))\n           (view (inc-charts/scatter-plot :hair :count \n                                       :group-by :eye \n                                       :legend true)))&quot;, :offset 97, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 111, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                                    :legend true\n                                    :data (get-dataset :iris)\n                                    :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 151, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label true\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 35, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3]\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label [1 2 3] 2\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 161, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label :Species\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 160, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 30, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/xy-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label {:Species 1}\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 158, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label (sel (get-dataset :iris) :cols :Species)\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 301, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                               :legend true\n                               :series-label 'x\n                               :data (get-dataset :iris)\n                               :group-by :Species))&quot;, :offset 153, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                              :legend true\n                              :series-label 'x\n                              :data (get-dataset :iris)\n                              :group-by :Species))&quot;, :offset 4, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def plot (incanter.charts/scatter-plot :Sepal.Length :Sepal.Width\n                                   :legend true\n                                   :series-label 'x\n                                   :data (get-dataset :iris)\n                                   :group-by :Species))&quot;, :offset 9, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-categories plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 41, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 27, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [10 10 10] [10 20 40] :series-label \&quot;winter-break\&quot;)&quot;, :offset 42, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(get (map identity [1 2 3]) 0)&quot;, :offset 26, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 59, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(view plot)&quot;, :offset 11, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(incanter.charts/add-points plot [100 100 100] [100 200 400\n                                                ] :series-label \&quot;winter-break1\&quot;)&quot;, :offset 108, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(uber/viz-graph algorithm {:bgcolor :transparent\n                           :save {:filename \&quot;resources/algorithm.svg\&quot;\n                                  :format   :svg}})&quot;, :offset 170, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tB\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tB\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :TB\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :tb\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir \&quot;TB\&quot;\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 215, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   #_:save #_{:filename \&quot;resources/dep_example.jpg\&quot;\n                              :format :jpg}})&quot;, :offset 214, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;resources/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 206, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;assets/dep_example.jpg\&quot;\n                          :format :jpg}})&quot;, :offset 203, :ns &quot;scripts.examples&quot;} {:command &quot;(uber/viz-graph g {:bgcolor :transparent\n                   :scale 4\n                   :rankdir :LR\n                   :save {:filename \&quot;assets/dep_example.svg\&quot;\n                          :format :svg}})&quot;, :offset 203, :ns &quot;scripts.examples&quot;} {:command &quot;(defn make-sentence\n  \&quot;Make a sentence using the sentence graph and entities\&quot;\n  [model undirected-sent sent-id [ann1 ann2 :as anns]]\n  ;; TODO: Remove context toks that are part of the entities\n  (let [concepts           (-&gt;&gt; anns\n                                (map :concept)\n                                (map #(conj #{} %))\n                                (set))\n        entities           (-&gt;&gt; anns\n                                (map :id)\n                                (set))\n        context (apply min-key count (for [tok1 (:toks ann1)\n                                           tok2 (:toks ann2)]\n                                       (make-context-path model undirected-sent sent-id tok1 tok2)))\n        full-sentence-text (pprint-sent-text model sent-id)\n        context-text       (pprint-toks-text model context)]\n    (-&gt;Sentence concepts entities context sent-id full-sentence-text context-text)))&quot;, :offset 916, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;}], :remote [{:command &quot;(defn support-weighted-sim-pattern-distribution-context-match\n  [{:keys [vector-fn samples patterns match-thresh factory] :as params}]\n  (when (and (seq samples) (seq patterns))\n    (log/info \&quot;Finding matches\&quot;)\n    (let [patterns        (patterns-with-support-weight patterns)\n          samples         (vec samples)\n          support         (mapcat :support patterns)\n          support-vectors (map vector-fn support)]\n      (-&gt;&gt; samples\n           (map vector-fn)\n           (linear-algebra/mdot factory support-vectors)\n           (map vector samples)\n           (map (fn [[sample sample-scores]]\n                  (let [scores (support-pattern-scores params patterns sample-scores)]\n                    (if (seq scores)\n                      (let [{:keys [predicted weight] best-scores :scores :as pattern} (apply max-key :score scores)\n                            other-scores (-&gt;&gt; scores\n                                              (remove #(= (:predicted %) predicted))\n                                              (mapcat #(map (fn [score]\n                                                              (* score (:weight %)))\n                                                            (:scores %))))\n                            best-scores (map #(* % weight) best-scores)]\n                        (try\n                          (let [mu          (inc-stats/mean other-scores)\n                                {:keys [p-value]} (inc-stats/t-test best-scores :mu mu)\n                                confidence  (- 1 p-value)]\n                            (if (&lt; match-thresh confidence)\n                              (assoc sample :predicted predicted\n                                            :confidence confidence)\n                              sample)\n                            (assoc sample :predicted predicted\n                                          :confidence confidence))\n                          (catch Exception _ \n                            sample)))\n                      sample))))))))&quot;, :offset 2016, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn make-context-path\n  [{:keys [structure-annotations concept-annotations]} undirected-sent sent-id toks]\n  (log/info (seq toks))\n  (let [sent-anns (filter #(= (:sent-id %) sent-id) (vals concept-annotations))]\n    (-&gt;&gt; toks\n         (apply uber-alg/shortest-path undirected-sent)\n         (uber-alg/nodes-in-path)\n         (map #(get structure-annotations %))\n         (reduce\n           (fn [[toks ann :as x] tok]\n             (if (and ann (overlap ann tok))\n               x\n               (let [ann (first (filter #(overlap % tok) sent-anns))]\n                 [(conj toks (if ann\n                               (assoc tok :spans (:spans ann))\n                               tok))\n                  ann])))\n           nil)\n         (first)\n         (remove #(empty? (str/replace (-&gt;&gt; %\n                                            :spans\n                                            (vals)\n                                            (map :text)\n                                            (str/join))\n                                       #\&quot;\\)|\\(\&quot; \&quot;\&quot;)))\n         (map :id))))&quot;, :offset 1082, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(get-in base-testing-model [:structure-annotations \&quot;21955206-147898\&quot;])&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(get-in base-testing-model [:structure-graphs \&quot;21955206-Sentence 6\&quot;])&quot;, :offset 69, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-context-path\n  [{:keys [structure-annotations concept-annotations]} undirected-sent sent-id toks]\n  (log/info sent-id)\n  (let [sent-anns (filter #(= (:sent-id %) sent-id) (vals concept-annotations))]\n    (-&gt;&gt; toks\n         (apply uber-alg/shortest-path undirected-sent)\n         (uber-alg/nodes-in-path)\n         (map #(get structure-annotations %))\n         (reduce\n           (fn [[toks ann :as x] tok]\n             (if (and ann (overlap ann tok))\n               x\n               (let [ann (first (filter #(overlap % tok) sent-anns))]\n                 [(conj toks (if ann\n                               (assoc tok :spans (:spans ann))\n                               tok))\n                  ann])))\n           nil)\n         (first)\n         (remove #(empty? (str/replace (-&gt;&gt; %\n                                            :spans\n                                            (vals)\n                                            (map :text)\n                                            (str/join))\n                                       #\&quot;\\)|\\(\&quot; \&quot;\&quot;)))\n         (map :id))))&quot;, :offset 1079, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn concept-annotations-&gt;sentences\n  [{:keys [concept-annotations structure-graphs] :as model}]\n  (let [undirected-sents (util/map-kv graph/undirected-graph structure-graphs)]\n    (-&gt;&gt; concept-annotations\n         (vals)\n         (group-by :sent-id)\n         (pmap (fn [[sent-id sent-annotations]]\n                 (log/info \&quot;Sentence:\&quot; sent-id)\n                 (combination-sentences model (get undirected-sents sent-id) sent-id sent-annotations)))\n         (apply concat))))&quot;, :offset 479, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def testing-sentences (re-model/make-sentences base-testing-model (io/file testing-dir \&quot;sentences.edn\&quot;)))&quot;, :offset 106, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def base-testing-model (re-model/make-model testing-knowtator word2vec-db factory\n                                             (io/file testing-dir \&quot;concept-annotations.edn\&quot;)\n                                             (io/file testing-dir \&quot;structure-annotations.edn\&quot;)))\n(def testing-sentences (re-model/make-sentences base-testing-model (io/file testing-dir \&quot;sentences.edn\&quot;)))\n(def testing-model (biocreative-model base-testing-model testing-sentences property-map))&quot;, :offset 469, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; training-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; testing-model\n                                            (re-model/model-params)\n                                            (util/map-kv count))\n                                  :model :testing)]))\n(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))&quot;, :offset 850, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    match-thresh\n                                                    cluster-thresh\n                                                    confidence-thresh\n                                                    min-pattern-support\n                                                    seed-frac\n                                                    rng negative-cap\n                                                    matche-fn]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          match-thresh\n          cluster-thresh          cluster-thresh\n          confidence-thresh       confidence-thresh\n          min-match-support       min-pattern-support]\n      (-&gt; prepared-model\n          (assoc :match-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :confidence-thresh confidence-thresh\n                 :min-pattern-support min-match-support\n                 :max-iterations 100\n                 :max-matches 5000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap\n                 :match-fn matche-fn)\n          (run-model results-dir)))))&quot;, :offset 1901, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(defn bootstrap\n  [{:keys [seeds factory vector-fn match-fn] :as model}]\n  (log/info (:context-path-length-cap model) (count (:all-samples model)) match-fn)\n  (let [model (assoc model :samples (-&gt;&gt; model\n                                         (context-path-filter)\n                                         (map #(-&gt;&gt; %\n                                                    (vector-fn)\n                                                    (linear-algebra/unit-vec factory)\n                                                    (assoc % :VEC))))\n                           :matches #{}\n                           :seeds seeds\n                           :iteration 0)]\n    (log/info (re-params model))\n    (log-starting-values model)\n    (loop [model model]\n      (log/info (count (:seeds model)) (count (:patterns model)))\n      (let [model       (assoc model :patterns (pattern-update model))\n            unclustered (decluster model)\n            model       (update model :patterns (fn [patterns] (filter (fn [pattern] (support-filter model pattern)) patterns)))\n            model       (assoc model :seeds (match-fn model))\n            model       (update model :samples (fn [samples] (let [new-matches (:seeds model)]\n                                                               (if (seq new-matches)\n                                                                 (remove :predicted new-matches)\n                                                                 samples))))\n            model       (update model :seeds (fn [new-matches] (filter :predicted new-matches)))\n            model       (update model :matches (fn [matches] (-&gt;&gt; model\n                                                                  :seeds\n                                                                  (into matches))))]\n        (if-let [results (terminate? model)]\n          results\n          (do\n            (log-current-values model)\n            (let [model (update model :iteration inc)\n                  model (update model :seeds (fn [new-matches] (-&gt;&gt; new-matches\n                                                                    (cap-nones)\n                                                                    (lazy-cat unclustered))))]\n              (recur model))))))))&quot;, :offset 2262, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn parameter-walk\n  [training-model testing-model results-dir {:keys [context-path-length-cap\n                                                    match-thresh\n                                                    cluster-thresh\n                                                    confidence-thresh\n                                                    min-pattern-support\n                                                    seed-frac\n                                                    rng negative-cap\n                                                    match-fn]}]\n  (doall\n    ;; parallelize with\n    #_(cp/upfor (dec (cp/ncpus)))\n    (for [seed-frac               seed-frac\n          :let [split-model    (re-model/split-train-test (assoc training-model :seed-frac seed-frac\n                                                                                :rng rng\n                                                                                :negative-cap negative-cap))\n                prepared-model (if (seq testing-model)\n                                 (re-model/train-test split-model testing-model)\n                                 split-model)]\n          context-path-length-cap context-path-length-cap\n          context-thresh          match-thresh\n          cluster-thresh          cluster-thresh\n          confidence-thresh       confidence-thresh\n          min-match-support       min-pattern-support]\n      (-&gt; prepared-model\n          (assoc :match-thresh context-thresh\n                 :cluster-thresh cluster-thresh\n                 :confidence-thresh confidence-thresh\n                 :min-pattern-support min-match-support\n                 :max-iterations 100\n                 :max-matches 5000\n                 :re-clustering? true\n                 :context-path-length-cap context-path-length-cap\n                 :match-fn match-fn)\n          (run-model results-dir)))))&quot;, :offset 1899, :ns &quot;edu.ucdenver.ccp.nlp.evaluation&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk (update training-model :sentences (fn [seeds] (take 100 seeds))) testing-model results-dir\n                                                   {:context-path-length-cap          [100 10] #_[2 3 5 10 20 35 100]\n                                                    :match-thresh          #_[0.95]   [0.7 0.8 0.9]\n                                                    :cluster-thresh          #_[0.95] [0.975 0.95 0.9]\n                                                    :confidence-thresh                [0.8 0.9 0.5]\n                                                    :min-pattern-support              [1 3 5] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     3000\n                                                    :match-fn re/support-weighted-sim-distribution-context-match}))&quot;, :offset 1082, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations base-testing-model))&quot;, :offset 49, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count testing-sentences)&quot;, :offset 25, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (:concept-annotations testing-model))&quot;, :offset 44, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(keys (group-by :sent-id (:concept-annotations testing-model)))&quot;, :offset 63, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(first (keys (group-by :sent-id (vals (:concept-annotations testing-model)))))&quot;, :offset 78, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(contains? (keys (group-by :sent-id (vals (:concept-annotations testing-model)))) nil)&quot;, :offset 86, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(contains? (vec (keys (group-by :sent-id (vals (:concept-annotations testing-model)))) nil))&quot;, :offset 92, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(contains? (seq (keys (group-by :sent-id (vals (:concept-annotations testing-model))))) nil)&quot;, :offset 92, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(keys (group-by :sent-id (vals (:concept-annotations testing-model))))&quot;, :offset 70, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(graph/undirected-graph (get-in base-testing-model [:structure-graphs \&quot;21955206-Sentence 6\&quot;]))&quot;, :offset 94, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (filter (fn [{:keys [entities]}]\n                 (-&gt;&gt; entities\n                      (map #(get-in testing-model [:concept-annotations % :concept]))\n                      (set)\n                      (allowed-concept-pairs))) testing-sentences))&quot;, :offset 252, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-model (biocreative-model base-testing-model testing-sentences property-map))&quot;, :offset 89, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:testing-sentences testing-model))&quot;, :offset 42, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:sentences testing-model))&quot;, :offset 34, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def training-sentences (re-model/make-sentences base-training-model (io/file training-dir \&quot;sentences.edn\&quot;)))\n(def training-model (biocreative-model base-training-model training-sentences property-map))&quot;, :offset 202, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; (select-keys training-model re-model/MODEL-KEYs)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; (select-keys testing-model re-model/MODEL-KEYs)\n                                            (util/map-kv count))\n                                  :model :testing)]))&quot;, :offset 440, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def base-training-model (re-model/make-model training-knowtator word2vec-db factory\n                                              (io/file testing-dir \&quot;concept-annotations.edn\&quot;)\n                                              (io/file testing-dir \&quot;structure-annotations.edn\&quot;)))\n(def training-sentences (re-model/make-sentences base-training-model (io/file training-dir \&quot;sentences.edn\&quot;)))\n(def training-model (biocreative-model base-training-model training-sentences property-map))&quot;, :offset 479, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (assoc model :structure-annotations (let [structure-annotations (when (.exists ^File structure-annotations-file)\n                                                                                                (read-string (slurp structure-annotations-file)))]\n                                                                    (if (seq structure-annotations)\n                                                                      (log/info (seq structure-annotations))\n                                                                      structure-annotations\n                                                                      (let [structure-annotations (do\n                                                                                                    (log/info \&quot;Making structure annotations\&quot;)\n                                                                                                    (util/pmap-kv (fn [s]\n                                                                                                                    (assign-sent-id model s))\n                                                                                                                  (:structure-annotations model)))]\n                                                                        (spit structure-annotations-file (pr-str structure-annotations))\n                                                                        structure-annotations))))\n          concept-annotations (let [concept-annotations (when (.exists ^File concept-annotations-file)\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/pmap-kv (fn [s]\n                                                                              (assign-tok model s))\n                                                                            (:concept-annotations model)))]\n                                    (spit concept-annotations-file (pr-str concept-annotations))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2779, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (assoc model :structure-annotations (let [structure-annotations (when (.exists ^File structure-annotations-file)\n                                                                                                (read-string (slurp structure-annotations-file)))]\n                                                                    (if (seq structure-annotations)\n                                                                      (do (log/info (seq structure-annotations))\n                                                                          structure-annotations)\n                                                                      (let [structure-annotations (do\n                                                                                                    (log/info \&quot;Making structure annotations\&quot;)\n                                                                                                    (util/pmap-kv (fn [s]\n                                                                                                                    (assign-sent-id model s))\n                                                                                                                  (:structure-annotations model)))]\n                                                                        (spit structure-annotations-file (pr-str structure-annotations))\n                                                                        structure-annotations))))\n          concept-annotations (let [concept-annotations (when (.exists ^File concept-annotations-file)\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/pmap-kv (fn [s]\n                                                                              (assign-tok model s))\n                                                                            (:concept-annotations model)))]\n                                    (spit concept-annotations-file (pr-str concept-annotations))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2788, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def base-training-model (re-model/make-model training-knowtator word2vec-db factory\n                                              (io/file testing-dir \&quot;concept-annotations.edn\&quot;)\n                                              (io/file testing-dir \&quot;structure-annotations.edn\&quot;)))&quot;, :offset 276, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (assoc model :structure-annotations (let [structure-annotations (when (.exists ^File structure-annotations-file)\n                                                                                                (read-string (slurp structure-annotations-file)))]\n                                                                    (if (seq structure-annotations)\n                                                                      structure-annotations\n                                                                      (let [structure-annotations (do\n                                                                                                    (log/info \&quot;Making structure annotations\&quot;)\n                                                                                                    (util/pmap-kv (fn [s]\n                                                                                                                    (assign-sent-id model s))\n                                                                                                                  (:structure-annotations model)))]\n                                                                        (spit structure-annotations-file (pr-str structure-annotations))\n                                                                        structure-annotations))))\n          concept-annotations (let [concept-annotations (when (.exists ^File concept-annotations-file)\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/pmap-kv (fn [s]\n                                                                              (assign-tok model s))\n                                                                            (:concept-annotations model)))]\n                                    (spit concept-annotations-file (pr-str concept-annotations))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2670, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk training-model testing-model results-dir\n                                                   {:context-path-length-cap          [100 10] #_[2 3 5 10 20 35 100]\n                                                    :match-thresh          #_[0.95]   [0.7 0.8 0.9]\n                                                    :cluster-thresh          #_[0.95] [0.975 0.95 0.9]\n                                                    :confidence-thresh                [0.9 0.7 0.5]\n                                                    :min-pattern-support              [1 3 5] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     5000\n                                                    :match-fn                         re/support-weighted-sim-distribution-context-match}))&quot;, :offset 1056, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def param-walk-results (evaluation/parameter-walk training-model testing-model results-dir\n                                                   {:context-path-length-cap          [100 10] #_[2 3 5 10 20 35 100]\n                                                    :match-thresh          #_[0.95]   [0.7 0.8 0.9]\n                                                    :cluster-thresh          #_[0.95] [0.975 0.95 0.9]\n                                                    :confidence-thresh                [0.9 0.7 0.5]\n                                                    :min-pattern-support              [1] #_[0 5 25]\n                                                    :seed-frac                        [1] #_[0.05 0.25 0.5 0.75]\n                                                    :rng                              0.022894\n                                                    :negative-cap                     5000\n                                                    :match-fn                         re/support-weighted-sim-distribution-context-match}))&quot;, :offset 1052, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (pmap (fn [[sample samples-scores]]\n                 (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                           (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                     (let [support-count      (count (:support pattern))\n                                                                           pattern-scores     (-&gt;&gt; support-count\n                                                                                                   (range support-offset)\n                                                                                                   (select-keys samples-scores))\n                                                                           best-pattern-score (apply max-key second pattern-scores)\n                                                                           good               (-&gt;&gt; pattern-scores\n                                                                                                   (filter #(&lt; match-thresh %))\n                                                                                                   (count))\n                                                                           bad                (- support-count good)]\n                                                                       (if (and (&lt; bad good)\n                                                                                (&lt; best-score best-pattern-score))\n                                                                         [[best-pattern-score pattern] support-count]\n                                                                         [best support-count])))\n                                                                   [[match-thresh nil 0] 0]))]\n                   (assoc sample :predicted (:predicted best-pattern)\n                                 :confidence (* best-score (/ good\n                                                              (count (:support best-pattern)))))))))))&quot;, :offset 2483, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (pmap (fn [[sample samples-scores]]\n                 (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                           (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                     (let [support-count      (count (:support pattern))\n                                                                           pattern-scores     (-&gt;&gt; support-count\n                                                                                                   (range support-offset)\n                                                                                                   (select-keys samples-scores)\n                                                                                                   (map second))\n                                                                           best-pattern-score (apply max pattern-scores)\n                                                                           good               (-&gt;&gt; pattern-scores\n                                                                                                   (filter #(&lt; match-thresh %))\n                                                                                                   (count))\n                                                                           bad                (- support-count good)]\n                                                                       (if (and (&lt; bad good)\n                                                                                (&lt; best-score best-pattern-score))\n                                                                         [[best-pattern-score pattern] support-count]\n                                                                         [best support-count])))\n                                                                   [[match-thresh nil 0] 0]))]\n                   (assoc sample :predicted (:predicted best-pattern)\n                                 :confidence (* best-score (/ good\n                                                              (count (:support best-pattern)))))))))))&quot;, :offset 2584, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (pmap (fn [[sample samples-scores]]\n                 (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                           (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                     (let [support-count      (count (:support pattern))\n                                                                           pattern-scores     (-&gt;&gt; support-count\n                                                                                                   (range support-offset)\n                                                                                                   (select-keys samples-scores)\n                                                                                                   (map second))\n                                                                           best-pattern-score (apply max pattern-scores)\n                                                                           good               (-&gt;&gt; pattern-scores\n                                                                                                   (filter #(&lt; match-thresh %))\n                                                                                                   (count))\n                                                                           bad                (- support-count good)]\n                                                                       (log/info (seq pattern-scores))\n                                                                       (if (and (&lt; bad good)\n                                                                                (&lt; best-score best-pattern-score))\n                                                                         [[best-pattern-score pattern] support-count]\n                                                                         [best support-count])))\n                                                                   [[match-thresh nil 0] 0]))]\n                   (assoc sample :predicted (:predicted best-pattern)\n                                 :confidence (* best-score (/ good\n                                                              (count (:support best-pattern)))))))))))&quot;, :offset 2687, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (pmap (fn [[sample samples-scores]]\n                 (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                           (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                     (let [support-count  (count (:support pattern))\n                                                                           pattern-scores (-&gt;&gt; support-count\n                                                                                               (range support-offset)\n                                                                                               (select-keys samples-scores)\n                                                                                               (map second))]\n                                                                       (log/info (seq pattern-scores))\n                                                                       (let [best-pattern-score (apply max pattern-scores)\n                                                                             good               (-&gt;&gt; pattern-scores\n                                                                                                     (filter #(&lt; match-thresh %))\n                                                                                                     (count))\n                                                                             bad                (- support-count good)]\n\n                                                                         (if (and (&lt; bad good)\n                                                                                  (&lt; best-score best-pattern-score))\n                                                                           [[best-pattern-score pattern] support-count]\n                                                                           [best support-count])))\n                                                                     [[match-thresh nil 0] 0])))]\n                   (assoc sample :predicted (:predicted best-pattern)\n                                 :confidence (* best-score (/ good\n                                                              (count (:support best-pattern)))))))))))&quot;, :offset 2690, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (pmap (fn [[sample samples-scores]]\n                 (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                           (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                     (let [support-count  (count (:support pattern))\n                                                                           pattern-scores (-&gt;&gt; support-count\n                                                                                               (range support-offset)\n                                                                                               (select-keys samples-scores)\n                                                                                               (map second))]\n                                                                       (log/info (seq pattern-scores))\n                                                                       (let [best-pattern-score (apply max pattern-scores)\n                                                                             good               (-&gt;&gt; pattern-scores\n                                                                                                     (filter #(&lt; match-thresh %))\n                                                                                                     (count))\n                                                                             bad                (- support-count good)]\n\n                                                                         (if (and (&lt; bad good)\n                                                                                  (&lt; best-score best-pattern-score))\n                                                                           [[best-pattern-score pattern] support-count]\n                                                                           [best support-count]))))\n                                                                   [[match-thresh nil 0] 0]))]\n                   (assoc sample :predicted (:predicted best-pattern)\n                                 :confidence (* best-score (/ good\n                                                              (count (:support best-pattern)))))))))))&quot;, :offset 2688, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          pattern-scores (-&gt;&gt; support-count\n                                                                                              (range support-offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-count]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (assoc sample :predicted (:predicted best-pattern)\n                                :confidence (* best-score (/ good\n                                                             (count (:support best-pattern)))))))))))&quot;, :offset 2664, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            (conj x (select-keys y (range offset (count z)))))\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 168, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [(conj x (select-keys y (range offset (count z)))) (count z)])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 132, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [(conj x (map second (select-keys y (range offset (count z)))) (count z))])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 94, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [(conj x (map second (select-keys y (range offset (count z))))) (count z)])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 136, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [#_(conj x (map second (select-keys y (range offset (count z)))))\n             (range offset (count z)) (count z)])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 177, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [#_(conj x (map second (select-keys y (range offset (count z)))))\n             (conj x (range offset (count z))) (count z)])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 186, :ns &quot;user&quot;} {:command &quot;(conj '(1 2) '(3))&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [#_(conj x (map second (select-keys y (range offset (count z)))))\n             (conj x (range offset (count z))) (+ offset (dec (count z)))])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 201, :ns &quot;user&quot;} {:command &quot;(let [y [1 2 3 4 5 6 7 8 9 10]]\n  (reduce (fn [[x offset] z]\n            [#_(conj x (map second (select-keys y (range offset (count z)))))\n             (conj x (range offset (count z))) (+ offset (count z))])\n          [nil 0] [[1 2] [3 4 5] [6 7 8 9 10]]))&quot;, :offset 196, :ns &quot;user&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] support-offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ support-offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range support-offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (assoc sample :predicted (:predicted best-pattern)\n                                :confidence (* best-score (/ good\n                                                             (count (:support best-pattern)))))))))))&quot;, :offset 2788, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (assoc sample :predicted (:predicted best-pattern)\n                                :confidence (* best-score (/ good\n                                                             (count (:support best-pattern)))))))))))&quot;, :offset 2764, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if best-pattern\n                    (assoc sample :predicted (:predicted best-pattern)\n                                  :confidence (* best-score (/ good\n                                                               (count (:support best-pattern)))))\n                    sample)))))))&quot;, :offset 2833, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if (seq best-pattern)\n                    (assoc sample :predicted (:predicted best-pattern)\n                                  :confidence (* best-score (/ good\n                                                               (count (:support best-pattern)))))\n                    sample)))))))&quot;, :offset 2839, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if (seq best-pattern)\n                    (do (log/info (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 2914, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if (seq best-pattern)\n                    (do best-pattern (log/info (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 2927, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-pattern best-score good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if (seq best-pattern)\n                    (do (log/info best-pattern (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 2927, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil 0] 0]))]\n                  (if (seq best-pattern)\n                    (do (log/info best-pattern (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 2932, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil nil] 0])\n                                                          (first))]\n                  (if (seq best-pattern)\n                    (do (log/info best-pattern (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 3000, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (log/info (seq pattern-scores))\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil nil] 0])\n                                                          (first))]\n                  (if (seq best-pattern)\n                    (do (log/info (count (:support best-pattern))) \n                      (assoc sample :predicted (:predicted best-pattern)\n                                    :confidence (* best-score (/ good\n                                                                 (count (:support best-pattern))))))\n                    sample)))))))&quot;, :offset 2987, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil nil] 0])\n                                                          (first))]\n                  (if (seq best-pattern)\n                    (assoc sample :predicted (:predicted best-pattern)\n                                  :confidence (* best-score (/ good\n                                                               (count (:support best-pattern)))))\n                    sample)))))))&quot;, :offset 2810, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-count]))))\n                                                                  [[match-thresh nil nil] 0])\n                                                          (first))]\n                  (if good\n                    (assoc sample :predicted (:predicted best-pattern)\n                                  :confidence (* best-score (/ good\n                                                               (count (:support best-pattern)))))\n                    sample)))))))&quot;, :offset 2796, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.95\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 582, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.9\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 581, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.7\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 581, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.5\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 581, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.2\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 581, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.9\n                        :cluster-thresh 0.75\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 518, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 #_(update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.7\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? false\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 583, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.8\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? false\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 581, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.8\n                        :cluster-thresh 0.7\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? false\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 518, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(count (:context (first training-sentences)))&quot;, :offset 45, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 #_(update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.8\n                        :cluster-thresh 0.8\n                        :confidence-thresh 0\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/sim-to-support-in-pattern-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 582, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (-&gt;&gt; (let [structure-annotations (when structure-annotations-file\n                                                                 (read-string (slurp structure-annotations-file)))]\n                                     (if (seq structure-annotations)\n                                       structure-annotations\n                                       (let [structure-annotations (do\n                                                                     (log/info \&quot;Making structure annotations\&quot;)\n                                                                     (util/pmap-kv (fn [s]\n                                                                                     (assign-sent-id model s))\n                                                                                   (:structure-annotations model)))]\n                                         (spit structure-annotations-file (pr-str structure-annotations))\n                                         structure-annotations)))\n                                   (assoc model :structure-annotations))\n          concept-annotations (let [concept-annotations (when concept-annotations-file\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/map-kv (fn [s]\n                                                                             (assign-toks model s))\n                                                                           (:concept-annotations model)))]\n                                    (spit concept-annotations-file (pr-str concept-annotations))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2367, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn ann-toks\n  [model {:keys [doc] :as ann}]\n  (let [concept-start (min-start ann)\n        concept-end   (max-end ann)\n        tok-ids       (do\n                        (log/info concept-start concept-end)\n                        (-&gt;&gt; model\n                             :structure-annotations\n                             (vals)\n                             (filter #(= (:doc %) doc))\n                             (filter #(let [tok-start (min-start %)\n                                            tok-end   (max-end %)]\n                                        (log/info tok-start tok-end)\n                                        (&lt;= concept-start tok-start tok-end concept-end)))))]\n    (when-not (seq tok-ids) (log/warn \&quot;No token found for\&quot; ann)\n                            (throw (ex-info (str \&quot;No token found for \&quot; ann)\n                                            {:type :tok-assignment, :cause :tok-not-found})))\n    tok-ids))&quot;, :offset 932, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn ann-toks\n  [model {:keys [doc] :as ann}]\n  (let [concept-start (min-start ann)\n        concept-end   (max-end ann)\n        tok-ids       (do\n                        (log/info concept-start concept-end)\n                        (-&gt;&gt; model\n                             :structure-annotations\n                             (vals)\n                             (filter #(= (:doc %) doc))\n                             (filter #(let [tok-start (min-start %)\n                                            tok-end   (max-end %)]\n                                        (log/info concept-start tok-start tok-end concept-end)\n                                        (&lt;= concept-start tok-start tok-end concept-end)))))]\n    (when-not (seq tok-ids) (log/warn \&quot;No token found for\&quot; ann)\n                            (throw (ex-info (str \&quot;No token found for \&quot; ann)\n                                            {:type :tok-assignment, :cause :tok-not-found})))\n    tok-ids))&quot;, :offset 958, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn ann-toks\n  [model {:keys [doc] :as ann}]\n  (let [concept-start (min-start ann)\n        concept-end   (max-end ann)\n        tok-ids       (-&gt;&gt; model\n                           :structure-annotations\n                           (vals)\n                           (filter #(= (:doc %) doc))\n                           (filter #(let [tok-start (min-start %)\n                                          tok-end   (max-end %)]\n                                      #_(log/info concept-start tok-start tok-end concept-end)\n                                      (or (&lt;= tok-start concept-start tok-end)\n                                          (&lt;= tok-start concept-end tok-end))\n                                      #_(&lt;= concept-start tok-start tok-end concept-end))))]\n    (when-not (seq tok-ids) (log/warn \&quot;No token found for\&quot; ann)\n                            (throw (ex-info (str \&quot;No token found for \&quot; ann)\n                                            {:type :tok-assignment, :cause :tok-not-found})))\n    tok-ids))&quot;, :offset 1015, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (-&gt;&gt; (let [structure-annotations (when (and structure-annotations-file (.exists ^File structure-annotations-file))\n                                                                 (read-string (slurp structure-annotations-file)))]\n                                     (if (seq structure-annotations)\n                                       structure-annotations\n                                       (let [structure-annotations (do\n                                                                     (log/info \&quot;Making structure annotations\&quot;)\n                                                                     (util/pmap-kv (fn [s]\n                                                                                     (assign-sent-id model s))\n                                                                                   (:structure-annotations model)))]\n                                         (when structure-annotations-file (spit structure-annotations-file (pr-str structure-annotations)))\n                                         structure-annotations)))\n                                   (assoc model :structure-annotations))\n          concept-annotations (let [concept-annotations (when (and concept-annotations-file (.exists ^File concept-annotations-file))\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/map-kv (fn [s]\n                                                                             (assign-toks model s))\n                                                                           (:concept-annotations model)))]\n                                    (when concept-annotations-file (spit concept-annotations-file (pr-str concept-annotations)))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2529, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn make-model\n  [v word2vec-db factory concept-annotations-file structure-annotations-file]\n  (word2vec/with-word2vec word2vec-db\n    (log/info \&quot;Making model\&quot;)\n    (let [model               (k/simple-model v)\n          model               (-&gt;&gt; (let [structure-annotations (when (and structure-annotations-file (.exists ^File structure-annotations-file))\n                                                                 (read-string (slurp structure-annotations-file)))]\n                                     (if (seq structure-annotations)\n                                       structure-annotations\n                                       (let [structure-annotations (do\n                                                                     (log/info \&quot;Making structure annotations\&quot;)\n                                                                     (util/pmap-kv (fn [s]\n                                                                                     (assign-sent-id model s))\n                                                                                   (:structure-annotations model)))]\n                                         (when structure-annotations-file (spit structure-annotations-file (pr-str structure-annotations)))\n                                         structure-annotations)))\n                                   (assoc model :structure-annotations))\n          concept-annotations (let [concept-annotations (when (and concept-annotations-file (.exists ^File concept-annotations-file))\n                                                          (read-string (slurp concept-annotations-file)))]\n                                (if (seq concept-annotations)\n                                  concept-annotations\n                                  (let [concept-annotations (do\n                                                              (log/info \&quot;Making concept annotations\&quot;)\n                                                              (util/pmap-kv (fn [s]\n                                                                              (assign-toks model s))\n                                                                           (:concept-annotations model)))]\n                                    (when concept-annotations-file (spit concept-annotations-file (pr-str concept-annotations)))\n                                    concept-annotations)))]\n\n      (assoc model :factory factory\n                   :word2vec-db word2vec-db\n                   :concept-annotations concept-annotations))))&quot;, :offset 2531, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(def base-training-model (re-model/make-model training-knowtator word2vec-db factory\n                                              nil #_(io/file training-dir \&quot;concept-annotations.edn\&quot;)\n                                              (io/file training-dir \&quot;structure-annotations.edn\&quot;)))&quot;, :offset 284, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(ns scripts.bio-creative-relation-extraction\n  (:require [clojure.java.io :as io]\n            [edu.ucdenver.ccp.knowtator-clj :as k]\n            [edu.ucdenver.ccp.nlp.re-model :as re-model]\n            [taoensso.timbre :as log]\n            [taoensso.timbre.appenders.core :as appenders]\n            [edu.ucdenver.ccp.nlp.evaluation :as evaluation]\n            [edu.ucdenver.ccp.nlp.readers :as rdr]\n            [uncomplicate.neanderthal.native :as thal-native]\n            [incanter.core :as incanter]\n            [incanter.io :as inc-io]\n            [edu.ucdenver.ccp.nlp.relation-extraction :as re]))\n\n;; File naming patterns\n(def sep \&quot;_\&quot;)\n(def training-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;training\&quot;])))\n(def training-pattern (apply str (interpose sep [training-prefix \&quot;%s\&quot;])))\n(def testing-prefix (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;gs\&quot;])))\n(def testing-pattern (apply str (interpose sep [\&quot;chemprot\&quot; \&quot;test\&quot; \&quot;%s\&quot; \&quot;gs\&quot;])))\n\n;;; FILES ;;;\n(def home-dir (io/file \&quot;/\&quot; \&quot;home\&quot; \&quot;harrison\&quot;))\n#_(def home-dir (io/file \&quot;/\&quot; \&quot;media\&quot; \&quot;harrison\&quot; \&quot;Seagate Expansion Drive\&quot; \&quot;data\&quot;))\n(def biocreative-dir (io/file home-dir \&quot;BioCreative\&quot; \&quot;BCVI-2017\&quot; \&quot;ChemProt_Corpus\&quot;))\n(def training-dir (io/file biocreative-dir training-prefix))\n(def testing-dir (io/file biocreative-dir testing-prefix))\n(def results-dir (io/file training-dir \&quot;results\&quot;))\n\n(def word-vector-dir (io/file home-dir \&quot;WordVectors\&quot;))\n(def word2vec-db (io/file word-vector-dir \&quot;bio-word-vectors-clj.vec\&quot;))\n\n(log/set-level! :info)\n\n(log/merge-config!\n  {:appenders {:spit   (appenders/spit-appender\n                         {:fname (-&gt;&gt; \&quot;biocreative.log\&quot;\n                                      (io/file home-dir)\n                                      (.getAbsolutePath))})\n               :postal {:enabled? false} #_(postal-appender/postal-appender\n                                             {:from \&quot;me@draines.com\&quot; :to \&quot;pielkekid@gmail.com\&quot;})}})\n\n(def factory thal-native/native-double)\n\n(def property-map {\n                   ;\&quot;PART-OF\&quot; \&quot;CPR:1\&quot;\n                   ;\&quot;REGULATOR\&quot; \&quot;CPR:2\&quot; \&quot;DIRECT-REGULATOR\&quot; \&quot;CPR:2\&quot; \&quot;INDIRECT-REGULATOR\&quot; \&quot;CPR:2\&quot;\n                   \&quot;UPREGULATOR\&quot;   \&quot;CPR:3\&quot; \&quot;ACTIVATOR\&quot; \&quot;CPR:3\&quot; \&quot;INDIRECT-UPREGULATOR\&quot; \&quot;CPR:3\&quot;\n                   \&quot;DOWNREGULATOR\&quot; \&quot;CPR:4\&quot; \&quot;INHIBITOR\&quot; \&quot;CPR:4\&quot; \&quot;INDIRECT-DOWNREGULATOR\&quot; \&quot;CPR:4\&quot;\n                   \&quot;AGONIST\&quot;       \&quot;CPR:5\&quot; \&quot;AGONIST-ACTIVATOR\&quot; \&quot;CPR:5\&quot; \&quot;AGONIST-INHIBITOR\&quot; \&quot;CPR:5\&quot;\n                   \&quot;ANTAGONIST\&quot;    \&quot;CPR:6\&quot;\n                   ;\&quot;MODULATOR\&quot; \&quot;CPR:7\&quot; \&quot;MODULATOR‐ACTIVATOR\&quot; \&quot;CPR:7\&quot; \&quot;MODULATOR‐INHIBITOR\&quot; \&quot;CPR:7\&quot;\n                   ;\&quot;COFACTOR\&quot; \&quot;CPR:8\&quot;\n                   \&quot;SUBSTRATE\&quot;     \&quot;CPR:9\&quot; \&quot;PRODUCT-OF\&quot; \&quot;CPR:9\&quot; \&quot;SUBSTRATE_PRODUCT-OF\&quot; \&quot;CPR:9\&quot;\n                   ;\&quot;NOT\&quot; \&quot;CPR:10\&quot;\n                   re-model/NONE   re-model/NONE})\n\n\n\n(def properties (set (vals property-map)))\n\n(def allowed-concept-pairs #{#{\&quot;CHEMICAL\&quot; \&quot;GENE-N\&quot;}\n                             #{\&quot;CHEMICAL\&quot; \&quot;GENE-Y\&quot;}})\n\n;;; MODELS ;;;\n(defn biocreative-model\n  [model sentences property-map]\n  (assoc model\n    :sentences (-&gt;&gt; sentences\n                    (filter (fn [{:keys [entities]}]\n                              (-&gt;&gt; entities\n                                   (map #(get-in model [:concept-annotations % :concept]))\n                                   (set)\n                                   (allowed-concept-pairs))))\n                    (map #(update % :property (fn [property] (or (get property-map property)\n                                                                 re-model/NONE)))))\n    :properties (set (vals property-map))))\n\n(def training-knowtator (k/model training-dir nil))\n(rdr/read-biocreative-files training-dir training-pattern training-knowtator)\n(def base-training-model (re-model/make-model training-knowtator word2vec-db factory\n                                              nil #_(io/file training-dir \&quot;concept-annotations.edn\&quot;)\n                                              (io/file training-dir \&quot;structure-annotations.edn\&quot;)))\n(def training-sentences (re-model/make-sentences base-training-model (io/file training-dir \&quot;sentences.edn\&quot;)))\n(def training-model (biocreative-model base-training-model training-sentences property-map))\n\n(def testing-knowtator (k/model testing-dir nil))\n(rdr/read-biocreative-files testing-dir testing-pattern testing-knowtator)\n(def base-testing-model (re-model/make-model testing-knowtator word2vec-db factory\n                                             (io/file testing-dir \&quot;concept-annotations.edn\&quot;)\n                                             (io/file testing-dir \&quot;structure-annotations.edn\&quot;)))\n(def testing-sentences (re-model/make-sentences base-testing-model (io/file testing-dir \&quot;sentences.edn\&quot;)))\n(def testing-model (biocreative-model base-testing-model testing-sentences property-map))\n\n;;; SENTENCE STATS ;;;\n(log/info \&quot;Model\\n\&quot;\n          (incanter/to-dataset [(assoc (-&gt;&gt; (select-keys training-model re-model/MODEL-KEYs)\n                                            (util/map-kv count))\n                                  :model :training)\n                                (assoc (-&gt;&gt; (select-keys testing-model re-model/MODEL-KEYs)\n                                            (util/map-kv count))\n                                  :model :testing)]))\n(log/info \&quot;Num sentences with property\\n\&quot;\n          (-&gt;&gt; [(:sentences training-model)\n                (:sentences testing-model)]\n               (map #(group-by :property %))\n               (map #(util/map-kv count %))\n               (map #(assoc %2 :model %1)\n                    [:training :testing])\n               (incanter/to-dataset)))&quot;, :offset 5565, :ns &quot;user&quot;} {:command &quot;(def training-context-paths-plot (evaluation/plot-context-lengths training-model results-dir \&quot;Training %s\&quot;))&quot;, :offset 108, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(incanter/view training-context-paths-plot)&quot;, :offset 43, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(-&gt;&gt; [1 2 3 4 5 6 7 9 9 10 11 12]\n     (comp\n       (filter odd?)\n       (map inc)\n       (take 5)))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(-&gt;&gt; [1 2 3 4 5 6 7 9 9 10 11 12]\n     ((comp\n        (filter odd?)\n        (map inc)\n        (take 5))))&quot;, :offset 40, :ns &quot;user&quot;} {:command &quot;((comp\n   (filter odd?)\n   (map inc)\n   (take 5)) [1 2 3 4 5 6 7 9 9 10 11 12])\n     &quot;, :offset 79, :ns &quot;user&quot;} {:command &quot;(seq ((comp\n        (filter odd?)\n        (map inc)\n        (take 5)) [1 2 3 4 5 6 7 9 9 10 11 12]))\n     &quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(into [] ((comp\n            (filter odd?)\n            (map inc)\n            (take 5)) [1 2 3 4 5 6 7 9 9 10 11 12]))\n     &quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(into [] (comp\n           (filter odd?)\n           (map inc)\n           (take 5)) [1 2 3 4 5 6 7 9 9 10 11 12])\n     &quot;, :offset 70, :ns &quot;user&quot;} {:command &quot;(defn ann-toks\n  [model {:keys [doc] :as ann}]\n  (let [concept-start (min-start ann)\n        concept-end   (max-end ann)\n        tok-ids       (into [] (comp (filter #(= (:doc %) doc))\n                                     (filter #(let [tok-start (min-start %)\n                                                    tok-end   (max-end %)]\n                                                (or (&lt;= tok-start concept-start tok-end)\n                                                    (&lt;= tok-start concept-end tok-end))\n                                                #_(&lt;= concept-start tok-start tok-end concept-end))))\n                            (vals (:structure-annotations model)))]\n    (when-not (seq tok-ids) (log/warn \&quot;No token found for\&quot; ann)\n                            (throw (ex-info (str \&quot;No token found for \&quot; ann)\n                                            {:type :tok-assignment, :cause :tok-not-found})))\n    tok-ids))&quot;, :offset 930, :ns &quot;edu.ucdenver.ccp.nlp.re-model&quot;} {:command &quot;(defn sim-to-support-in-pattern-match\n  [{:keys [samples vector-fn patterns match-thresh factory]}]\n  (let [patterns        (vec patterns)\n        support         (mapcat :support patterns)\n        support-vectors (map vector-fn support)\n        samples         (vec samples)]\n    (-&gt;&gt; samples\n         (map vector-fn)\n         (linear-algebra/mdot factory support-vectors)\n         (map vector samples)\n         (map (fn [[sample sample-scores]]\n                (let [[best-score best-pattern good] (-&gt;&gt; patterns\n                                                          (reduce (fn [[[best-score _ _ :as best] offset] pattern]\n                                                                    (let [support-count  (count (:support pattern))\n                                                                          support-offset (+ offset support-count)\n                                                                          pattern-scores (-&gt;&gt; support-offset\n                                                                                              (range offset)\n                                                                                              (select-keys sample-scores)\n                                                                                              (map second))]\n                                                                      (let [best-pattern-score (apply max pattern-scores)\n                                                                            good               (-&gt;&gt; pattern-scores\n                                                                                                    (filter #(&lt; match-thresh %))\n                                                                                                    (count))\n                                                                            bad                (- support-count good)]\n\n                                                                        (if (and (&lt; bad good)\n                                                                                 (&lt; best-score best-pattern-score))\n                                                                          [[best-pattern-score pattern good] support-offset]\n                                                                          [best support-offset]))))\n                                                                  [[match-thresh nil nil] 0])\n                                                          (first))]\n                  (if good\n                    (assoc sample :predicted (:predicted best-pattern)\n                                  :confidence (* best-score (/ good\n                                                               (count (:support best-pattern)))))\n                    sample)))))))&quot;, :offset 2797, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn support-weighted-sim-pattern-distribution-context-match\n  [{:keys [vector-fn samples patterns match-thresh factory]}]\n  (when (and (seq samples) (seq patterns))\n    (log/info \&quot;Finding matches\&quot;)\n    (let [total-support   (-&gt;&gt; patterns\n                               (map :support)\n                               (map count)\n                               (reduce +))\n          patterns        (-&gt;&gt; patterns\n                               (vec)\n                               (map #(assoc % :weight (/ (count (:support %))\n                                                         total-support))))\n          samples         (vec samples)\n          support         (mapcat :support patterns)\n          support-vectors (map vector-fn support)]\n      (-&gt;&gt; samples\n           (map vector-fn)\n           (linear-algebra/mdot factory support-vectors)\n           (map vector samples)\n           (pmap (fn [[sample scores]]\n                   (let [scores               (-&gt;&gt; patterns\n                                                   (reduce (fn [[pattern-scores offset] pattern]\n                                                             (let [support-count (count (:support pattern))\n                                                                   new-offset    (+ offset support-count)\n                                                                   scores        (-&gt;&gt; new-offset\n                                                                                      (range offset)\n                                                                                      (select-keys scores)\n                                                                                      (map second))\n                                                                   score         (apply max scores)\n                                                                   good          (-&gt;&gt; scores\n                                                                                      (filter #(&lt; match-thresh %))\n                                                                                      (count))\n                                                                   bad           (- support-count good)]\n                                                               [(conj pattern-scores (assoc pattern\n                                                                                       :score score\n                                                                                       :scores scores\n                                                                                       :good good\n                                                                                       :bad bad))\n                                                                new-offset]))\n                                                           [nil 0])\n                                                   (filter (fn [{:keys [bad good]}] (&lt; bad good))))\n                         {:keys [predicted scores weight] :as :best} (apply max-key :score scores)\n                         mu                   (-&gt;&gt; scores\n                                                   (remove #(= (:predicted %) predicted))\n                                                   (mapcat #(map (fn [score]\n                                                                   (* score (:weight)))\n                                                                 (:scores %)))\n                                                   (inc-stats/mean))\n                         weighted-best-scores (map #(* % weight) scores)]\n                     (let [{:keys [p-value]} (inc-stats/t-test weighted-best-scores :mu mu)\n                           confidence (- 1 p-value)]\n                       (if (&lt; match-thresh confidence)\n                         (assoc sample :predicted predicted\n                                       :confidence confidence)\n                         sample)))))))))&quot;, :offset 3945, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn support-weighted-sim-pattern-distribution-context-match\n  [{:keys [vector-fn samples patterns match-thresh factory]}]\n  (when (and (seq samples) (seq patterns))\n    (log/info \&quot;Finding matches\&quot;)\n    (let [total-support   (-&gt;&gt; patterns\n                               (map :support)\n                               (map count)\n                               (reduce +))\n          patterns        (-&gt;&gt; patterns\n                               (vec)\n                               (map #(assoc % :weight (/ (count (:support %))\n                                                         total-support))))\n          samples         (vec samples)\n          support         (mapcat :support patterns)\n          support-vectors (map vector-fn support)]\n      (-&gt;&gt; samples\n           (map vector-fn)\n           (linear-algebra/mdot factory support-vectors)\n           (map vector samples)\n           (pmap (fn [[sample scores]]\n                   (let [scores               (-&gt;&gt; patterns\n                                                   (reduce (fn [[pattern-scores offset] pattern]\n                                                             (let [support-count (count (:support pattern))\n                                                                   new-offset    (+ offset support-count)\n                                                                   scores        (-&gt;&gt; new-offset\n                                                                                      (range offset)\n                                                                                      (select-keys scores)\n                                                                                      (map second))\n                                                                   score         (apply max scores)\n                                                                   good          (-&gt;&gt; scores\n                                                                                      (filter #(&lt; match-thresh %))\n                                                                                      (count))\n                                                                   bad           (- support-count good)]\n                                                               [(conj pattern-scores (assoc pattern\n                                                                                       :score score\n                                                                                       :scores scores\n                                                                                       :good good\n                                                                                       :bad bad))\n                                                                new-offset]))\n                                                           [nil 0])\n                                                   (filter (fn [{:keys [bad good]}] (&lt; bad good))))\n                         {:keys [predicted scores weight] :as :best} (apply max-key :score scores)\n                         mu                   (-&gt;&gt; scores\n                                                   (remove #(= (:predicted %) predicted))\n                                                   (mapcat #(map (fn [score]\n                                                                   (* score (:weight)))\n                                                                 (:scores %)))\n                                                   (inc-stats/mean))\n                         weighted-best-scores (map #(* % weight) scores)\n                         {:keys [p-value]} (inc-stats/t-test weighted-best-scores :mu mu)\n                         confidence           (- 1 p-value)]\n                     (if (&lt; match-thresh confidence)\n                       (assoc sample :predicted predicted\n                                     :confidence confidence)\n                       sample))))))))&quot;, :offset 3941, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(defn support-weighted-sim-pattern-distribution-context-match\n  [{:keys [vector-fn samples patterns match-thresh factory]}]\n  (when (and (seq samples) (seq patterns))\n    (log/info \&quot;Finding matches\&quot;)\n    (let [total-support   (-&gt;&gt; patterns\n                               (map :support)\n                               (map count)\n                               (reduce +))\n          patterns        (-&gt;&gt; patterns\n                               (vec)\n                               (map #(assoc % :weight (/ (count (:support %))\n                                                         total-support))))\n          samples         (vec samples)\n          support         (mapcat :support patterns)\n          support-vectors (map vector-fn support)]\n      (-&gt;&gt; samples\n           (map vector-fn)\n           (linear-algebra/mdot factory support-vectors)\n           (map vector samples)\n           (pmap (fn [[sample scores]]\n                   (let [scores     (-&gt;&gt; patterns\n                                         (reduce (fn [[pattern-scores offset] pattern]\n                                                   (let [support-count (count (:support pattern))\n                                                         new-offset    (+ offset support-count)\n                                                         scores        (-&gt;&gt; new-offset\n                                                                            (range offset)\n                                                                            (select-keys scores)\n                                                                            (map second))\n                                                         score         (apply max scores)\n                                                         good          (-&gt;&gt; scores\n                                                                            (filter #(&lt; match-thresh %))\n                                                                            (count))\n                                                         bad           (- support-count good)]\n                                                     [(conj pattern-scores (assoc pattern\n                                                                             :score score\n                                                                             :scores scores\n                                                                             :good good\n                                                                             :bad bad))\n                                                      new-offset]))\n                                                 [nil 0])\n                                         (filter (fn [{:keys [bad good]}] (&lt; bad good))))\n                         {:keys [predicted scores weight]} (apply max-key :score scores)\n                         mu         (-&gt;&gt; scores\n                                         (remove #(= (:predicted %) predicted))\n                                         (mapcat #(map (fn [score]\n                                                         (* score (:weight)))\n                                                       (:scores %)))\n                                         (inc-stats/mean))\n                         scores     (map #(* % weight) scores)\n                         {:keys [p-value]} (inc-stats/t-test scores :mu mu)\n                         confidence (- 1 p-value)]\n                     (if (&lt; match-thresh confidence)\n                       (assoc sample :predicted predicted\n                                     :confidence confidence)\n                       sample))))))))&quot;, :offset 3627, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;} {:command &quot;(def training-model (update training-model\n                              :sentences (fn [sentences]\n                                           (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 189, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def testing-model (update testing-model\n                             :sentences (fn [sentences]\n                                          (map #(re-model/map-&gt;Sentence %) sentences))))&quot;, :offset 185, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def prepared-model (-&gt; training-model\n                        (assoc :seed-frac 1\n                               :rng 0.022894\n                               :negative-cap 3000)\n                        (re-model/split-train-test)\n                        (re-model/train-test testing-model)))&quot;, :offset 292, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(def results (-&gt; prepared-model\n                 #_(update :seeds (fn [seeds] (take 100 seeds)))\n                 (assoc :context-path-length-cap 100\n                        :match-thresh 0.99\n                        :cluster-thresh 0.975\n                        :confidence-thresh 0.7\n                        :min-pattern-support 1\n                        :max-iterations 100\n                        :max-matches 5000\n                        :re-clustering? true\n                        :match-fn re/support-weighted-sim-pattern-distribution-context-match)\n                 (evaluation/run-model results-dir)))&quot;, :offset 611, :ns &quot;scripts.bio-creative-relation-extraction&quot;} {:command &quot;(defn support-weighted-sim-pattern-distribution-context-match\n  [{:keys [vector-fn samples patterns match-thresh factory] :as params}]\n  (when (and (seq samples) (seq patterns))\n    (log/info \&quot;Finding matches\&quot;)\n    (let [patterns        (patterns-with-support-weight patterns)\n          samples         (vec samples)\n          support         (mapcat :support patterns)\n          support-vectors (map vector-fn support)]\n      (-&gt;&gt; samples\n           (map vector-fn)\n           (linear-algebra/mdot factory support-vectors)\n           (map vector samples)\n           (map (fn [[sample sample-scores]]\n                  (let [scores (support-pattern-scores params patterns sample-scores)]\n                    (if (seq scores)\n                      (let [{:keys [predicted weight] best-scores :scores :as pattern} (apply max-key :score scores)\n                            other-scores (-&gt;&gt; scores\n                                              (remove #(= (:predicted %) predicted))\n                                              (mapcat #(map (fn [score]\n                                                              (* score (:weight %)))\n                                                            (:scores %))))\n                            best-scores (map #(* % weight) best-scores)]\n                        (if (and (&lt;= 2 (count best-scores))\n                                 (seq other-scores))\n                          (let [mu          (inc-stats/mean other-scores)\n                                {:keys [p-value]} (do\n                                                    #_(log/info mu (seq best-scores) pattern)\n                                                    (inc-stats/t-test best-scores :mu mu))\n                                confidence  (- 1 p-value)]\n                            (if (&lt; match-thresh confidence)\n                              (assoc sample :predicted predicted\n                                            :confidence confidence)\n                              sample)\n                            (assoc sample :predicted predicted\n                                          :confidence confidence))))\n                      sample))))))))&quot;, :offset 2169, :ns &quot;edu.ucdenver.ccp.nlp.relation-extraction&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Tantor REPL">
    <configuration name="Connect to Tantor" type="BashConfigurationType" factoryName="Bash" activateToolWindowBeforeRun="false">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_on_tantor.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="PITCHME" type="BashConfigurationType" factoryName="Bash">
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="INTERPRETER_PATH" value="/bin/bash" />
      <option name="PROJECT_INTERPRETER" value="false" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/run/run_pitchme.sh" />
      <option name="PARAMETERS" value="" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for Dep2Rel" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="Dep2Rel" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Xmx14g" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL 2" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41429" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Tantor REPL" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false" singleton="true">
      <module name="Dep2Rel" />
      <setting name="host" value="127.0.0.1" />
      <setting name="port" value="41425" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Bash.PITCHME" />
      <item itemvalue="Bash.Connect to Tantor" />
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.Tantor REPL" />
      <item itemvalue="Clojure REPL.Tantor REPL 2" />
      <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
        <item itemvalue="Clojure REPL.REPL for Dep2Rel" />
      </list>
    </recent_temporary>
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" internal_type="SLIDING" order="0" sideWeight="0.4988938" type="SLIDING" weight="0.1916972" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" sideWeight="0.5011062" side_tool="true" weight="0.1898657" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32843652" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.49880952" weight="0.28331584" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.32964602" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.32964602" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="7" weight="0.32964602" />
      <window_info anchor="bottom" id="Version Control" order="8" sideWeight="0.4993895" weight="0.4921301" />
      <window_info anchor="bottom" id="Build" order="9" weight="0.2623295" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="11" weight="0.32964602" />
      <window_info anchor="bottom" id="Event Log" order="12" sideWeight="0.5011905" side_tool="true" visible="true" weight="0.28331584" />
      <window_info anchor="bottom" id="Database Changes" order="13" />
      <window_info anchor="bottom" id="Run with VisualVM" order="14" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="15" />
      <window_info anchor="bottom" auto_hide="true" x="768" y="420" width="832" height="900" id="Terminal" order="16" sideWeight="0.4993895" type="FLOATING" weight="0.30641592" />
      <window_info anchor="bottom" id="Messages" order="17" weight="0.32738718" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Maven" order="3" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Google Cloud Storage" order="5" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="6" />
      <window_info anchor="right" id="Database" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Leiningen" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="10" sideWeight="0.48990825" weight="0.2" />
      <window_info active="true" anchor="right" x="1" y="443" width="1598" height="876" id="REPL" order="11" sideWeight="0.5100917" side_tool="true" type="WINDOWED" visible="true" weight="0.43772894" />
      <window_info anchor="right" x="0" y="0" width="350" height="694" id="Documentation" order="12" side_tool="true" weight="0.32967034" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="COLUMN_ORDER">
      <list>
        <option value="0" />
        <option value="2" />
        <option value="3" />
        <option value="1" />
      </list>
    </option>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="2" />
                  <option value="1" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list />
          </value>
        </entry>
        <entry key="User">
          <value>
            <list />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Fixes to confidence implementation" />
    <MESSAGE value="Write metrics on each run" />
    <MESSAGE value="Cache pattern-cluster sim" />
    <MESSAGE value="Refactor new-matches to seeds. Calc unit vec in context-vector fn" />
    <MESSAGE value="Write/load model from file" />
    <MESSAGE value="Cluster PCA plotting" />
    <MESSAGE value="Faster clustering using caching and vectors" />
    <MESSAGE value="Don't save model (graphs don't save to edn nicely)" />
    <MESSAGE value="Parallelize pattern creation" />
    <MESSAGE value="Minor" />
    <MESSAGE value="Mostly logging changes" />
    <MESSAGE value="Updated deps" />
    <MESSAGE value="Save structure and concept annotations to  edn" />
    <MESSAGE value="More general score caching fn" />
    <MESSAGE value="Find matches using score distribution" />
    <MESSAGE value="Improved speed of distribution based match fh" />
    <MESSAGE value="Improved speed of distribution based match fn" />
    <MESSAGE value="Clean up" />
    <MESSAGE value="Match by sim to all support" />
    <MESSAGE value="fixed offset" />
    <MESSAGE value="Changes and horizontal dep example" />
    <MESSAGE value="Trying to assign more accurate tokens to entities" />
    <MESSAGE value="Changes" />
    <MESSAGE value="Biocreative dir for results" />
    <MESSAGE value="Just try and catch statistical exceptions (e.g. 0 variance due to all the same word)" />
    <option name="LAST_COMMIT_MESSAGE" value="Just try and catch statistical exceptions (e.g. 0 variance due to all the same word)" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="evaluateCodeFragment">
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; entities
                                              (map :concept)
                                              (map set)
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(get s :entities)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= &quot;CRAFT_aggregate_ontology_Instance_21741&quot; (:id e))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(key-fn (first collection))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first collection)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(first (:graphSpaces doc))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(-&gt;&gt; model
     :concept-graphs
     vals
     seq)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>CODE_FRAGMENT</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= (:id graph-space) &quot;Sentence 243&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= (:id triple) &quot;4&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(= target &quot;11532192-23988&quot;)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? context)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(nil? sent)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(not (or e1 e2))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
    <expressions id="evaluateExpression">
      <expression>
        <expression-string>(-&gt; annotation
                                 :spans
                                 first
                                 :text)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(seq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doall annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(doseq annotation)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>annotation</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(simple-concep (:conceptAnnotation (bean (:source triple))))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:conceptAnnotation (bean (:source triple)))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean (:source triple))</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(:source triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
      <expression>
        <expression-string>(bean triple)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="260" selection-start-line="260" selection-end-line="260" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/78ad5ebd65aeff113410c6112bc1ec4c545d7f9d/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="447">
          <caret line="82" column="13" lean-forward="true" selection-start-line="82" selection-start-column="13" selection-end-line="82" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/6982794c5919a5f2248ec87e3f72f08d21518e4e/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="49" column="6" selection-start-line="49" selection-start-column="6" selection-end-line="49" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="8" column="10" lean-forward="true" selection-start-line="8" selection-start-column="10" selection-end-line="8" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_pitchme.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="23" lean-forward="true" selection-start-line="2" selection-start-column="23" selection-end-line="2" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/metrics.svg" />
    <entry file="file://$PROJECT_DIR$/.attach_pid8189">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/101b1b52beb68ad4ee3c62a5ed8d68fec6f4f719/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="59" column="6" selection-start-line="59" selection-start-column="6" selection-end-line="59" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/google/inject/guice/4.0/guice-4.0.jar!/com/google/inject/internal/cglib/core/$CodeGenerationException.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="7" column="13" selection-start-line="7" selection-start-column="13" selection-end-line="7" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/lang/Exception.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="212">
          <caret line="44" column="13" selection-start-line="44" selection-start-column="13" selection-end-line="44" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/uncomplicate_context_alg.clj" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/Word2Vec-clj/a9ccf752bc5ff1231a0cbbcfe945eabe439d40d4/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="193">
          <caret line="40" column="6" selection-start-line="40" selection-start-column="6" selection-end-line="40" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/net/mikera/core.matrix/0.52.0/core.matrix-0.52.0.jar!/clojure/core/matrix/dataset.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-88">
          <caret line="23" column="6" selection-start-line="23" selection-start-column="6" selection-end-line="23" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-core/1.9.3/incanter-core-1.9.3.jar!/incanter/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-22">
          <caret line="38" column="48" selection-start-line="38" selection-start-column="48" selection-end-line="38" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/datasets.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="255">
          <caret line="20" column="37" selection-start-line="20" selection-start-column="37" selection-end-line="20" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/incanter/incanter-io/1.9.3/incanter-io-1.9.3.jar!/incanter/io.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="182">
          <caret line="203" column="7" lean-forward="true" selection-start-line="203" selection-start-column="7" selection-end-line="203" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="jar:///opt/graalvm/src.zip!/java/io/File.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-2288">
          <caret line="148" column="13" selection-start-line="148" selection-start-column="13" selection-end-line="148" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.java" />
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/Word2VecNotSet.clj" />
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/b3a4a2eacc14d32386ce389845eba897615388ac/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="336">
          <caret line="39" column="62" lean-forward="true" selection-start-line="39" selection-start-column="62" selection-end-line="39" selection-end-column="62" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" lean-forward="true" selection-start-line="5" selection-end-line="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-237">
          <caret line="30" column="21" lean-forward="true" selection-start-line="30" selection-start-column="21" selection-end-line="30" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/assets/PITCHME.css" />
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="10" column="61" selection-start-line="10" selection-start-column="61" selection-end-line="10" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="528">
          <caret line="30" selection-start-line="30" selection-end-line="30" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="4988" column="6" selection-start-line="4988" selection-start-column="6" selection-end-line="4988" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="257">
          <caret line="36" column="28" selection-start-line="36" selection-start-column="28" selection-end-line="36" selection-end-column="28" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/neanderthal/internal/host/buffer_block.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="987" column="32" lean-forward="true" selection-start-line="987" selection-start-column="32" selection-end-line="987" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/89d4aa7c2e2b67e60030f7d1ef3d84d851341857/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="43" column="6" selection-start-line="43" selection-start-column="6" selection-end-line="43" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/uncomplicate/commons/utils.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="196">
          <caret line="129" selection-start-line="129" selection-end-line="129" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5af4d2a82910c4972c929cf26f1312bc41a320a4/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="208">
          <caret line="15" column="59" selection-start-line="15" selection-start-column="42" selection-end-line="15" selection-end-column="102" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.gitlibs/libs/github-tuh8888/hpl-utl/5af4d2a82910c4972c929cf26f1312bc41a320a4/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="142">
          <caret line="27" column="6" selection-start-line="27" selection-start-column="6" selection-end-line="27" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/clojure/core_deftype.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="582" selection-start-line="582" selection-end-line="582" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/ubergraph/alg.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="187" selection-start-line="187" selection-end-line="187" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/readers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="295">
          <caret line="64" column="37" selection-start-line="64" selection-start-column="37" selection-end-line="64" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/linear_algebra.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="748">
          <caret line="34" column="39" selection-start-line="34" selection-start-column="39" selection-end-line="34" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="39" lean-forward="true" selection-start-line="20" selection-start-column="39" selection-end-line="20" selection-end-column="39" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/relation_extraction_script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="213">
          <caret line="88" column="38" selection-start-line="88" selection-start-column="38" selection-end-line="88" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/run/run_on_tantor.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="44">
          <caret line="2" column="29" lean-forward="true" selection-start-line="2" selection-start-column="29" selection-end-line="2" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="317">
          <caret line="4997" selection-start-line="4997" selection-end-line="4997" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="101" selection-start-line="4" selection-start-column="101" selection-end-line="4" selection-end-column="101" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../Word2Vec-clj/src/word2vec.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="507">
          <caret line="45" column="12" selection-start-line="45" selection-start-column="6" selection-end-line="46" selection-end-column="61" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/re_model.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="589">
          <caret line="292" column="69" selection-start-line="292" selection-start-column="69" selection-end-line="292" selection-end-column="69" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../hpl-util/target/taoensso/timbre/appenders/example.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/examples.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="653">
          <caret line="48" column="73" selection-start-line="48" selection-start-column="73" selection-end-line="48" selection-end-column="73" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/PITCHME.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor relative-caret-position="559">
            <caret line="104" column="13" lean-forward="true" selection-start-line="104" selection-start-column="13" selection-end-line="104" selection-end-column="13" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="330">
          <caret line="15" column="64" lean-forward="true" selection-start-line="15" selection-start-column="64" selection-end-line="15" selection-end-column="64" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="150">
          <caret line="21" lean-forward="true" selection-start-line="21" selection-end-line="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/edu/ucdenver/ccp/nlp/evaluation.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="600">
          <caret line="238" column="46" lean-forward="true" selection-start-line="238" selection-start-column="46" selection-end-line="238" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/scripts/bio_creative_relation_extraction.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="456">
          <caret line="179" column="49" lean-forward="true" selection-start-line="179" selection-start-column="49" selection-end-line="179" selection-end-column="49" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>Python 3.7 (Dep2Rel)</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Word2Vec-clj</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: aopalliance:1.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>